
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000280e  00002882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002a0c  00000000  00000000  00002894  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001354  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000065f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000068a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000084ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000093d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a575  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ad43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 05 14 	jmp	0x280a	; 0x280a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 95 13 	jmp	0x272a	; 0x272a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Main function that initializes the BUZZER, UART, I2C and waits for the other MCU
 * 					to be ready
 *------------------------------------------------------------------------------------------------------*/
int main (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	e3 97       	sbiw	r28, 0x33	; 51
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61

	uint8 pass1[MAX_PASSWORD] = {0};					/* Array to save first entry password */
     b4a:	8f e0       	ldi	r24, 0x0F	; 15
     b4c:	fe 01       	movw	r30, r28
     b4e:	34 96       	adiw	r30, 0x04	; 4
     b50:	df 01       	movw	r26, r30
     b52:	98 2f       	mov	r25, r24
     b54:	1d 92       	st	X+, r1
     b56:	9a 95       	dec	r25
     b58:	e9 f7       	brne	.-6      	; 0xb54 <main+0x1e>
	uint8 entered_password[MAX_PASSWORD] = {0};			/* Array to save entered passwords to check matching */
     b5a:	8f e0       	ldi	r24, 0x0F	; 15
     b5c:	fe 01       	movw	r30, r28
     b5e:	73 96       	adiw	r30, 0x13	; 19
     b60:	df 01       	movw	r26, r30
     b62:	98 2f       	mov	r25, r24
     b64:	1d 92       	st	X+, r1
     b66:	9a 95       	dec	r25
     b68:	e9 f7       	brne	.-6      	; 0xb64 <main+0x2e>

	/* Buzzer initialization */
	Buzzer_init();
     b6a:	0e 94 4f 08 	call	0x109e	; 0x109e <Buzzer_init>

	/* DC Motor Initialization on PORTD PIN6 & PIN7 */
	DcMotor_Init();
     b6e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <DcMotor_Init>
	 * 2- Data Bits : 8
	 * 3- Parity	: Disable
	 * 4- Stop Bits : 1
	 */
	UART_ConfigType UART_Config;
	UART_Config.BaudRate = Baud_9600;
     b72:	80 e8       	ldi	r24, 0x80	; 128
     b74:	95 e2       	ldi	r25, 0x25	; 37
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	8a a3       	std	Y+34, r24	; 0x22
     b7c:	9b a3       	std	Y+35, r25	; 0x23
     b7e:	ac a3       	std	Y+36, r26	; 0x24
     b80:	bd a3       	std	Y+37, r27	; 0x25
	UART_Config.DataBits = Data_8;
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	8e a3       	std	Y+38, r24	; 0x26
	UART_Config.ParityMode = Parity_Disable;
     b86:	1f a2       	std	Y+39, r1	; 0x27
	UART_Config.StopBits = StopBits_1;
     b88:	18 a6       	std	Y+40, r1	; 0x28
	UART_init(&UART_Config);
     b8a:	ce 01       	movw	r24, r28
     b8c:	82 96       	adiw	r24, 0x22	; 34
     b8e:	0e 94 3f 12 	call	0x247e	; 0x247e <UART_init>
	 * 1- I2C Rate  	: 400KHz
	 * 2- I2C Address	: 0x02
	 * 3- Pre-scalar	: No Pre-scalar

	 */
	TWI_ConfigType TWI_Config  = { 400000, 0x02, TWI_PRESCALAR_1};
     b92:	de 01       	movw	r26, r28
     b94:	99 96       	adiw	r26, 0x29	; 41
     b96:	b8 ab       	std	Y+48, r27	; 0x30
     b98:	af a7       	std	Y+47, r26	; 0x2f
     b9a:	ea e6       	ldi	r30, 0x6A	; 106
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	fa ab       	std	Y+50, r31	; 0x32
     ba0:	e9 ab       	std	Y+49, r30	; 0x31
     ba2:	f6 e0       	ldi	r31, 0x06	; 6
     ba4:	fb ab       	std	Y+51, r31	; 0x33
     ba6:	a9 a9       	ldd	r26, Y+49	; 0x31
     ba8:	ba a9       	ldd	r27, Y+50	; 0x32
     baa:	0c 90       	ld	r0, X
     bac:	e9 a9       	ldd	r30, Y+49	; 0x31
     bae:	fa a9       	ldd	r31, Y+50	; 0x32
     bb0:	31 96       	adiw	r30, 0x01	; 1
     bb2:	fa ab       	std	Y+50, r31	; 0x32
     bb4:	e9 ab       	std	Y+49, r30	; 0x31
     bb6:	af a5       	ldd	r26, Y+47	; 0x2f
     bb8:	b8 a9       	ldd	r27, Y+48	; 0x30
     bba:	0c 92       	st	X, r0
     bbc:	ef a5       	ldd	r30, Y+47	; 0x2f
     bbe:	f8 a9       	ldd	r31, Y+48	; 0x30
     bc0:	31 96       	adiw	r30, 0x01	; 1
     bc2:	f8 ab       	std	Y+48, r31	; 0x30
     bc4:	ef a7       	std	Y+47, r30	; 0x2f
     bc6:	fb a9       	ldd	r31, Y+51	; 0x33
     bc8:	f1 50       	subi	r31, 0x01	; 1
     bca:	fb ab       	std	Y+51, r31	; 0x33
     bcc:	8b a9       	ldd	r24, Y+51	; 0x33
     bce:	88 23       	and	r24, r24
     bd0:	51 f7       	brne	.-44     	; 0xba6 <main+0x70>
	TWI_init(&TWI_Config);
     bd2:	ce 01       	movw	r24, r28
     bd4:	89 96       	adiw	r24, 0x29	; 41
     bd6:	0e 94 4f 11 	call	0x229e	; 0x229e <TWI_init>


	/*	Waits Until the other MCU is ready to communicate */
	while(UART_receiveByte() != HMI_ECU_READY){}
     bda:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     bde:	81 31       	cpi	r24, 0x11	; 17
     be0:	e1 f7       	brne	.-8      	; 0xbda <main+0xa4>
	UART_sendByte(CONTROL_ECU_READY);
     be2:	80 e1       	ldi	r24, 0x10	; 16
     be4:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>

	uint8 status = ERROR;
     be8:	1b 82       	std	Y+3, r1	; 0x03
	uint8 key = 0;
     bea:	1a 82       	std	Y+2, r1	; 0x02
     bec:	2b c0       	rjmp	.+86     	; 0xc44 <main+0x10e>
	{
		/* Loop for Max fail trials in New Password mode */
		while(status != PASS)
		{
			/* RESET Strings if doesn't match to avoid errors*/
			for(i=0 ; i<MAX_PASSWORD ; ++i)
     bee:	19 82       	std	Y+1, r1	; 0x01
     bf0:	15 c0       	rjmp	.+42     	; 0xc1c <main+0xe6>
			{
				pass1[i] = 0;
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	ce 01       	movw	r24, r28
     bfa:	04 96       	adiw	r24, 0x04	; 4
     bfc:	fc 01       	movw	r30, r24
     bfe:	e2 0f       	add	r30, r18
     c00:	f3 1f       	adc	r31, r19
     c02:	10 82       	st	Z, r1
				entered_password[i] = 0;
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	ce 01       	movw	r24, r28
     c0c:	43 96       	adiw	r24, 0x13	; 19
     c0e:	fc 01       	movw	r30, r24
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	10 82       	st	Z, r1
	{
		/* Loop for Max fail trials in New Password mode */
		while(status != PASS)
		{
			/* RESET Strings if doesn't match to avoid errors*/
			for(i=0 ; i<MAX_PASSWORD ; ++i)
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	89 83       	std	Y+1, r24	; 0x01
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	8f 30       	cpi	r24, 0x0F	; 15
     c20:	40 f3       	brcs	.-48     	; 0xbf2 <main+0xbc>
			{
				pass1[i] = 0;
				entered_password[i] = 0;
			}

			receive_Password(pass1);				/* Saves First entry password in first array */
     c22:	ce 01       	movw	r24, r28
     c24:	04 96       	adiw	r24, 0x04	; 4
     c26:	0e 94 68 06 	call	0xcd0	; 0xcd0 <receive_Password>
			receive_Password(entered_password);				/* Saves Second entry password in second array */
     c2a:	ce 01       	movw	r24, r28
     c2c:	43 96       	adiw	r24, 0x13	; 19
     c2e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <receive_Password>
			status = Pass_Compare(pass1,entered_password);		/* Compares first and second password matching*/
     c32:	ce 01       	movw	r24, r28
     c34:	04 96       	adiw	r24, 0x04	; 4
     c36:	9e 01       	movw	r18, r28
     c38:	2d 5e       	subi	r18, 0xED	; 237
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	b9 01       	movw	r22, r18
     c3e:	0e 94 aa 06 	call	0xd54	; 0xd54 <Pass_Compare>
     c42:	8b 83       	std	Y+3, r24	; 0x03

	/****************************************	SUPER LOOP	****************************************/
	for(;;)
	{
		/* Loop for Max fail trials in New Password mode */
		while(status != PASS)
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	91 f6       	brne	.-92     	; 0xbee <main+0xb8>
			receive_Password(pass1);				/* Saves First entry password in first array */
			receive_Password(entered_password);				/* Saves Second entry password in second array */
			status = Pass_Compare(pass1,entered_password);		/* Compares first and second password matching*/
		}
		/* Saves Password if entry matches */
		save_password(pass1);
     c4a:	ce 01       	movw	r24, r28
     c4c:	04 96       	adiw	r24, 0x04	; 4
     c4e:	0e 94 e5 06 	call	0xdca	; 0xdca <save_password>

		/* Variable that holds the received mode by UART mode '+' or '-' */
		key = UART_receiveByte();
     c52:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     c56:	8a 83       	std	Y+2, r24	; 0x02
		if(key == '-')														/* Open Door */
     c58:	8a 81       	ldd	r24, Y+2	; 0x02
     c5a:	8d 32       	cpi	r24, 0x2D	; 45
     c5c:	c1 f4       	brne	.+48     	; 0xc8e <main+0x158>
     c5e:	10 c0       	rjmp	.+32     	; 0xc80 <main+0x14a>
		{
			while(g_Passwrod_Status == PASS_UNMATCH)
			{
				while (UART_receiveByte() != HMI_ECU_READY);
     c60:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     c64:	81 31       	cpi	r24, 0x11	; 17
     c66:	e1 f7       	brne	.-8      	; 0xc60 <main+0x12a>
				receive_Password(entered_password);
     c68:	ce 01       	movw	r24, r28
     c6a:	43 96       	adiw	r24, 0x13	; 19
     c6c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <receive_Password>
				check_password(entered_password, pass1);					/* Check Password */
     c70:	ce 01       	movw	r24, r28
     c72:	43 96       	adiw	r24, 0x13	; 19
     c74:	9e 01       	movw	r18, r28
     c76:	2c 5f       	subi	r18, 0xFC	; 252
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	b9 01       	movw	r22, r18
     c7c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <check_password>

		/* Variable that holds the received mode by UART mode '+' or '-' */
		key = UART_receiveByte();
		if(key == '-')														/* Open Door */
		{
			while(g_Passwrod_Status == PASS_UNMATCH)
     c80:	80 91 69 00 	lds	r24, 0x0069
     c84:	83 31       	cpi	r24, 0x13	; 19
     c86:	61 f3       	breq	.-40     	; 0xc60 <main+0x12a>
				while (UART_receiveByte() != HMI_ECU_READY);
				receive_Password(entered_password);
				check_password(entered_password, pass1);					/* Check Password */
			}
			/* Calls open door function if password match */
			openDoor();
     c88:	0e 94 ab 07 	call	0xf56	; 0xf56 <openDoor>
     c8c:	db cf       	rjmp	.-74     	; 0xc44 <main+0x10e>
		}
		else if(key == '+')
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	8b 32       	cpi	r24, 0x2B	; 43
     c92:	c1 f6       	brne	.-80     	; 0xc44 <main+0x10e>
     c94:	10 c0       	rjmp	.+32     	; 0xcb6 <main+0x180>
		{
			while(g_Passwrod_Status == PASS_UNMATCH)
			{
				while (UART_receiveByte() != HMI_ECU_READY);
     c96:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     c9a:	81 31       	cpi	r24, 0x11	; 17
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <main+0x160>
				receive_Password(entered_password);
     c9e:	ce 01       	movw	r24, r28
     ca0:	43 96       	adiw	r24, 0x13	; 19
     ca2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <receive_Password>
				check_password(entered_password, pass1);					/* Check Password */
     ca6:	ce 01       	movw	r24, r28
     ca8:	43 96       	adiw	r24, 0x13	; 19
     caa:	9e 01       	movw	r18, r28
     cac:	2c 5f       	subi	r18, 0xFC	; 252
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	b9 01       	movw	r22, r18
     cb2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <check_password>
			/* Calls open door function if password match */
			openDoor();
		}
		else if(key == '+')
		{
			while(g_Passwrod_Status == PASS_UNMATCH)
     cb6:	80 91 69 00 	lds	r24, 0x0069
     cba:	83 31       	cpi	r24, 0x13	; 19
     cbc:	61 f3       	breq	.-40     	; 0xc96 <main+0x160>
				while (UART_receiveByte() != HMI_ECU_READY);
				receive_Password(entered_password);
				check_password(entered_password, pass1);					/* Check Password */
			}
			/* Calls change password function if password match */
			changePassword(entered_password, pass1);
     cbe:	ce 01       	movw	r24, r28
     cc0:	43 96       	adiw	r24, 0x13	; 19
     cc2:	9e 01       	movw	r18, r28
     cc4:	2c 5f       	subi	r18, 0xFC	; 252
     cc6:	3f 4f       	sbci	r19, 0xFF	; 255
     cc8:	b9 01       	movw	r22, r18
     cca:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <changePassword>
     cce:	ba cf       	rjmp	.-140    	; 0xc44 <main+0x10e>

00000cd0 <receive_Password>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Function that receives password form HMI with UART and stores it in array
 *------------------------------------------------------------------------------------------------------*/
void receive_Password(uint8 *password)
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <receive_Password+0xa>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <receive_Password+0xc>
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	9c 83       	std	Y+4, r25	; 0x04
     ce2:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0, flag_pass=0;
     ce4:	1a 82       	std	Y+2, r1	; 0x02
     ce6:	19 82       	std	Y+1, r1	; 0x01
     ce8:	29 c0       	rjmp	.+82     	; 0xd3c <receive_Password+0x6c>

	/* Keeps storing password in array passed until key sent is enter (=) */
	while(flag_pass == 0)
	{
		password[i] = UART_receiveByte();
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	8c 01       	movw	r16, r24
     cf6:	02 0f       	add	r16, r18
     cf8:	13 1f       	adc	r17, r19
     cfa:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     cfe:	f8 01       	movw	r30, r16
     d00:	80 83       	st	Z, r24
		if(password[i] == '=')
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	fc 01       	movw	r30, r24
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	80 81       	ld	r24, Z
     d14:	8d 33       	cpi	r24, 0x3D	; 61
     d16:	79 f4       	brne	.+30     	; 0xd36 <receive_Password+0x66>
		{
			flag_pass = 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	89 83       	std	Y+1, r24	; 0x01
			password[i] = '\0';
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	fc 01       	movw	r30, r24
     d28:	e2 0f       	add	r30, r18
     d2a:	f3 1f       	adc	r31, r19
     d2c:	10 82       	st	Z, r1
			++i;
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	8a 83       	std	Y+2, r24	; 0x02
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <receive_Password+0x72>
			break;
		}
		++i;
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	8a 83       	std	Y+2, r24	; 0x02
void receive_Password(uint8 *password)
{
	uint8 i = 0, flag_pass=0;

	/* Keeps storing password in array passed until key sent is enter (=) */
	while(flag_pass == 0)
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	88 23       	and	r24, r24
     d40:	a1 f2       	breq	.-88     	; 0xcea <receive_Password+0x1a>
			++i;
			break;
		}
		++i;
	}
}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <Pass_Compare>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Function that compares first and second password arrays of first entry system if
 * 					matching return indication that they match and vice versa if doesn't match
 *------------------------------------------------------------------------------------------------------*/
uint8 Pass_Compare(uint8 *pass1, uint8 *entered_password)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <Pass_Compare+0x6>
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <Pass_Compare+0x8>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <Pass_Compare+0xa>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	9b 83       	std	Y+3, r25	; 0x03
     d64:	8a 83       	std	Y+2, r24	; 0x02
     d66:	7d 83       	std	Y+5, r23	; 0x05
     d68:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;

	for(i=0 ; i < MAX_PASSWORD ; ++i)
     d6a:	19 82       	std	Y+1, r1	; 0x01
     d6c:	1c c0       	rjmp	.+56     	; 0xda6 <Pass_Compare+0x52>
	{
		if(pass1[i] != entered_password[i])
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	fc 01       	movw	r30, r24
     d7a:	e2 0f       	add	r30, r18
     d7c:	f3 1f       	adc	r31, r19
     d7e:	40 81       	ld	r20, Z
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	9d 81       	ldd	r25, Y+5	; 0x05
     d8a:	fc 01       	movw	r30, r24
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	80 81       	ld	r24, Z
     d92:	48 17       	cp	r20, r24
     d94:	29 f0       	breq	.+10     	; 0xda0 <Pass_Compare+0x4c>
		{
			UART_sendByte(PASS_UNMATCH);		/* Tells HMI ECU that passwords doesn't match */
     d96:	83 e1       	ldi	r24, 0x13	; 19
     d98:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
			return ERROR;
     d9c:	1e 82       	std	Y+6, r1	; 0x06
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <Pass_Compare+0x62>
 *------------------------------------------------------------------------------------------------------*/
uint8 Pass_Compare(uint8 *pass1, uint8 *entered_password)
{
	uint8 i;

	for(i=0 ; i < MAX_PASSWORD ; ++i)
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	8f 30       	cpi	r24, 0x0F	; 15
     daa:	08 f3       	brcs	.-62     	; 0xd6e <Pass_Compare+0x1a>
		{
			UART_sendByte(PASS_UNMATCH);		/* Tells HMI ECU that passwords doesn't match */
			return ERROR;
		}
	}
	UART_sendByte(PASS_MATCH);					/* Tells HMI ECU that passwords match */
     dac:	82 e1       	ldi	r24, 0x12	; 18
     dae:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
	return PASS;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	8e 83       	std	Y+6, r24	; 0x06
     db6:	8e 81       	ldd	r24, Y+6	; 0x06
}
     db8:	26 96       	adiw	r28, 0x06	; 6
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <save_password>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Function that saves the password in EEPROM that uses I2C communication protocol
 *------------------------------------------------------------------------------------------------------*/
void save_password(uint8 *password)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <save_password+0x6>
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	9b 83       	std	Y+3, r25	; 0x03
     dd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	16 c0       	rjmp	.+44     	; 0xe0a <save_password+0x40>
	/* Saves password characters until null*/
	while(password[i] != '\0')
	{
		/* Saves Password in the following address and increment address*/
		EEPROM_writeByte((0xF000+i), password[i]);
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	ac 01       	movw	r20, r24
     de6:	40 50       	subi	r20, 0x00	; 0
     de8:	50 41       	sbci	r21, 0x10	; 16
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	9b 81       	ldd	r25, Y+3	; 0x03
     df4:	fc 01       	movw	r30, r24
     df6:	e2 0f       	add	r30, r18
     df8:	f3 1f       	adc	r31, r19
     dfa:	20 81       	ld	r18, Z
     dfc:	ca 01       	movw	r24, r20
     dfe:	62 2f       	mov	r22, r18
     e00:	0e 94 c1 08 	call	0x1182	; 0x1182 <EEPROM_writeByte>
		++i;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
 *------------------------------------------------------------------------------------------------------*/
void save_password(uint8 *password)
{
	uint8 i = 0;
	/* Saves password characters until null*/
	while(password[i] != '\0')
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	fc 01       	movw	r30, r24
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	80 81       	ld	r24, Z
     e1c:	88 23       	and	r24, r24
     e1e:	f9 f6       	brne	.-66     	; 0xdde <save_password+0x14>
		/* Saves Password in the following address and increment address*/
		EEPROM_writeByte((0xF000+i), password[i]);
		++i;
	}
	/*	Saves null as an indication for password end */
	EEPROM_writeByte((0xF000+i), '\0');
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	80 50       	subi	r24, 0x00	; 0
     e28:	90 41       	sbci	r25, 0x10	; 16
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	0e 94 c1 08 	call	0x1182	; 0x1182 <EEPROM_writeByte>
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <check_password>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Function that checks if the entered password is correct with the password saved
 * 					in the EEPROM by reading password stored in EEPROM and comparing to received one
 *------------------------------------------------------------------------------------------------------*/
void check_password(uint8 *entered_password, uint8 *Saved_Password)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <check_password+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <check_password+0x8>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <check_password+0xa>
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	9c 83       	std	Y+4, r25	; 0x04
     e4c:	8b 83       	std	Y+3, r24	; 0x03
     e4e:	7e 83       	std	Y+6, r23	; 0x06
     e50:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i = 0;
     e52:	1a 82       	std	Y+2, r1	; 0x02
	uint8 status = 0;		/* status that indicates if password comparison is matching[0] or not[1] */
     e54:	19 82       	std	Y+1, r1	; 0x01
     e56:	2c c0       	rjmp	.+88     	; 0xeb0 <check_password+0x74>
	while(Saved_Password[i] != '\0')
	{
		EEPROM_readByte((0x100+i), &Saved_Password[i]);
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	80 50       	subi	r24, 0x00	; 0
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	ac 01       	movw	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	8d 81       	ldd	r24, Y+5	; 0x05
     e6c:	9e 81       	ldd	r25, Y+6	; 0x06
     e6e:	28 0f       	add	r18, r24
     e70:	39 1f       	adc	r19, r25
     e72:	ca 01       	movw	r24, r20
     e74:	b9 01       	movw	r22, r18
     e76:	0e 94 02 09 	call	0x1204	; 0x1204 <EEPROM_readByte>
		if(Saved_Password[i] != entered_password[i])
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	fc 01       	movw	r30, r24
     e86:	e2 0f       	add	r30, r18
     e88:	f3 1f       	adc	r31, r19
     e8a:	40 81       	ld	r20, Z
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	fc 01       	movw	r30, r24
     e98:	e2 0f       	add	r30, r18
     e9a:	f3 1f       	adc	r31, r19
     e9c:	80 81       	ld	r24, Z
     e9e:	48 17       	cp	r20, r24
     ea0:	19 f0       	breq	.+6      	; 0xea8 <check_password+0x6c>
		{
			status = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <check_password+0x8a>
			break;											/* If un-match in numbers don't loop to the end */
		}
		else
		{
			status = 0;
     ea8:	19 82       	std	Y+1, r1	; 0x01
		}
		++i;
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	8a 83       	std	Y+2, r24	; 0x02
 *------------------------------------------------------------------------------------------------------*/
void check_password(uint8 *entered_password, uint8 *Saved_Password)
{
	uint8 i = 0;
	uint8 status = 0;		/* status that indicates if password comparison is matching[0] or not[1] */
	while(Saved_Password[i] != '\0')
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	fc 01       	movw	r30, r24
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	80 81       	ld	r24, Z
     ec2:	88 23       	and	r24, r24
     ec4:	49 f6       	brne	.-110    	; 0xe58 <check_password+0x1c>
		++i;
	}
	/* Check that entered password matches with saved password till the end for example
	 * Saved Pass = 245, entered password 2457 ( Will Match without the next code ).
	 */
	if(Saved_Password[i] != entered_password[i])
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	fc 01       	movw	r30, r24
     ed2:	e2 0f       	add	r30, r18
     ed4:	f3 1f       	adc	r31, r19
     ed6:	40 81       	ld	r20, Z
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	fc 01       	movw	r30, r24
     ee4:	e2 0f       	add	r30, r18
     ee6:	f3 1f       	adc	r31, r19
     ee8:	80 81       	ld	r24, Z
     eea:	48 17       	cp	r20, r24
     eec:	19 f0       	breq	.+6      	; 0xef4 <check_password+0xb8>
			{
				status = 1;		/* Password end doesn't match */
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <check_password+0xba>
			}
			else
			{
				status = 0;		/* Password end match */
     ef4:	19 82       	std	Y+1, r1	; 0x01
			}


	/* Password end match */
	if(status == 0)
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	88 23       	and	r24, r24
     efa:	39 f4       	brne	.+14     	; 0xf0a <check_password+0xce>
	{
		UART_sendByte(PASS_MATCH);			/* Send to HMI control Match */
     efc:	82 e1       	ldi	r24, 0x12	; 18
     efe:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
		g_Passwrod_Status = PASS_MATCH;		/* Saves status in global variable to stop matching password again */
     f02:	82 e1       	ldi	r24, 0x12	; 18
     f04:	80 93 69 00 	sts	0x0069, r24
     f08:	1d c0       	rjmp	.+58     	; 0xf44 <check_password+0x108>

	}
	else
	{
		UART_sendByte(PASS_UNMATCH);
     f0a:	83 e1       	ldi	r24, 0x13	; 19
     f0c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
		g_Passwrod_Status = PASS_UNMATCH;
     f10:	83 e1       	ldi	r24, 0x13	; 19
     f12:	80 93 69 00 	sts	0x0069, r24
		--g_fail_count;										/* decrement fail trials if password didn't match */
     f16:	80 91 68 00 	lds	r24, 0x0068
     f1a:	81 50       	subi	r24, 0x01	; 1
     f1c:	80 93 68 00 	sts	0x0068, r24
		if(g_fail_count == 0)
     f20:	80 91 68 00 	lds	r24, 0x0068
     f24:	88 23       	and	r24, r24
     f26:	71 f4       	brne	.+28     	; 0xf44 <check_password+0x108>
		{
			buzzerOn();										/* Activates buzzer */
     f28:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <buzzerOn>
			while(UART_receiveByte() != TIME_60_SEC);		/* Waits 60 seconds */
     f2c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     f30:	89 31       	cpi	r24, 0x19	; 25
     f32:	e1 f7       	brne	.-8      	; 0xf2c <check_password+0xf0>
			buzzerOff();									/* De-activates buzzer */
     f34:	0e 94 67 08 	call	0x10ce	; 0x10ce <buzzerOff>
			UART_sendByte(CONTROL_ECU_READY);
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
			g_fail_count = MAX_FAIL_TRIALS;					/* reset max fail trials */
     f3e:	83 e0       	ldi	r24, 0x03	; 3
     f40:	80 93 68 00 	sts	0x0068, r24
		}
	}
}
     f44:	26 96       	adiw	r28, 0x06	; 6
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <openDoor>:
 * [Description]:	Function that opens door with motor by rotating motor in clock-wise direction for
 * 					15 seconds, stops it for 3 seconds, then closes door by rotating anti-clock-wise
 * 					for another 15 seconds and finally stops the motor.
 *------------------------------------------------------------------------------------------------------*/
void openDoor()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(CW);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	0e 94 8e 08 	call	0x111c	; 0x111c <DcMotor_Rotate>
	UART_sendByte(START_TIME_15_SEC);
     f64:	86 e1       	ldi	r24, 0x16	; 22
     f66:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
	while(UART_receiveByte() != TIME_15_SEC);
     f6a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     f6e:	85 31       	cpi	r24, 0x15	; 21
     f70:	e1 f7       	brne	.-8      	; 0xf6a <openDoor+0x14>
	UART_sendByte(CONTROL_ECU_READY);
     f72:	80 e1       	ldi	r24, 0x10	; 16
     f74:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
	DcMotor_Rotate(STOP);
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	0e 94 8e 08 	call	0x111c	; 0x111c <DcMotor_Rotate>
	while(UART_receiveByte() != TIME_3_SEC);
     f7e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     f82:	88 31       	cpi	r24, 0x18	; 24
     f84:	e1 f7       	brne	.-8      	; 0xf7e <openDoor+0x28>
	UART_sendByte(CONTROL_ECU_READY);
     f86:	80 e1       	ldi	r24, 0x10	; 16
     f88:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
	DcMotor_Rotate(ACW);
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	0e 94 8e 08 	call	0x111c	; 0x111c <DcMotor_Rotate>
	while(UART_receiveByte() != TIME_15_SEC);
     f92:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     f96:	85 31       	cpi	r24, 0x15	; 21
     f98:	e1 f7       	brne	.-8      	; 0xf92 <openDoor+0x3c>
	UART_sendByte(CONTROL_ECU_READY);
     f9a:	80 e1       	ldi	r24, 0x10	; 16
     f9c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
	DcMotor_Rotate(STOP);
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	0e 94 8e 08 	call	0x111c	; 0x111c <DcMotor_Rotate>
	g_Passwrod_Status = PASS_UNMATCH;
     fa6:	83 e1       	ldi	r24, 0x13	; 19
     fa8:	80 93 69 00 	sts	0x0069, r24
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <changePassword>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Function that saves the new password in array Pass1 as the new password is received
 * 					with UART from HMI ECU
 *------------------------------------------------------------------------------------------------------*/
void changePassword(uint8 *newPassword, uint8 *pass1)
{
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <changePassword+0xa>
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <changePassword+0xc>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <changePassword+0xe>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	8b 83       	std	Y+3, r24	; 0x03
     fc8:	7e 83       	std	Y+6, r23	; 0x06
     fca:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i = 0, flag_pass=0;
     fcc:	1a 82       	std	Y+2, r1	; 0x02
     fce:	19 82       	std	Y+1, r1	; 0x01
     fd0:	50 c0       	rjmp	.+160    	; 0x1072 <changePassword+0xc0>
	while(flag_pass == 0)
	{
		newPassword[i] = UART_receiveByte();
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	8c 01       	movw	r16, r24
     fde:	02 0f       	add	r16, r18
     fe0:	13 1f       	adc	r17, r19
     fe2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
     fe6:	f8 01       	movw	r30, r16
     fe8:	80 83       	st	Z, r24
		if(newPassword[i]>=0 && newPassword[i] <= 9)
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	9c 81       	ldd	r25, Y+4	; 0x04
     ff4:	fc 01       	movw	r30, r24
     ff6:	e2 0f       	add	r30, r18
     ff8:	f3 1f       	adc	r31, r19
     ffa:	80 81       	ld	r24, Z
     ffc:	8a 30       	cpi	r24, 0x0A	; 10
     ffe:	b0 f4       	brcc	.+44     	; 0x102c <changePassword+0x7a>
		{
			pass1[i-1] = newPassword[i];
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9c 01       	movw	r18, r24
    1008:	21 50       	subi	r18, 0x01	; 1
    100a:	30 40       	sbci	r19, 0x00	; 0
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	dc 01       	movw	r26, r24
    1012:	a2 0f       	add	r26, r18
    1014:	b3 1f       	adc	r27, r19
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	fc 01       	movw	r30, r24
    1022:	e2 0f       	add	r30, r18
    1024:	f3 1f       	adc	r31, r19
    1026:	80 81       	ld	r24, Z
    1028:	8c 93       	st	X, r24
    102a:	20 c0       	rjmp	.+64     	; 0x106c <changePassword+0xba>
		}
		else if(newPassword[i] == '=' && i>0)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	fc 01       	movw	r30, r24
    1038:	e2 0f       	add	r30, r18
    103a:	f3 1f       	adc	r31, r19
    103c:	80 81       	ld	r24, Z
    103e:	8d 33       	cpi	r24, 0x3D	; 61
    1040:	a9 f4       	brne	.+42     	; 0x106c <changePassword+0xba>
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	88 23       	and	r24, r24
    1046:	91 f0       	breq	.+36     	; 0x106c <changePassword+0xba>
		{
			flag_pass = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01
			pass1[i-1] = '\0';
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9c 01       	movw	r18, r24
    1054:	21 50       	subi	r18, 0x01	; 1
    1056:	30 40       	sbci	r19, 0x00	; 0
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	fc 01       	movw	r30, r24
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	10 82       	st	Z, r1
			++i;
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	07 c0       	rjmp	.+14     	; 0x107a <changePassword+0xc8>
			break;
		}
		++i;
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	8a 83       	std	Y+2, r24	; 0x02
 * 					with UART from HMI ECU
 *------------------------------------------------------------------------------------------------------*/
void changePassword(uint8 *newPassword, uint8 *pass1)
{
	uint8 i = 0, flag_pass=0;
	while(flag_pass == 0)
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	88 23       	and	r24, r24
    1076:	09 f4       	brne	.+2      	; 0x107a <changePassword+0xc8>
    1078:	ac cf       	rjmp	.-168    	; 0xfd2 <changePassword+0x20>
			++i;
			break;
		}
		++i;
	}
	save_password(pass1);
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	0e 94 e5 06 	call	0xdca	; 0xdca <save_password>
	g_Passwrod_Status = PASS_UNMATCH;
    1082:	83 e1       	ldi	r24, 0x13	; 19
    1084:	80 93 69 00 	sts	0x0069, r24
}
    1088:	26 96       	adiw	r28, 0x06	; 6
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <Buzzer_init>:
/*
 * Description :
 * Initialize the Buzzer port direction and pin
 */
void Buzzer_init(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	63 e0       	ldi	r22, 0x03	; 3
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPinDirection>
}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <buzzerOn>:
/*
 * Description :
 * Function that switches buzzer off
 */
void buzzerOn(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	63 e0       	ldi	r22, 0x03	; 3
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <buzzerOff>:
/*
 * Description :
 * Function that switches buzzer off
 */
void buzzerOff(void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	63 e0       	ldi	r22, 0x03	; 3
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
}
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <DcMotor_Init>:
 * Initialize the DC Motor:
 * 1. Setup the DC Motor pins directions by using the GPIO driver.
 * 2. Initialize the DC Motor to STOP.
 */
void DcMotor_Init(void)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, PIN_OUTPUT);
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	66 e0       	ldi	r22, 0x06	; 6
    10f2:	41 e0       	ldi	r20, 0x01	; 1
    10f4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, PIN_OUTPUT);
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	67 e0       	ldi	r22, 0x07	; 7
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPinDirection>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	66 e0       	ldi	r22, 0x06	; 6
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    110c:	83 e0       	ldi	r24, 0x03	; 3
    110e:	67 e0       	ldi	r22, 0x07	; 7
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <DcMotor_Rotate>:
 * 1. Set the Motor State ( STOP --> PIN1=0 & PIN2=0  ,  CW --> PIN1=0 & PIN2=1 ,  ACW --> PIN1=1 & PIN2=0 )
 * 2. Set the Motor Speed by passing duty cycle to the PWM function.
 * Input: State ( CW or ACW or STOP ) , Speed = duty cycle
 */
void DcMotor_Rotate(DcMotor_State state)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
	if (state == STOP)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	59 f4       	brne	.+22     	; 0x1144 <DcMotor_Rotate+0x28>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	66 e0       	ldi	r22, 0x06	; 6
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	67 e0       	ldi	r22, 0x07	; 7
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    1142:	1b c0       	rjmp	.+54     	; 0x117a <DcMotor_Rotate+0x5e>
	}
	else if (state == ACW)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	59 f4       	brne	.+22     	; 0x1160 <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	66 e0       	ldi	r22, 0x06	; 6
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_HIGH);
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	67 e0       	ldi	r22, 0x07	; 7
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    115e:	0d c0       	rjmp	.+26     	; 0x117a <DcMotor_Rotate+0x5e>

	}
	else if (state == CW)
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	88 23       	and	r24, r24
    1164:	51 f4       	brne	.+20     	; 0x117a <DcMotor_Rotate+0x5e>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_HIGH);
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	66 e0       	ldi	r22, 0x06	; 6
    116a:	41 e0       	ldi	r20, 0x01	; 1
    116c:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	67 e0       	ldi	r22, 0x07	; 7
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
	}

}
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <EEPROM_writeByte>:
/*
 * Description :
 * Function to write a byte on EEPROM from Address xx.
 */
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <EEPROM_writeByte+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <EEPROM_writeByte+0x8>
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1194:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    1198:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    119c:	88 30       	cpi	r24, 0x08	; 8
    119e:	11 f0       	breq	.+4      	; 0x11a4 <EEPROM_writeByte+0x22>
		return ERROR;
    11a0:	1c 82       	std	Y+4, r1	; 0x04
    11a2:	28 c0       	rjmp	.+80     	; 0x11f4 <EEPROM_writeByte+0x72>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	80 70       	andi	r24, 0x00	; 0
    11aa:	97 70       	andi	r25, 0x07	; 7
    11ac:	88 0f       	add	r24, r24
    11ae:	89 2f       	mov	r24, r25
    11b0:	88 1f       	adc	r24, r24
    11b2:	99 0b       	sbc	r25, r25
    11b4:	91 95       	neg	r25
    11b6:	80 6a       	ori	r24, 0xA0	; 160
    11b8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11bc:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    11c0:	88 31       	cpi	r24, 0x18	; 24
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <EEPROM_writeByte+0x46>
        return ERROR;
    11c4:	1c 82       	std	Y+4, r1	; 0x04
    11c6:	16 c0       	rjmp	.+44     	; 0x11f4 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11ce:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    11d2:	88 32       	cpi	r24, 0x28	; 40
    11d4:	11 f0       	breq	.+4      	; 0x11da <EEPROM_writeByte+0x58>
        return ERROR;
    11d6:	1c 82       	std	Y+4, r1	; 0x04
    11d8:	0d c0       	rjmp	.+26     	; 0x11f4 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11e0:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    11e4:	88 32       	cpi	r24, 0x28	; 40
    11e6:	11 f0       	breq	.+4      	; 0x11ec <EEPROM_writeByte+0x6a>
        return ERROR;
    11e8:	1c 82       	std	Y+4, r1	; 0x04
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    11ec:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <TWI_stop>

    return SUCCESS;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	8c 83       	std	Y+4, r24	; 0x04
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <EEPROM_readByte>:
/*
 * Description :
 * Function to read a byte from EEPROM from Address xx.
 */
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <EEPROM_readByte+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <EEPROM_readByte+0x8>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	7c 83       	std	Y+4, r23	; 0x04
    1218:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    121a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <TWI_start>
	if(TWI_getStatus() != TWI_START)
    121e:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    1222:	88 30       	cpi	r24, 0x08	; 8
    1224:	11 f0       	breq	.+4      	; 0x122a <EEPROM_readByte+0x26>
		return ERROR;
    1226:	1d 82       	std	Y+5, r1	; 0x05
    1228:	44 c0       	rjmp	.+136    	; 0x12b2 <EEPROM_readByte+0xae>
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	80 70       	andi	r24, 0x00	; 0
    1230:	97 70       	andi	r25, 0x07	; 7
    1232:	88 0f       	add	r24, r24
    1234:	89 2f       	mov	r24, r25
    1236:	88 1f       	adc	r24, r24
    1238:	99 0b       	sbc	r25, r25
    123a:	91 95       	neg	r25
    123c:	80 6a       	ori	r24, 0xA0	; 160
    123e:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1242:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    1246:	88 31       	cpi	r24, 0x18	; 24
    1248:	11 f0       	breq	.+4      	; 0x124e <EEPROM_readByte+0x4a>
        return ERROR;
    124a:	1d 82       	std	Y+5, r1	; 0x05
    124c:	32 c0       	rjmp	.+100    	; 0x12b2 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1254:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    1258:	88 32       	cpi	r24, 0x28	; 40
    125a:	11 f0       	breq	.+4      	; 0x1260 <EEPROM_readByte+0x5c>
        return ERROR;
    125c:	1d 82       	std	Y+5, r1	; 0x05
    125e:	29 c0       	rjmp	.+82     	; 0x12b2 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1260:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1264:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    1268:	80 31       	cpi	r24, 0x10	; 16
    126a:	11 f0       	breq	.+4      	; 0x1270 <EEPROM_readByte+0x6c>
        return ERROR;
    126c:	1d 82       	std	Y+5, r1	; 0x05
    126e:	21 c0       	rjmp	.+66     	; 0x12b2 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	80 70       	andi	r24, 0x00	; 0
    1276:	97 70       	andi	r25, 0x07	; 7
    1278:	88 0f       	add	r24, r24
    127a:	89 2f       	mov	r24, r25
    127c:	88 1f       	adc	r24, r24
    127e:	99 0b       	sbc	r25, r25
    1280:	91 95       	neg	r25
    1282:	81 6a       	ori	r24, 0xA1	; 161
    1284:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1288:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    128c:	80 34       	cpi	r24, 0x40	; 64
    128e:	11 f0       	breq	.+4      	; 0x1294 <EEPROM_readByte+0x90>
        return ERROR;
    1290:	1d 82       	std	Y+5, r1	; 0x05
    1292:	0f c0       	rjmp	.+30     	; 0x12b2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1294:	0e 94 1d 12 	call	0x243a	; 0x243a <TWI_readByteWithNACK>
    1298:	eb 81       	ldd	r30, Y+3	; 0x03
    129a:	fc 81       	ldd	r31, Y+4	; 0x04
    129c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    129e:	0e 94 30 12 	call	0x2460	; 0x2460 <TWI_getStatus>
    12a2:	88 35       	cpi	r24, 0x58	; 88
    12a4:	11 f0       	breq	.+4      	; 0x12aa <EEPROM_readByte+0xa6>
        return ERROR;
    12a6:	1d 82       	std	Y+5, r1	; 0x05
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    12aa:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <TWI_stop>

    return SUCCESS;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <GPIO_setupPinDirection+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <GPIO_setupPinDirection+0x8>
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
    12d6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	88 30       	cpi	r24, 0x08	; 8
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <GPIO_setupPinDirection+0x1c>
    12de:	d5 c0       	rjmp	.+426    	; 0x148a <GPIO_setupPinDirection+0x1c6>
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <GPIO_setupPinDirection+0x24>
    12e6:	d1 c0       	rjmp	.+418    	; 0x148a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	3d 83       	std	Y+5, r19	; 0x05
    12f0:	2c 83       	std	Y+4, r18	; 0x04
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	9d 81       	ldd	r25, Y+5	; 0x05
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	91 05       	cpc	r25, r1
    12fa:	09 f4       	brne	.+2      	; 0x12fe <GPIO_setupPinDirection+0x3a>
    12fc:	43 c0       	rjmp	.+134    	; 0x1384 <GPIO_setupPinDirection+0xc0>
    12fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1300:	3d 81       	ldd	r19, Y+5	; 0x05
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <GPIO_setupPinDirection+0x4e>
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	71 f0       	breq	.+28     	; 0x132c <GPIO_setupPinDirection+0x68>
    1310:	bc c0       	rjmp	.+376    	; 0x148a <GPIO_setupPinDirection+0x1c6>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <GPIO_setupPinDirection+0x5a>
    131c:	5f c0       	rjmp	.+190    	; 0x13dc <GPIO_setupPinDirection+0x118>
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <GPIO_setupPinDirection+0x66>
    1328:	85 c0       	rjmp	.+266    	; 0x1434 <GPIO_setupPinDirection+0x170>
    132a:	af c0       	rjmp	.+350    	; 0x148a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	a1 f4       	brne	.+40     	; 0x135a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1332:	aa e3       	ldi	r26, 0x3A	; 58
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	ea e3       	ldi	r30, 0x3A	; 58
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <GPIO_setupPinDirection+0x8c>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <GPIO_setupPinDirection+0x88>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	98 c0       	rjmp	.+304    	; 0x148a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    135a:	aa e3       	ldi	r26, 0x3A	; 58
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	ea e3       	ldi	r30, 0x3A	; 58
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <GPIO_setupPinDirection+0xb4>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <GPIO_setupPinDirection+0xb0>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	83 c0       	rjmp	.+262    	; 0x148a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	a1 f4       	brne	.+40     	; 0x13b2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    138a:	a7 e3       	ldi	r26, 0x37	; 55
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e7 e3       	ldi	r30, 0x37	; 55
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GPIO_setupPinDirection+0xe4>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <GPIO_setupPinDirection+0xe0>
    13ac:	84 2b       	or	r24, r20
    13ae:	8c 93       	st	X, r24
    13b0:	6c c0       	rjmp	.+216    	; 0x148a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13b2:	a7 e3       	ldi	r26, 0x37	; 55
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e7 e3       	ldi	r30, 0x37	; 55
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <GPIO_setupPinDirection+0x10c>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <GPIO_setupPinDirection+0x108>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	57 c0       	rjmp	.+174    	; 0x148a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	a1 f4       	brne	.+40     	; 0x140a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13e2:	a4 e3       	ldi	r26, 0x34	; 52
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e4 e3       	ldi	r30, 0x34	; 52
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_setupPinDirection+0x13c>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <GPIO_setupPinDirection+0x138>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	40 c0       	rjmp	.+128    	; 0x148a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    140a:	a4 e3       	ldi	r26, 0x34	; 52
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e4 e3       	ldi	r30, 0x34	; 52
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	48 2f       	mov	r20, r24
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 2e       	mov	r0, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <GPIO_setupPinDirection+0x164>
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	0a 94       	dec	r0
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <GPIO_setupPinDirection+0x160>
    142c:	80 95       	com	r24
    142e:	84 23       	and	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	2b c0       	rjmp	.+86     	; 0x148a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	a1 f4       	brne	.+40     	; 0x1462 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    143a:	a1 e3       	ldi	r26, 0x31	; 49
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e1 e3       	ldi	r30, 0x31	; 49
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <GPIO_setupPinDirection+0x194>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <GPIO_setupPinDirection+0x190>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	14 c0       	rjmp	.+40     	; 0x148a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1462:	a1 e3       	ldi	r26, 0x31	; 49
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e1 e3       	ldi	r30, 0x31	; 49
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_setupPinDirection+0x1bc>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_setupPinDirection+0x1b8>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <GPIO_writePin+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <GPIO_writePin+0x8>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	6a 83       	std	Y+2, r22	; 0x02
    14ac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	88 30       	cpi	r24, 0x08	; 8
    14b2:	08 f0       	brcs	.+2      	; 0x14b6 <GPIO_writePin+0x1c>
    14b4:	d5 c0       	rjmp	.+426    	; 0x1660 <GPIO_writePin+0x1c6>
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	08 f0       	brcs	.+2      	; 0x14be <GPIO_writePin+0x24>
    14bc:	d1 c0       	rjmp	.+418    	; 0x1660 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		 /* Write the pin value as required */
		switch (port_num)
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3d 83       	std	Y+5, r19	; 0x05
    14c6:	2c 83       	std	Y+4, r18	; 0x04
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <GPIO_writePin+0x3a>
    14d2:	43 c0       	rjmp	.+134    	; 0x155a <GPIO_writePin+0xc0>
    14d4:	2c 81       	ldd	r18, Y+4	; 0x04
    14d6:	3d 81       	ldd	r19, Y+5	; 0x05
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <GPIO_writePin+0x4e>
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	71 f0       	breq	.+28     	; 0x1502 <GPIO_writePin+0x68>
    14e6:	bc c0       	rjmp	.+376    	; 0x1660 <GPIO_writePin+0x1c6>
    14e8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ea:	3d 81       	ldd	r19, Y+5	; 0x05
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <GPIO_writePin+0x5a>
    14f2:	5f c0       	rjmp	.+190    	; 0x15b2 <GPIO_writePin+0x118>
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <GPIO_writePin+0x66>
    14fe:	85 c0       	rjmp	.+266    	; 0x160a <GPIO_writePin+0x170>
    1500:	af c0       	rjmp	.+350    	; 0x1660 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	a1 f4       	brne	.+40     	; 0x1530 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1508:	ab e3       	ldi	r26, 0x3B	; 59
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	eb e3       	ldi	r30, 0x3B	; 59
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <GPIO_writePin+0x8c>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <GPIO_writePin+0x88>
    152a:	84 2b       	or	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	98 c0       	rjmp	.+304    	; 0x1660 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1530:	ab e3       	ldi	r26, 0x3B	; 59
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	eb e3       	ldi	r30, 0x3B	; 59
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <GPIO_writePin+0xb4>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <GPIO_writePin+0xb0>
    1552:	80 95       	com	r24
    1554:	84 23       	and	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	83 c0       	rjmp	.+262    	; 0x1660 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	a1 f4       	brne	.+40     	; 0x1588 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1560:	a8 e3       	ldi	r26, 0x38	; 56
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e8 e3       	ldi	r30, 0x38	; 56
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	48 2f       	mov	r20, r24
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 2e       	mov	r0, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <GPIO_writePin+0xe4>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	0a 94       	dec	r0
    1580:	e2 f7       	brpl	.-8      	; 0x157a <GPIO_writePin+0xe0>
    1582:	84 2b       	or	r24, r20
    1584:	8c 93       	st	X, r24
    1586:	6c c0       	rjmp	.+216    	; 0x1660 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1588:	a8 e3       	ldi	r26, 0x38	; 56
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e8 e3       	ldi	r30, 0x38	; 56
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	02 2e       	mov	r0, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <GPIO_writePin+0x10c>
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	0a 94       	dec	r0
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <GPIO_writePin+0x108>
    15aa:	80 95       	com	r24
    15ac:	84 23       	and	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	57 c0       	rjmp	.+174    	; 0x1660 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	a1 f4       	brne	.+40     	; 0x15e0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15b8:	a5 e3       	ldi	r26, 0x35	; 53
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e5 e3       	ldi	r30, 0x35	; 53
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <GPIO_writePin+0x13c>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <GPIO_writePin+0x138>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	40 c0       	rjmp	.+128    	; 0x1660 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15e0:	a5 e3       	ldi	r26, 0x35	; 53
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e5 e3       	ldi	r30, 0x35	; 53
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <GPIO_writePin+0x164>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <GPIO_writePin+0x160>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	2b c0       	rjmp	.+86     	; 0x1660 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	a1 f4       	brne	.+40     	; 0x1638 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1610:	a2 e3       	ldi	r26, 0x32	; 50
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_writePin+0x194>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_writePin+0x190>
    1632:	84 2b       	or	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1638:	a2 e3       	ldi	r26, 0x32	; 50
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e2 e3       	ldi	r30, 0x32	; 50
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <GPIO_writePin+0x1bc>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <GPIO_writePin+0x1b8>
    165a:	80 95       	com	r24
    165c:	84 23       	and	r24, r20
    165e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <GPIO_readPin>:
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <GPIO_readPin+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <GPIO_readPin+0x8>
    1678:	0f 92       	push	r0
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8 pin_value = LOGIC_LOW;
    1682:	19 82       	std	Y+1, r1	; 0x01

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	88 30       	cpi	r24, 0x08	; 8
    1688:	08 f0       	brcs	.+2      	; 0x168c <GPIO_readPin+0x1c>
    168a:	84 c0       	rjmp	.+264    	; 0x1794 <GPIO_readPin+0x124>
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	84 30       	cpi	r24, 0x04	; 4
    1690:	08 f0       	brcs	.+2      	; 0x1694 <GPIO_readPin+0x24>
    1692:	80 c0       	rjmp	.+256    	; 0x1794 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3d 83       	std	Y+5, r19	; 0x05
    169c:	2c 83       	std	Y+4, r18	; 0x04
    169e:	4c 81       	ldd	r20, Y+4	; 0x04
    16a0:	5d 81       	ldd	r21, Y+5	; 0x05
    16a2:	41 30       	cpi	r20, 0x01	; 1
    16a4:	51 05       	cpc	r21, r1
    16a6:	79 f1       	breq	.+94     	; 0x1706 <GPIO_readPin+0x96>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	91 05       	cpc	r25, r1
    16b0:	34 f4       	brge	.+12     	; 0x16be <GPIO_readPin+0x4e>
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	21 15       	cp	r18, r1
    16b8:	31 05       	cpc	r19, r1
    16ba:	69 f0       	breq	.+26     	; 0x16d6 <GPIO_readPin+0x66>
    16bc:	6b c0       	rjmp	.+214    	; 0x1794 <GPIO_readPin+0x124>
    16be:	4c 81       	ldd	r20, Y+4	; 0x04
    16c0:	5d 81       	ldd	r21, Y+5	; 0x05
    16c2:	42 30       	cpi	r20, 0x02	; 2
    16c4:	51 05       	cpc	r21, r1
    16c6:	b9 f1       	breq	.+110    	; 0x1736 <GPIO_readPin+0xc6>
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <GPIO_readPin+0x64>
    16d2:	49 c0       	rjmp	.+146    	; 0x1766 <GPIO_readPin+0xf6>
    16d4:	5f c0       	rjmp	.+190    	; 0x1794 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA,pin_num))
    16d6:	e9 e3       	ldi	r30, 0x39	; 57
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <GPIO_readPin+0x7e>
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <GPIO_readPin+0x7a>
    16f2:	ca 01       	movw	r24, r20
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	88 23       	and	r24, r24
    16fa:	19 f0       	breq	.+6      	; 0x1702 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	49 c0       	rjmp	.+146    	; 0x1794 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	47 c0       	rjmp	.+142    	; 0x1794 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num))
    1706:	e6 e3       	ldi	r30, 0x36	; 54
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a9 01       	movw	r20, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_readPin+0xae>
    171a:	55 95       	asr	r21
    171c:	47 95       	ror	r20
    171e:	8a 95       	dec	r24
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_readPin+0xaa>
    1722:	ca 01       	movw	r24, r20
    1724:	81 70       	andi	r24, 0x01	; 1
    1726:	90 70       	andi	r25, 0x00	; 0
    1728:	88 23       	and	r24, r24
    172a:	19 f0       	breq	.+6      	; 0x1732 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	31 c0       	rjmp	.+98     	; 0x1794 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1732:	19 82       	std	Y+1, r1	; 0x01
    1734:	2f c0       	rjmp	.+94     	; 0x1794 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num))
    1736:	e3 e3       	ldi	r30, 0x33	; 51
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	a9 01       	movw	r20, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <GPIO_readPin+0xde>
    174a:	55 95       	asr	r21
    174c:	47 95       	ror	r20
    174e:	8a 95       	dec	r24
    1750:	e2 f7       	brpl	.-8      	; 0x174a <GPIO_readPin+0xda>
    1752:	ca 01       	movw	r24, r20
    1754:	81 70       	andi	r24, 0x01	; 1
    1756:	90 70       	andi	r25, 0x00	; 0
    1758:	88 23       	and	r24, r24
    175a:	19 f0       	breq	.+6      	; 0x1762 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	19 c0       	rjmp	.+50     	; 0x1794 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1762:	19 82       	std	Y+1, r1	; 0x01
    1764:	17 c0       	rjmp	.+46     	; 0x1794 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num))
    1766:	e0 e3       	ldi	r30, 0x30	; 48
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a9 01       	movw	r20, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <GPIO_readPin+0x10e>
    177a:	55 95       	asr	r21
    177c:	47 95       	ror	r20
    177e:	8a 95       	dec	r24
    1780:	e2 f7       	brpl	.-8      	; 0x177a <GPIO_readPin+0x10a>
    1782:	ca 01       	movw	r24, r20
    1784:	81 70       	andi	r24, 0x01	; 1
    1786:	90 70       	andi	r25, 0x00	; 0
    1788:	88 23       	and	r24, r24
    178a:	19 f0       	breq	.+6      	; 0x1792 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1792:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1794:	89 81       	ldd	r24, Y+1	; 0x01
}
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <GPIO_setupPortDirection+0x6>
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <GPIO_setupPortDirection+0x8>
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	84 30       	cpi	r24, 0x04	; 4
    17ba:	90 f5       	brcc	.+100    	; 0x1820 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3c 83       	std	Y+4, r19	; 0x04
    17c4:	2b 83       	std	Y+3, r18	; 0x03
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	91 05       	cpc	r25, r1
    17ce:	d1 f0       	breq	.+52     	; 0x1804 <GPIO_setupPortDirection+0x5e>
    17d0:	2b 81       	ldd	r18, Y+3	; 0x03
    17d2:	3c 81       	ldd	r19, Y+4	; 0x04
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <GPIO_setupPortDirection+0x3e>
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	61 f0       	breq	.+24     	; 0x17fa <GPIO_setupPortDirection+0x54>
    17e2:	1e c0       	rjmp	.+60     	; 0x1820 <GPIO_setupPortDirection+0x7a>
    17e4:	2b 81       	ldd	r18, Y+3	; 0x03
    17e6:	3c 81       	ldd	r19, Y+4	; 0x04
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	81 f0       	breq	.+32     	; 0x180e <GPIO_setupPortDirection+0x68>
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	91 05       	cpc	r25, r1
    17f6:	81 f0       	breq	.+32     	; 0x1818 <GPIO_setupPortDirection+0x72>
    17f8:	13 c0       	rjmp	.+38     	; 0x1820 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17fa:	ea e3       	ldi	r30, 0x3A	; 58
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	80 83       	st	Z, r24
    1802:	0e c0       	rjmp	.+28     	; 0x1820 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1804:	e7 e3       	ldi	r30, 0x37	; 55
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	80 83       	st	Z, r24
    180c:	09 c0       	rjmp	.+18     	; 0x1820 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    180e:	e4 e3       	ldi	r30, 0x34	; 52
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	80 83       	st	Z, r24
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1818:	e1 e3       	ldi	r30, 0x31	; 49
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	00 d0       	rcall	.+0      	; 0x1834 <GPIO_writePort+0x6>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <GPIO_writePort+0x8>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	90 f5       	brcc	.+100    	; 0x18a8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch (port_num)
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3c 83       	std	Y+4, r19	; 0x04
    184c:	2b 83       	std	Y+3, r18	; 0x03
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	d1 f0       	breq	.+52     	; 0x188c <GPIO_writePort+0x5e>
    1858:	2b 81       	ldd	r18, Y+3	; 0x03
    185a:	3c 81       	ldd	r19, Y+4	; 0x04
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	2c f4       	brge	.+10     	; 0x186c <GPIO_writePort+0x3e>
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	61 f0       	breq	.+24     	; 0x1882 <GPIO_writePort+0x54>
    186a:	1e c0       	rjmp	.+60     	; 0x18a8 <GPIO_writePort+0x7a>
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	81 f0       	breq	.+32     	; 0x1896 <GPIO_writePort+0x68>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	81 f0       	breq	.+32     	; 0x18a0 <GPIO_writePort+0x72>
    1880:	13 c0       	rjmp	.+38     	; 0x18a8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1882:	eb e3       	ldi	r30, 0x3B	; 59
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	80 83       	st	Z, r24
    188a:	0e c0       	rjmp	.+28     	; 0x18a8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    188c:	e8 e3       	ldi	r30, 0x38	; 56
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	80 83       	st	Z, r24
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1896:	e5 e3       	ldi	r30, 0x35	; 53
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	80 83       	st	Z, r24
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18a0:	e2 e3       	ldi	r30, 0x32	; 50
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	80 83       	st	Z, r24
			break;
		}
	}
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <GPIO_readPort+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <GPIO_readPort+0x8>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    18c4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	90 f5       	brcc	.+100    	; 0x1930 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch (port_num)
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	3c 83       	std	Y+4, r19	; 0x04
    18d4:	2b 83       	std	Y+3, r18	; 0x03
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	d1 f0       	breq	.+52     	; 0x1914 <GPIO_readPort+0x5e>
    18e0:	2b 81       	ldd	r18, Y+3	; 0x03
    18e2:	3c 81       	ldd	r19, Y+4	; 0x04
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	2c f4       	brge	.+10     	; 0x18f4 <GPIO_readPort+0x3e>
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	61 f0       	breq	.+24     	; 0x190a <GPIO_readPort+0x54>
    18f2:	1e c0       	rjmp	.+60     	; 0x1930 <GPIO_readPort+0x7a>
    18f4:	2b 81       	ldd	r18, Y+3	; 0x03
    18f6:	3c 81       	ldd	r19, Y+4	; 0x04
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	81 f0       	breq	.+32     	; 0x191e <GPIO_readPort+0x68>
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	81 f0       	breq	.+32     	; 0x1928 <GPIO_readPort+0x72>
    1908:	13 c0       	rjmp	.+38     	; 0x1930 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    190a:	e9 e3       	ldi	r30, 0x39	; 57
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	0e c0       	rjmp	.+28     	; 0x1930 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1914:	e6 e3       	ldi	r30, 0x36	; 54
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	09 c0       	rjmp	.+18     	; 0x1930 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    191e:	e3 e3       	ldi	r30, 0x33	; 51
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1928:	e0 e3       	ldi	r30, 0x30	; 48
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	65 e0       	ldi	r22, 0x05	; 5
    194c:	41 e0       	ldi	r20, 0x01	; 1
    194e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	66 e0       	ldi	r22, 0x06	; 6
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 62 09 	call	0x12c4	; 0x12c4 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	6f ef       	ldi	r22, 0xFF	; 255
    196a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);		/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    196e:	88 e3       	ldi	r24, 0x38	; 56
    1970:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF);					/* cursor off */
    1974:	8c e0       	ldi	r24, 0x0C	; 12
    1976:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND);					/* clear LCD at the beginning */
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
}
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	e9 97       	sbiw	r28, 0x39	; 57
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	65 e0       	ldi	r22, 0x05	; 5
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	66 e0       	ldi	r22, 0x06	; 6
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e8       	ldi	r26, 0x80	; 128
    19b6:	bf e3       	ldi	r27, 0x3F	; 63
    19b8:	8d ab       	std	Y+53, r24	; 0x35
    19ba:	9e ab       	std	Y+54, r25	; 0x36
    19bc:	af ab       	std	Y+55, r26	; 0x37
    19be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c0:	6d a9       	ldd	r22, Y+53	; 0x35
    19c2:	7e a9       	ldd	r23, Y+54	; 0x36
    19c4:	8f a9       	ldd	r24, Y+55	; 0x37
    19c6:	98 ad       	ldd	r25, Y+56	; 0x38
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	4a ef       	ldi	r20, 0xFA	; 250
    19ce:	54 e4       	ldi	r21, 0x44	; 68
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	89 ab       	std	Y+49, r24	; 0x31
    19da:	9a ab       	std	Y+50, r25	; 0x32
    19dc:	ab ab       	std	Y+51, r26	; 0x33
    19de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19e0:	69 a9       	ldd	r22, Y+49	; 0x31
    19e2:	7a a9       	ldd	r23, Y+50	; 0x32
    19e4:	8b a9       	ldd	r24, Y+51	; 0x33
    19e6:	9c a9       	ldd	r25, Y+52	; 0x34
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e8       	ldi	r20, 0x80	; 128
    19ee:	5f e3       	ldi	r21, 0x3F	; 63
    19f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	2c f4       	brge	.+10     	; 0x1a02 <LCD_sendCommand+0x7c>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	98 ab       	std	Y+48, r25	; 0x30
    19fe:	8f a7       	std	Y+47, r24	; 0x2f
    1a00:	3f c0       	rjmp	.+126    	; 0x1a80 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1a02:	69 a9       	ldd	r22, Y+49	; 0x31
    1a04:	7a a9       	ldd	r23, Y+50	; 0x32
    1a06:	8b a9       	ldd	r24, Y+51	; 0x33
    1a08:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	3f ef       	ldi	r19, 0xFF	; 255
    1a0e:	4f e7       	ldi	r20, 0x7F	; 127
    1a10:	57 e4       	ldi	r21, 0x47	; 71
    1a12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a16:	18 16       	cp	r1, r24
    1a18:	4c f5       	brge	.+82     	; 0x1a6c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a20:	98 ad       	ldd	r25, Y+56	; 0x38
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e2       	ldi	r20, 0x20	; 32
    1a28:	51 e4       	ldi	r21, 0x41	; 65
    1a2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	98 ab       	std	Y+48, r25	; 0x30
    1a40:	8f a7       	std	Y+47, r24	; 0x2f
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_sendCommand+0xdc>
    1a44:	88 ec       	ldi	r24, 0xC8	; 200
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9e a7       	std	Y+46, r25	; 0x2e
    1a4a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a4c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a4e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <LCD_sendCommand+0xca>
    1a54:	9e a7       	std	Y+46, r25	; 0x2e
    1a56:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	98 ab       	std	Y+48, r25	; 0x30
    1a60:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a62:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a64:	98 a9       	ldd	r25, Y+48	; 0x30
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	69 f7       	brne	.-38     	; 0x1a44 <LCD_sendCommand+0xbe>
    1a6a:	14 c0       	rjmp	.+40     	; 0x1a94 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a70:	8b a9       	ldd	r24, Y+51	; 0x33
    1a72:	9c a9       	ldd	r25, Y+52	; 0x34
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	98 ab       	std	Y+48, r25	; 0x30
    1a7e:	8f a7       	std	Y+47, r24	; 0x2f
    1a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a82:	98 a9       	ldd	r25, Y+48	; 0x30
    1a84:	9c a7       	std	Y+44, r25	; 0x2c
    1a86:	8b a7       	std	Y+43, r24	; 0x2b
    1a88:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_sendCommand+0x106>
    1a90:	9c a7       	std	Y+44, r25	; 0x2c
    1a92:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	67 e0       	ldi	r22, 0x07	; 7
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	8f a3       	std	Y+39, r24	; 0x27
    1aa8:	98 a7       	std	Y+40, r25	; 0x28
    1aaa:	a9 a7       	std	Y+41, r26	; 0x29
    1aac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a ef       	ldi	r20, 0xFA	; 250
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	8b a3       	std	Y+35, r24	; 0x23
    1ac8:	9c a3       	std	Y+36, r25	; 0x24
    1aca:	ad a3       	std	Y+37, r26	; 0x25
    1acc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ace:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	5f e3       	ldi	r21, 0x3F	; 63
    1ade:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae2:	88 23       	and	r24, r24
    1ae4:	2c f4       	brge	.+10     	; 0x1af0 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1af0:	6b a1       	ldd	r22, Y+35	; 0x23
    1af2:	7c a1       	ldd	r23, Y+36	; 0x24
    1af4:	8d a1       	ldd	r24, Y+37	; 0x25
    1af6:	9e a1       	ldd	r25, Y+38	; 0x26
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	4c f5       	brge	.+82     	; 0x1b5a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e2       	ldi	r20, 0x20	; 32
    1b16:	51 e4       	ldi	r21, 0x41	; 65
    1b18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	9a a3       	std	Y+34, r25	; 0x22
    1b2e:	89 a3       	std	Y+33, r24	; 0x21
    1b30:	0f c0       	rjmp	.+30     	; 0x1b50 <LCD_sendCommand+0x1ca>
    1b32:	88 ec       	ldi	r24, 0xC8	; 200
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	98 a3       	std	Y+32, r25	; 0x20
    1b38:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_sendCommand+0x1b8>
    1b42:	98 a3       	std	Y+32, r25	; 0x20
    1b44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b46:	89 a1       	ldd	r24, Y+33	; 0x21
    1b48:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	9a a3       	std	Y+34, r25	; 0x22
    1b4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b50:	89 a1       	ldd	r24, Y+33	; 0x21
    1b52:	9a a1       	ldd	r25, Y+34	; 0x22
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	69 f7       	brne	.-38     	; 0x1b32 <LCD_sendCommand+0x1ac>
    1b58:	14 c0       	rjmp	.+40     	; 0x1b82 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b60:	9e a1       	ldd	r25, Y+38	; 0x26
    1b62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	9a a3       	std	Y+34, r25	; 0x22
    1b6c:	89 a3       	std	Y+33, r24	; 0x21
    1b6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b70:	9a a1       	ldd	r25, Y+34	; 0x22
    1b72:	9e 8f       	std	Y+30, r25	; 0x1e
    1b74:	8d 8f       	std	Y+29, r24	; 0x1d
    1b76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_sendCommand+0x1f4>
    1b7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b80:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	69 ad       	ldd	r22, Y+57	; 0x39
    1b86:	0e 94 17 0c 	call	0x182e	; 0x182e <GPIO_writePort>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e8       	ldi	r26, 0x80	; 128
    1b90:	bf e3       	ldi	r27, 0x3F	; 63
    1b92:	89 8f       	std	Y+25, r24	; 0x19
    1b94:	9a 8f       	std	Y+26, r25	; 0x1a
    1b96:	ab 8f       	std	Y+27, r26	; 0x1b
    1b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a ef       	ldi	r20, 0xFA	; 250
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8d 8b       	std	Y+21, r24	; 0x15
    1bb4:	9e 8b       	std	Y+22, r25	; 0x16
    1bb6:	af 8b       	std	Y+23, r26	; 0x17
    1bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bba:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <LCD_sendCommand+0x256>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9c 8b       	std	Y+20, r25	; 0x14
    1c1a:	8b 8b       	std	Y+19, r24	; 0x13
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_sendCommand+0x2b6>
    1c1e:	88 ec       	ldi	r24, 0xC8	; 200
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9a 8b       	std	Y+18, r25	; 0x12
    1c24:	89 8b       	std	Y+17, r24	; 0x11
    1c26:	89 89       	ldd	r24, Y+17	; 0x11
    1c28:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_sendCommand+0x2a4>
    1c2e:	9a 8b       	std	Y+18, r25	; 0x12
    1c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8b 89       	ldd	r24, Y+19	; 0x13
    1c34:	9c 89       	ldd	r25, Y+20	; 0x14
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9c 8b       	std	Y+20, r25	; 0x14
    1c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_sendCommand+0x298>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6d 89       	ldd	r22, Y+21	; 0x15
    1c48:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9c 8b       	std	Y+20, r25	; 0x14
    1c58:	8b 8b       	std	Y+19, r24	; 0x13
    1c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5e:	98 8b       	std	Y+16, r25	; 0x10
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
    1c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c64:	98 89       	ldd	r25, Y+16	; 0x10
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_sendCommand+0x2e0>
    1c6a:	98 8b       	std	Y+16, r25	; 0x10
    1c6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	67 e0       	ldi	r22, 0x07	; 7
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	8b 87       	std	Y+11, r24	; 0x0b
    1c82:	9c 87       	std	Y+12, r25	; 0x0c
    1c84:	ad 87       	std	Y+13, r26	; 0x0d
    1c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
    1ca2:	98 87       	std	Y+8, r25	; 0x08
    1ca4:	a9 87       	std	Y+9, r26	; 0x09
    1ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <LCD_sendCommand+0x344>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_sendCommand+0x3a4>
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_sendCommand+0x392>
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <LCD_sendCommand+0x386>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_sendCommand+0x3ce>
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
    1d5c:	e9 96       	adiw	r28, 0x39	; 57
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	e9 97       	sbiw	r28, 0x39	; 57
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* Instruction Mode RS=1 */
    1d84:	82 e0       	ldi	r24, 0x02	; 2
    1d86:	65 e0       	ldi	r22, 0x05	; 5
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	66 e0       	ldi	r22, 0x06	; 6
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e8       	ldi	r26, 0x80	; 128
    1d9e:	bf e3       	ldi	r27, 0x3F	; 63
    1da0:	8d ab       	std	Y+53, r24	; 0x35
    1da2:	9e ab       	std	Y+54, r25	; 0x36
    1da4:	af ab       	std	Y+55, r26	; 0x37
    1da6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da8:	6d a9       	ldd	r22, Y+53	; 0x35
    1daa:	7e a9       	ldd	r23, Y+54	; 0x36
    1dac:	8f a9       	ldd	r24, Y+55	; 0x37
    1dae:	98 ad       	ldd	r25, Y+56	; 0x38
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4a ef       	ldi	r20, 0xFA	; 250
    1db6:	54 e4       	ldi	r21, 0x44	; 68
    1db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	89 ab       	std	Y+49, r24	; 0x31
    1dc2:	9a ab       	std	Y+50, r25	; 0x32
    1dc4:	ab ab       	std	Y+51, r26	; 0x33
    1dc6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dca:	7a a9       	ldd	r23, Y+50	; 0x32
    1dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dce:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	2c f4       	brge	.+10     	; 0x1dea <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	98 ab       	std	Y+48, r25	; 0x30
    1de6:	8f a7       	std	Y+47, r24	; 0x2f
    1de8:	3f c0       	rjmp	.+126    	; 0x1e68 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1dea:	69 a9       	ldd	r22, Y+49	; 0x31
    1dec:	7a a9       	ldd	r23, Y+50	; 0x32
    1dee:	8b a9       	ldd	r24, Y+51	; 0x33
    1df0:	9c a9       	ldd	r25, Y+52	; 0x34
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	3f ef       	ldi	r19, 0xFF	; 255
    1df6:	4f e7       	ldi	r20, 0x7F	; 127
    1df8:	57 e4       	ldi	r21, 0x47	; 71
    1dfa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dfe:	18 16       	cp	r1, r24
    1e00:	4c f5       	brge	.+82     	; 0x1e54 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	6d a9       	ldd	r22, Y+53	; 0x35
    1e04:	7e a9       	ldd	r23, Y+54	; 0x36
    1e06:	8f a9       	ldd	r24, Y+55	; 0x37
    1e08:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e2       	ldi	r20, 0x20	; 32
    1e10:	51 e4       	ldi	r21, 0x41	; 65
    1e12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	98 ab       	std	Y+48, r25	; 0x30
    1e28:	8f a7       	std	Y+47, r24	; 0x2f
    1e2a:	0f c0       	rjmp	.+30     	; 0x1e4a <LCD_displayCharacter+0xdc>
    1e2c:	88 ec       	ldi	r24, 0xC8	; 200
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9e a7       	std	Y+46, r25	; 0x2e
    1e32:	8d a7       	std	Y+45, r24	; 0x2d
    1e34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <LCD_displayCharacter+0xca>
    1e3c:	9e a7       	std	Y+46, r25	; 0x2e
    1e3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e42:	98 a9       	ldd	r25, Y+48	; 0x30
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	98 ab       	std	Y+48, r25	; 0x30
    1e48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	69 f7       	brne	.-38     	; 0x1e2c <LCD_displayCharacter+0xbe>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	69 a9       	ldd	r22, Y+49	; 0x31
    1e56:	7a a9       	ldd	r23, Y+50	; 0x32
    1e58:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	98 ab       	std	Y+48, r25	; 0x30
    1e66:	8f a7       	std	Y+47, r24	; 0x2f
    1e68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6c:	9c a7       	std	Y+44, r25	; 0x2c
    1e6e:	8b a7       	std	Y+43, r24	; 0x2b
    1e70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_displayCharacter+0x106>
    1e78:	9c a7       	std	Y+44, r25	; 0x2c
    1e7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e8       	ldi	r26, 0x80	; 128
    1e8c:	bf e3       	ldi	r27, 0x3F	; 63
    1e8e:	8f a3       	std	Y+39, r24	; 0x27
    1e90:	98 a7       	std	Y+40, r25	; 0x28
    1e92:	a9 a7       	std	Y+41, r26	; 0x29
    1e94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e96:	6f a1       	ldd	r22, Y+39	; 0x27
    1e98:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a ef       	ldi	r20, 0xFA	; 250
    1ea4:	54 e4       	ldi	r21, 0x44	; 68
    1ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8b a3       	std	Y+35, r24	; 0x23
    1eb0:	9c a3       	std	Y+36, r25	; 0x24
    1eb2:	ad a3       	std	Y+37, r26	; 0x25
    1eb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eba:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	2c f4       	brge	.+10     	; 0x1ed8 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9a a3       	std	Y+34, r25	; 0x22
    1ed4:	89 a3       	std	Y+33, r24	; 0x21
    1ed6:	3f c0       	rjmp	.+126    	; 0x1f56 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1ed8:	6b a1       	ldd	r22, Y+35	; 0x23
    1eda:	7c a1       	ldd	r23, Y+36	; 0x24
    1edc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ede:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	3f ef       	ldi	r19, 0xFF	; 255
    1ee4:	4f e7       	ldi	r20, 0x7F	; 127
    1ee6:	57 e4       	ldi	r21, 0x47	; 71
    1ee8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eec:	18 16       	cp	r1, r24
    1eee:	4c f5       	brge	.+82     	; 0x1f42 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	40 e2       	ldi	r20, 0x20	; 32
    1efe:	51 e4       	ldi	r21, 0x41	; 65
    1f00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <LCD_displayCharacter+0x1ca>
    1f1a:	88 ec       	ldi	r24, 0xC8	; 200
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	98 a3       	std	Y+32, r25	; 0x20
    1f20:	8f 8f       	std	Y+31, r24	; 0x1f
    1f22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f24:	98 a1       	ldd	r25, Y+32	; 0x20
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	f1 f7       	brne	.-4      	; 0x1f26 <LCD_displayCharacter+0x1b8>
    1f2a:	98 a3       	std	Y+32, r25	; 0x20
    1f2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f30:	9a a1       	ldd	r25, Y+34	; 0x22
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	9a a3       	std	Y+34, r25	; 0x22
    1f36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f38:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	69 f7       	brne	.-38     	; 0x1f1a <LCD_displayCharacter+0x1ac>
    1f40:	14 c0       	rjmp	.+40     	; 0x1f6a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f42:	6b a1       	ldd	r22, Y+35	; 0x23
    1f44:	7c a1       	ldd	r23, Y+36	; 0x24
    1f46:	8d a1       	ldd	r24, Y+37	; 0x25
    1f48:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9a a3       	std	Y+34, r25	; 0x22
    1f54:	89 a3       	std	Y+33, r24	; 0x21
    1f56:	89 a1       	ldd	r24, Y+33	; 0x21
    1f58:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1f5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_displayCharacter+0x1f4>
    1f66:	9e 8f       	std	Y+30, r25	; 0x1e
    1f68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data);						/* out the required data to the data bus D0 --> D7 */
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	69 ad       	ldd	r22, Y+57	; 0x39
    1f6e:	0e 94 17 0c 	call	0x182e	; 0x182e <GPIO_writePort>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a0 e8       	ldi	r26, 0x80	; 128
    1f78:	bf e3       	ldi	r27, 0x3F	; 63
    1f7a:	89 8f       	std	Y+25, r24	; 0x19
    1f7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f82:	69 8d       	ldd	r22, Y+25	; 0x19
    1f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	4a ef       	ldi	r20, 0xFA	; 250
    1f90:	54 e4       	ldi	r21, 0x44	; 68
    1f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	8d 8b       	std	Y+21, r24	; 0x15
    1f9c:	9e 8b       	std	Y+22, r25	; 0x16
    1f9e:	af 8b       	std	Y+23, r26	; 0x17
    1fa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e8       	ldi	r20, 0x80	; 128
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb6:	88 23       	and	r24, r24
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
    1fc2:	3f c0       	rjmp	.+126    	; 0x2042 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	3f ef       	ldi	r19, 0xFF	; 255
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	57 e4       	ldi	r21, 0x47	; 71
    1fd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	4c f5       	brge	.+82     	; 0x202e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
    2004:	0f c0       	rjmp	.+30     	; 0x2024 <LCD_displayCharacter+0x2b6>
    2006:	88 ec       	ldi	r24, 0xC8	; 200
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9a 8b       	std	Y+18, r25	; 0x12
    200c:	89 8b       	std	Y+17, r24	; 0x11
    200e:	89 89       	ldd	r24, Y+17	; 0x11
    2010:	9a 89       	ldd	r25, Y+18	; 0x12
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <LCD_displayCharacter+0x2a4>
    2016:	9a 8b       	std	Y+18, r25	; 0x12
    2018:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201a:	8b 89       	ldd	r24, Y+19	; 0x13
    201c:	9c 89       	ldd	r25, Y+20	; 0x14
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	9c 89       	ldd	r25, Y+20	; 0x14
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	69 f7       	brne	.-38     	; 0x2006 <LCD_displayCharacter+0x298>
    202c:	14 c0       	rjmp	.+40     	; 0x2056 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202e:	6d 89       	ldd	r22, Y+21	; 0x15
    2030:	7e 89       	ldd	r23, Y+22	; 0x16
    2032:	8f 89       	ldd	r24, Y+23	; 0x17
    2034:	98 8d       	ldd	r25, Y+24	; 0x18
    2036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9c 8b       	std	Y+20, r25	; 0x14
    2040:	8b 8b       	std	Y+19, r24	; 0x13
    2042:	8b 89       	ldd	r24, Y+19	; 0x13
    2044:	9c 89       	ldd	r25, Y+20	; 0x14
    2046:	98 8b       	std	Y+16, r25	; 0x10
    2048:	8f 87       	std	Y+15, r24	; 0x0f
    204a:	8f 85       	ldd	r24, Y+15	; 0x0f
    204c:	98 89       	ldd	r25, Y+16	; 0x10
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_displayCharacter+0x2e0>
    2052:	98 8b       	std	Y+16, r25	; 0x10
    2054:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	67 e0       	ldi	r22, 0x07	; 7
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	0e 94 4d 0a 	call	0x149a	; 0x149a <GPIO_writePin>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e8       	ldi	r26, 0x80	; 128
    2066:	bf e3       	ldi	r27, 0x3F	; 63
    2068:	8b 87       	std	Y+11, r24	; 0x0b
    206a:	9c 87       	std	Y+12, r25	; 0x0c
    206c:	ad 87       	std	Y+13, r26	; 0x0d
    206e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	6b 85       	ldd	r22, Y+11	; 0x0b
    2072:	7c 85       	ldd	r23, Y+12	; 0x0c
    2074:	8d 85       	ldd	r24, Y+13	; 0x0d
    2076:	9e 85       	ldd	r25, Y+14	; 0x0e
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4a ef       	ldi	r20, 0xFA	; 250
    207e:	54 e4       	ldi	r21, 0x44	; 68
    2080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	8f 83       	std	Y+7, r24	; 0x07
    208a:	98 87       	std	Y+8, r25	; 0x08
    208c:	a9 87       	std	Y+9, r26	; 0x09
    208e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	4c f5       	brge	.+82     	; 0x211c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    20cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e2       	ldi	r20, 0x20	; 32
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <LCD_displayCharacter+0x3a4>
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9c 83       	std	Y+4, r25	; 0x04
    20fa:	8b 83       	std	Y+3, r24	; 0x03
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_displayCharacter+0x392>
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	69 f7       	brne	.-38     	; 0x20f4 <LCD_displayCharacter+0x386>
    211a:	14 c0       	rjmp	.+40     	; 0x2144 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211c:	6f 81       	ldd	r22, Y+7	; 0x07
    211e:	78 85       	ldd	r23, Y+8	; 0x08
    2120:	89 85       	ldd	r24, Y+9	; 0x09
    2122:	9a 85       	ldd	r25, Y+10	; 0x0a
    2124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9e 83       	std	Y+6, r25	; 0x06
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_displayCharacter+0x3ce>
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
    2144:	e9 96       	adiw	r28, 0x39	; 57
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <LCD_displayString+0x6>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	0a c0       	rjmp	.+20     	; 0x217a <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    2166:	e9 81       	ldd	r30, Y+1	; 0x01
    2168:	fa 81       	ldd	r31, Y+2	; 0x02
    216a:	80 81       	ld	r24, Z
    216c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayCharacter>
		Str++;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	9a 81       	ldd	r25, Y+2	; 0x02
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    217a:	e9 81       	ldd	r30, Y+1	; 0x01
    217c:	fa 81       	ldd	r31, Y+2	; 0x02
    217e:	80 81       	ld	r24, Z
    2180:	88 23       	and	r24, r24
    2182:	89 f7       	brne	.-30     	; 0x2166 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(Str[i]);
		++i;
	}
	 *********************************************************/
}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <LCD_moveCursor+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <LCD_moveCursor+0x8>
    2196:	0f 92       	push	r0
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	8a 83       	std	Y+2, r24	; 0x02
    219e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	3d 83       	std	Y+5, r19	; 0x05
    21a8:	2c 83       	std	Y+4, r18	; 0x04
    21aa:	8c 81       	ldd	r24, Y+4	; 0x04
    21ac:	9d 81       	ldd	r25, Y+5	; 0x05
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	91 05       	cpc	r25, r1
    21b2:	c1 f0       	breq	.+48     	; 0x21e4 <LCD_moveCursor+0x56>
    21b4:	2c 81       	ldd	r18, Y+4	; 0x04
    21b6:	3d 81       	ldd	r19, Y+5	; 0x05
    21b8:	22 30       	cpi	r18, 0x02	; 2
    21ba:	31 05       	cpc	r19, r1
    21bc:	2c f4       	brge	.+10     	; 0x21c8 <LCD_moveCursor+0x3a>
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	61 f0       	breq	.+24     	; 0x21de <LCD_moveCursor+0x50>
    21c6:	19 c0       	rjmp	.+50     	; 0x21fa <LCD_moveCursor+0x6c>
    21c8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ca:	3d 81       	ldd	r19, Y+5	; 0x05
    21cc:	22 30       	cpi	r18, 0x02	; 2
    21ce:	31 05       	cpc	r19, r1
    21d0:	69 f0       	breq	.+26     	; 0x21ec <LCD_moveCursor+0x5e>
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	83 30       	cpi	r24, 0x03	; 3
    21d8:	91 05       	cpc	r25, r1
    21da:	61 f0       	breq	.+24     	; 0x21f4 <LCD_moveCursor+0x66>
    21dc:	0e c0       	rjmp	.+28     	; 0x21fa <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;			break;
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	0b c0       	rjmp	.+22     	; 0x21fa <LCD_moveCursor+0x6c>
	case 1:
		lcd_memory_address=col+0x40;	break;
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	80 5c       	subi	r24, 0xC0	; 192
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <LCD_moveCursor+0x6c>
	case 2:
		lcd_memory_address=col+0x10;	break;
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	80 5f       	subi	r24, 0xF0	; 240
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <LCD_moveCursor+0x6c>
	case 3:
		lcd_memory_address=col+0x50;	break;
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	80 5b       	subi	r24, 0xB0	; 176
    21f8:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
}
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <LCD_displayStringRowColumn+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <LCD_displayStringRowColumn+0x8>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	6a 83       	std	Y+2, r22	; 0x02
    2222:	5c 83       	std	Y+4, r21	; 0x04
    2224:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); 		/* go to to the required LCD position */
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	6a 81       	ldd	r22, Y+2	; 0x02
    222a:	0e 94 c7 10 	call	0x218e	; 0x218e <LCD_moveCursor>
	LCD_displayString(Str); 		/* display the string */
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_displayString>
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int num)
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	62 97       	sbiw	r28, 0x12	; 18
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	9a 8b       	std	Y+18, r25	; 0x12
    225a:	89 8b       	std	Y+17, r24	; 0x11
	   char buff[16]; /* String to hold the ascii result */
	   itoa(num,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    225c:	89 89       	ldd	r24, Y+17	; 0x11
    225e:	9a 89       	ldd	r25, Y+18	; 0x12
    2260:	9e 01       	movw	r18, r28
    2262:	2f 5f       	subi	r18, 0xFF	; 255
    2264:	3f 4f       	sbci	r19, 0xFF	; 255
    2266:	b9 01       	movw	r22, r18
    2268:	4a e0       	ldi	r20, 0x0A	; 10
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	0e 94 c0 13 	call	0x2780	; 0x2780 <itoa>
	   LCD_displayString(buff); /* Display the string */
    2270:	ce 01       	movw	r24, r28
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	0e 94 ab 10 	call	0x2156	; 0x2156 <LCD_displayString>
}
    2278:	62 96       	adiw	r28, 0x12	; 18
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	0e 94 c3 0c 	call	0x1986	; 0x1986 <LCD_sendCommand>
}
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <TWI_init>:
/*
 * Description :
 * Initialize the TWI with configurable SCL frequency, pre-scalar and address.
 */
void TWI_init(const TWI_ConfigType* Config_Ptr)
{
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <TWI_init+0xa>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <TWI_init+0xc>
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	9b 83       	std	Y+3, r25	; 0x03
    22b2:	8a 83       	std	Y+2, r24	; 0x02
	/* Equation to calculate the Bit rate register from frequency and pre-scalar */
	TWBR = ((((F_CPU / Config_Ptr->SCL_Frequency) - 16) / (Config_Ptr->TWI_Prescalar)) / 2 );
    22b4:	00 e2       	ldi	r16, 0x20	; 32
    22b6:	10 e0       	ldi	r17, 0x00	; 0
    22b8:	ea 81       	ldd	r30, Y+2	; 0x02
    22ba:	fb 81       	ldd	r31, Y+3	; 0x03
    22bc:	20 81       	ld	r18, Z
    22be:	31 81       	ldd	r19, Z+1	; 0x01
    22c0:	42 81       	ldd	r20, Z+2	; 0x02
    22c2:	53 81       	ldd	r21, Z+3	; 0x03
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	92 e1       	ldi	r25, 0x12	; 18
    22c8:	aa e7       	ldi	r26, 0x7A	; 122
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__udivmodsi4>
    22d4:	da 01       	movw	r26, r20
    22d6:	c9 01       	movw	r24, r18
    22d8:	40 97       	sbiw	r24, 0x10	; 16
    22da:	a1 09       	sbc	r26, r1
    22dc:	b1 09       	sbc	r27, r1
    22de:	ea 81       	ldd	r30, Y+2	; 0x02
    22e0:	fb 81       	ldd	r31, Y+3	; 0x03
    22e2:	25 81       	ldd	r18, Z+5	; 0x05
    22e4:	22 2f       	mov	r18, r18
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	50 e0       	ldi	r21, 0x00	; 0
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__udivmodsi4>
    22f4:	da 01       	movw	r26, r20
    22f6:	c9 01       	movw	r24, r18
    22f8:	b6 95       	lsr	r27
    22fa:	a7 95       	ror	r26
    22fc:	97 95       	ror	r25
    22fe:	87 95       	ror	r24
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
	/* Set the configured pre-scalar*/
	uint8 twps_value;
	switch (Config_Ptr->TWI_Prescalar)
    2304:	ea 81       	ldd	r30, Y+2	; 0x02
    2306:	fb 81       	ldd	r31, Y+3	; 0x03
    2308:	85 81       	ldd	r24, Z+5	; 0x05
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	3d 83       	std	Y+5, r19	; 0x05
    2310:	2c 83       	std	Y+4, r18	; 0x04
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	9d 81       	ldd	r25, Y+5	; 0x05
    2316:	84 30       	cpi	r24, 0x04	; 4
    2318:	91 05       	cpc	r25, r1
    231a:	c1 f0       	breq	.+48     	; 0x234c <TWI_init+0xae>
    231c:	ec 81       	ldd	r30, Y+4	; 0x04
    231e:	fd 81       	ldd	r31, Y+5	; 0x05
    2320:	e5 30       	cpi	r30, 0x05	; 5
    2322:	f1 05       	cpc	r31, r1
    2324:	34 f4       	brge	.+12     	; 0x2332 <TWI_init+0x94>
    2326:	2c 81       	ldd	r18, Y+4	; 0x04
    2328:	3d 81       	ldd	r19, Y+5	; 0x05
    232a:	21 30       	cpi	r18, 0x01	; 1
    232c:	31 05       	cpc	r19, r1
    232e:	61 f0       	breq	.+24     	; 0x2348 <TWI_init+0xaa>
    2330:	16 c0       	rjmp	.+44     	; 0x235e <TWI_init+0xc0>
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	9d 81       	ldd	r25, Y+5	; 0x05
    2336:	80 31       	cpi	r24, 0x10	; 16
    2338:	91 05       	cpc	r25, r1
    233a:	59 f0       	breq	.+22     	; 0x2352 <TWI_init+0xb4>
    233c:	ec 81       	ldd	r30, Y+4	; 0x04
    233e:	fd 81       	ldd	r31, Y+5	; 0x05
    2340:	e0 34       	cpi	r30, 0x40	; 64
    2342:	f1 05       	cpc	r31, r1
    2344:	49 f0       	breq	.+18     	; 0x2358 <TWI_init+0xba>
    2346:	0b c0       	rjmp	.+22     	; 0x235e <TWI_init+0xc0>
	{
	case (1):
		twps_value = 0;		break;
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	0a c0       	rjmp	.+20     	; 0x2360 <TWI_init+0xc2>
	case (4):
		twps_value = 1;		break;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	07 c0       	rjmp	.+14     	; 0x2360 <TWI_init+0xc2>
	case (16):
		twps_value = 2;		break;
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <TWI_init+0xc2>
	case (64):
		twps_value = 3;		break;
    2358:	83 e0       	ldi	r24, 0x03	; 3
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <TWI_init+0xc2>
	default :
		twps_value = 0;		break;
    235e:	19 82       	std	Y+1, r1	; 0x01
	}
	TWSR = (TWSR & 0xFC) | (twps_value<<TWPS0);
    2360:	a1 e2       	ldi	r26, 0x21	; 33
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e1 e2       	ldi	r30, 0x21	; 33
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	98 2f       	mov	r25, r24
    236c:	9c 7f       	andi	r25, 0xFC	; 252
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	89 2b       	or	r24, r25
    2372:	8c 93       	st	X, r24

	/* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR = (TWAR & 0x01) | ((Config_Ptr->Address)<<TWA0);
    2374:	a2 e2       	ldi	r26, 0x22	; 34
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e2 e2       	ldi	r30, 0x22	; 34
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	28 2f       	mov	r18, r24
    2380:	21 70       	andi	r18, 0x01	; 1
    2382:	ea 81       	ldd	r30, Y+2	; 0x02
    2384:	fb 81       	ldd	r31, Y+3	; 0x03
    2386:	84 81       	ldd	r24, Z+4	; 0x04
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	82 2b       	or	r24, r18
    2392:	8c 93       	st	X, r24
	/* Enable the TWI */
	TWCR = (1<<TWEN);
    2394:	e6 e5       	ldi	r30, 0x56	; 86
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	84 e0       	ldi	r24, 0x04	; 4
    239a:	80 83       	st	Z, r24
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	08 95       	ret

000023b0 <TWI_start>:
/*
 * Description :
 * Sends a TWI start bit.
 */
void TWI_start(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<TWINT) | (1<<TWSTA) | (1<<TWEN);
    23b8:	e6 e5       	ldi	r30, 0x56	; 86
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	85 e2       	ldi	r24, 0x25	; 37
    23be:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    23c0:	e6 e5       	ldi	r30, 0x56	; 86
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	88 23       	and	r24, r24
    23c8:	dc f7       	brge	.-10     	; 0x23c0 <TWI_start+0x10>
}
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <TWI_stop>:
/*
 * Description :
 * Sends a TWI stop bit.
 */
void TWI_stop(void)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<TWINT) | (1<<TWSTO) | (1<<TWEN);
    23d8:	e6 e5       	ldi	r30, 0x56	; 86
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	85 e1       	ldi	r24, 0x15	; 21
    23de:	80 83       	st	Z, r24
}
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <TWI_writeByte>:
/*
 * Description :
 * Write a byte and receive an ACK from selected slave.
 */
void TWI_writeByte(uint8 data)
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    23f2:	e3 e2       	ldi	r30, 0x23	; 35
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	80 83       	st	Z, r24

	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    23fa:	e6 e5       	ldi	r30, 0x56	; 86
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	84 e8       	ldi	r24, 0x84	; 132
    2400:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2402:	e6 e5       	ldi	r30, 0x56	; 86
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	88 23       	and	r24, r24
    240a:	dc f7       	brge	.-10     	; 0x2402 <TWI_writeByte+0x1c>
}
    240c:	0f 90       	pop	r0
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <TWI_readByteWithACK>:
/*
 * Description :
 * Read a byte from slave and send ACK.
 */
uint8 TWI_readByteWithACK(void)
{
    2414:	df 93       	push	r29
    2416:	cf 93       	push	r28
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    241c:	e6 e5       	ldi	r30, 0x56	; 86
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	84 ec       	ldi	r24, 0xC4	; 196
    2422:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2424:	e6 e5       	ldi	r30, 0x56	; 86
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	dc f7       	brge	.-10     	; 0x2424 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    242e:	e3 e2       	ldi	r30, 0x23	; 35
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
}
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <TWI_readByteWithNACK>:
/*
 * Description :
 * Read a byte from slave and send NACK.
 */
uint8 TWI_readByteWithNACK(void)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2442:	e6 e5       	ldi	r30, 0x56	; 86
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	84 e8       	ldi	r24, 0x84	; 132
    2448:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    244a:	e6 e5       	ldi	r30, 0x56	; 86
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	88 23       	and	r24, r24
    2452:	dc f7       	brge	.-10     	; 0x244a <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    2454:	e3 e2       	ldi	r30, 0x23	; 35
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
}
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <TWI_getStatus>:
/*
 * Description :
 * Read status.
 */
uint8 TWI_getStatus(void)
{
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	0f 92       	push	r0
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = (TWSR & 0xF8);
    246a:	e1 e2       	ldi	r30, 0x21	; 33
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	88 7f       	andi	r24, 0xF8	; 248
    2472:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2474:	89 81       	ldd	r24, Y+1	; 0x01
}
    2476:	0f 90       	pop	r0
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <UART_init+0x6>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <UART_init+0x8>
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA,U2X);
    248e:	ab e2       	ldi	r26, 0x2B	; 43
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	eb e2       	ldi	r30, 0x2B	; 43
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	82 60       	ori	r24, 0x02	; 2
    249a:	8c 93       	st	X, r24

	/* RXEN = 1 for Receiver Enable */
	SET_BIT(UCSRB,RXEN);
    249c:	aa e2       	ldi	r26, 0x2A	; 42
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	ea e2       	ldi	r30, 0x2A	; 42
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	80 61       	ori	r24, 0x10	; 16
    24a8:	8c 93       	st	X, r24
	/* TXEN = 1 for Transmitter Enable */
	SET_BIT(UCSRB,TXEN);
    24aa:	aa e2       	ldi	r26, 0x2A	; 42
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	ea e2       	ldi	r30, 0x2A	; 42
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	88 60       	ori	r24, 0x08	; 8
    24b6:	8c 93       	st	X, r24

	/* URSEL = 1 to write on UCSRC shared register*/
	SET_BIT(UCSRC,URSEL);
    24b8:	a0 e4       	ldi	r26, 0x40	; 64
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e0 e4       	ldi	r30, 0x40	; 64
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	80 68       	ori	r24, 0x80	; 128
    24c4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityMode)<<UPM0);
    24c6:	a0 e4       	ldi	r26, 0x40	; 64
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e0 e4       	ldi	r30, 0x40	; 64
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	28 2f       	mov	r18, r24
    24d2:	2f 7c       	andi	r18, 0xCF	; 207
    24d4:	eb 81       	ldd	r30, Y+3	; 0x03
    24d6:	fc 81       	ldd	r31, Y+4	; 0x04
    24d8:	85 81       	ldd	r24, Z+5	; 0x05
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	82 95       	swap	r24
    24e0:	92 95       	swap	r25
    24e2:	90 7f       	andi	r25, 0xF0	; 240
    24e4:	98 27       	eor	r25, r24
    24e6:	80 7f       	andi	r24, 0xF0	; 240
    24e8:	98 27       	eor	r25, r24
    24ea:	82 2b       	or	r24, r18
    24ec:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->StopBits)<<USBS);
    24ee:	a0 e4       	ldi	r26, 0x40	; 64
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e0 e4       	ldi	r30, 0x40	; 64
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	28 2f       	mov	r18, r24
    24fa:	27 7f       	andi	r18, 0xF7	; 247
    24fc:	eb 81       	ldd	r30, Y+3	; 0x03
    24fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2500:	86 81       	ldd	r24, Z+6	; 0x06
    2502:	88 2f       	mov	r24, r24
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	82 2b       	or	r24, r18
    2514:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->DataBits)<<UCSZ0);
    2516:	a0 e4       	ldi	r26, 0x40	; 64
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e0 e4       	ldi	r30, 0x40	; 64
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	28 2f       	mov	r18, r24
    2522:	29 7f       	andi	r18, 0xF9	; 249
    2524:	eb 81       	ldd	r30, Y+3	; 0x03
    2526:	fc 81       	ldd	r31, Y+4	; 0x04
    2528:	84 81       	ldd	r24, Z+4	; 0x04
    252a:	88 2f       	mov	r24, r24
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	82 2b       	or	r24, r18
    2534:	8c 93       	st	X, r24

	/* URSEL = 0 to write on UBRRH shared register*/
	CLEAR_BIT(UBRRH,URSEL);
    2536:	a0 e4       	ldi	r26, 0x40	; 64
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e0 e4       	ldi	r30, 0x40	; 64
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	8f 77       	andi	r24, 0x7F	; 127
    2542:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	uint16 Baudrate_value = (uint16)(((F_CPU/((Config_Ptr->BaudRate) * 8UL)))-1);
    2544:	eb 81       	ldd	r30, Y+3	; 0x03
    2546:	fc 81       	ldd	r31, Y+4	; 0x04
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	a2 81       	ldd	r26, Z+2	; 0x02
    254e:	b3 81       	ldd	r27, Z+3	; 0x03
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	aa 1f       	adc	r26, r26
    2556:	bb 1f       	adc	r27, r27
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	aa 1f       	adc	r26, r26
    255e:	bb 1f       	adc	r27, r27
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	aa 1f       	adc	r26, r26
    2566:	bb 1f       	adc	r27, r27
    2568:	9c 01       	movw	r18, r24
    256a:	ad 01       	movw	r20, r26
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	92 e1       	ldi	r25, 0x12	; 18
    2570:	aa e7       	ldi	r26, 0x7A	; 122
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 67 13 	call	0x26ce	; 0x26ce <__udivmodsi4>
    257c:	da 01       	movw	r26, r20
    257e:	c9 01       	movw	r24, r18
    2580:	01 97       	sbiw	r24, 0x01	; 1
    2582:	9a 83       	std	Y+2, r25	; 0x02
    2584:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (Baudrate_value>>8);
    2586:	e0 e4       	ldi	r30, 0x40	; 64
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	89 2f       	mov	r24, r25
    2590:	99 27       	eor	r25, r25
    2592:	80 83       	st	Z, r24
	UBRRL = Baudrate_value;
    2594:	e9 e2       	ldi	r30, 0x29	; 41
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	80 83       	st	Z, r24

}
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	0f 92       	push	r0
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE)){}
    25b6:	eb e2       	ldi	r30, 0x2B	; 43
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	80 72       	andi	r24, 0x20	; 32
    25c2:	90 70       	andi	r25, 0x00	; 0
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	b9 f3       	breq	.-18     	; 0x25b6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    25c8:	ec e2       	ldi	r30, 0x2C	; 44
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA,RXC)){}
    25e0:	eb e2       	ldi	r30, 0x2B	; 43
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	88 23       	and	r24, r24
    25e8:	dc f7       	brge	.-10     	; 0x25e0 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    25ea:	ec e2       	ldi	r30, 0x2C	; 44
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
}
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <UART_sendString+0x6>
    25fc:	0f 92       	push	r0
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	9b 83       	std	Y+3, r25	; 0x03
    2604:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2606:	19 82       	std	Y+1, r1	; 0x01
    2608:	0e c0       	rjmp	.+28     	; 0x2626 <UART_sendString+0x30>
	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	fc 01       	movw	r30, r24
    2616:	e2 0f       	add	r30, r18
    2618:	f3 1f       	adc	r31, r19
    261a:	80 81       	ld	r24, Z
    261c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <UART_sendByte>
		i++;
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	/* Send the whole string */
	while(Str[i] != '\0')
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	9b 81       	ldd	r25, Y+3	; 0x03
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	80 81       	ld	r24, Z
    2638:	88 23       	and	r24, r24
    263a:	39 f7       	brne	.-50     	; 0x260a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <UART_receiveString+0xa>
    2652:	0f 92       	push	r0
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	9b 83       	std	Y+3, r25	; 0x03
    265a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    265c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	8c 01       	movw	r16, r24
    266a:	02 0f       	add	r16, r18
    266c:	13 1f       	adc	r17, r19
    266e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
    2672:	f8 01       	movw	r30, r16
    2674:	80 83       	st	Z, r24
    2676:	0f c0       	rjmp	.+30     	; 0x2696 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	9b 81       	ldd	r25, Y+3	; 0x03
    2688:	8c 01       	movw	r16, r24
    268a:	02 0f       	add	r16, r18
    268c:	13 1f       	adc	r17, r19
    268e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <UART_receiveByte>
    2692:	f8 01       	movw	r30, r16
    2694:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	fc 01       	movw	r30, r24
    26a2:	e2 0f       	add	r30, r18
    26a4:	f3 1f       	adc	r31, r19
    26a6:	80 81       	ld	r24, Z
    26a8:	83 32       	cpi	r24, 0x23	; 35
    26aa:	31 f7       	brne	.-52     	; 0x2678 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	fc 01       	movw	r30, r24
    26b8:	e2 0f       	add	r30, r18
    26ba:	f3 1f       	adc	r31, r19
    26bc:	10 82       	st	Z, r1
}
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	08 95       	ret

000026ce <__udivmodsi4>:
    26ce:	a1 e2       	ldi	r26, 0x21	; 33
    26d0:	1a 2e       	mov	r1, r26
    26d2:	aa 1b       	sub	r26, r26
    26d4:	bb 1b       	sub	r27, r27
    26d6:	fd 01       	movw	r30, r26
    26d8:	0d c0       	rjmp	.+26     	; 0x26f4 <__udivmodsi4_ep>

000026da <__udivmodsi4_loop>:
    26da:	aa 1f       	adc	r26, r26
    26dc:	bb 1f       	adc	r27, r27
    26de:	ee 1f       	adc	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	a2 17       	cp	r26, r18
    26e4:	b3 07       	cpc	r27, r19
    26e6:	e4 07       	cpc	r30, r20
    26e8:	f5 07       	cpc	r31, r21
    26ea:	20 f0       	brcs	.+8      	; 0x26f4 <__udivmodsi4_ep>
    26ec:	a2 1b       	sub	r26, r18
    26ee:	b3 0b       	sbc	r27, r19
    26f0:	e4 0b       	sbc	r30, r20
    26f2:	f5 0b       	sbc	r31, r21

000026f4 <__udivmodsi4_ep>:
    26f4:	66 1f       	adc	r22, r22
    26f6:	77 1f       	adc	r23, r23
    26f8:	88 1f       	adc	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	1a 94       	dec	r1
    26fe:	69 f7       	brne	.-38     	; 0x26da <__udivmodsi4_loop>
    2700:	60 95       	com	r22
    2702:	70 95       	com	r23
    2704:	80 95       	com	r24
    2706:	90 95       	com	r25
    2708:	9b 01       	movw	r18, r22
    270a:	ac 01       	movw	r20, r24
    270c:	bd 01       	movw	r22, r26
    270e:	cf 01       	movw	r24, r30
    2710:	08 95       	ret

00002712 <__prologue_saves__>:
    2712:	2f 92       	push	r2
    2714:	3f 92       	push	r3
    2716:	4f 92       	push	r4
    2718:	5f 92       	push	r5
    271a:	6f 92       	push	r6
    271c:	7f 92       	push	r7
    271e:	8f 92       	push	r8
    2720:	9f 92       	push	r9
    2722:	af 92       	push	r10
    2724:	bf 92       	push	r11
    2726:	cf 92       	push	r12
    2728:	df 92       	push	r13
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	ca 1b       	sub	r28, r26
    273c:	db 0b       	sbc	r29, r27
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	09 94       	ijmp

0000274a <__epilogue_restores__>:
    274a:	2a 88       	ldd	r2, Y+18	; 0x12
    274c:	39 88       	ldd	r3, Y+17	; 0x11
    274e:	48 88       	ldd	r4, Y+16	; 0x10
    2750:	5f 84       	ldd	r5, Y+15	; 0x0f
    2752:	6e 84       	ldd	r6, Y+14	; 0x0e
    2754:	7d 84       	ldd	r7, Y+13	; 0x0d
    2756:	8c 84       	ldd	r8, Y+12	; 0x0c
    2758:	9b 84       	ldd	r9, Y+11	; 0x0b
    275a:	aa 84       	ldd	r10, Y+10	; 0x0a
    275c:	b9 84       	ldd	r11, Y+9	; 0x09
    275e:	c8 84       	ldd	r12, Y+8	; 0x08
    2760:	df 80       	ldd	r13, Y+7	; 0x07
    2762:	ee 80       	ldd	r14, Y+6	; 0x06
    2764:	fd 80       	ldd	r15, Y+5	; 0x05
    2766:	0c 81       	ldd	r16, Y+4	; 0x04
    2768:	1b 81       	ldd	r17, Y+3	; 0x03
    276a:	aa 81       	ldd	r26, Y+2	; 0x02
    276c:	b9 81       	ldd	r27, Y+1	; 0x01
    276e:	ce 0f       	add	r28, r30
    2770:	d1 1d       	adc	r29, r1
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	ed 01       	movw	r28, r26
    277e:	08 95       	ret

00002780 <itoa>:
    2780:	fb 01       	movw	r30, r22
    2782:	9f 01       	movw	r18, r30
    2784:	e8 94       	clt
    2786:	42 30       	cpi	r20, 0x02	; 2
    2788:	c4 f0       	brlt	.+48     	; 0x27ba <itoa+0x3a>
    278a:	45 32       	cpi	r20, 0x25	; 37
    278c:	b4 f4       	brge	.+44     	; 0x27ba <itoa+0x3a>
    278e:	4a 30       	cpi	r20, 0x0A	; 10
    2790:	29 f4       	brne	.+10     	; 0x279c <itoa+0x1c>
    2792:	97 fb       	bst	r25, 7
    2794:	1e f4       	brtc	.+6      	; 0x279c <itoa+0x1c>
    2796:	90 95       	com	r25
    2798:	81 95       	neg	r24
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	64 2f       	mov	r22, r20
    279e:	77 27       	eor	r23, r23
    27a0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__udivmodhi4>
    27a4:	80 5d       	subi	r24, 0xD0	; 208
    27a6:	8a 33       	cpi	r24, 0x3A	; 58
    27a8:	0c f0       	brlt	.+2      	; 0x27ac <itoa+0x2c>
    27aa:	89 5d       	subi	r24, 0xD9	; 217
    27ac:	81 93       	st	Z+, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	a1 f7       	brne	.-24     	; 0x279c <itoa+0x1c>
    27b4:	16 f4       	brtc	.+4      	; 0x27ba <itoa+0x3a>
    27b6:	5d e2       	ldi	r21, 0x2D	; 45
    27b8:	51 93       	st	Z+, r21
    27ba:	10 82       	st	Z, r1
    27bc:	c9 01       	movw	r24, r18
    27be:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <strrev>

000027c2 <strrev>:
    27c2:	dc 01       	movw	r26, r24
    27c4:	fc 01       	movw	r30, r24
    27c6:	67 2f       	mov	r22, r23
    27c8:	71 91       	ld	r23, Z+
    27ca:	77 23       	and	r23, r23
    27cc:	e1 f7       	brne	.-8      	; 0x27c6 <strrev+0x4>
    27ce:	32 97       	sbiw	r30, 0x02	; 2
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <strrev+0x18>
    27d2:	7c 91       	ld	r23, X
    27d4:	6d 93       	st	X+, r22
    27d6:	70 83       	st	Z, r23
    27d8:	62 91       	ld	r22, -Z
    27da:	ae 17       	cp	r26, r30
    27dc:	bf 07       	cpc	r27, r31
    27de:	c8 f3       	brcs	.-14     	; 0x27d2 <strrev+0x10>
    27e0:	08 95       	ret

000027e2 <__udivmodhi4>:
    27e2:	aa 1b       	sub	r26, r26
    27e4:	bb 1b       	sub	r27, r27
    27e6:	51 e1       	ldi	r21, 0x11	; 17
    27e8:	07 c0       	rjmp	.+14     	; 0x27f8 <__udivmodhi4_ep>

000027ea <__udivmodhi4_loop>:
    27ea:	aa 1f       	adc	r26, r26
    27ec:	bb 1f       	adc	r27, r27
    27ee:	a6 17       	cp	r26, r22
    27f0:	b7 07       	cpc	r27, r23
    27f2:	10 f0       	brcs	.+4      	; 0x27f8 <__udivmodhi4_ep>
    27f4:	a6 1b       	sub	r26, r22
    27f6:	b7 0b       	sbc	r27, r23

000027f8 <__udivmodhi4_ep>:
    27f8:	88 1f       	adc	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	5a 95       	dec	r21
    27fe:	a9 f7       	brne	.-22     	; 0x27ea <__udivmodhi4_loop>
    2800:	80 95       	com	r24
    2802:	90 95       	com	r25
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	08 95       	ret

0000280a <_exit>:
    280a:	f8 94       	cli

0000280c <__stop_program>:
    280c:	ff cf       	rjmp	.-2      	; 0x280c <__stop_program>

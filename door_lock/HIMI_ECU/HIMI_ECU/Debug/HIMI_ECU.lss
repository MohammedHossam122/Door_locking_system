
HIMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  000036f8  0000378c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800150  00800150  0000387c  2**0
                  ALLOC
  3 .stab         00003528  00000000  00000000  0000387c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001710  00000000  00000000  00006da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000084b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000085f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008764  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c048  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c435  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 7a 17 	jmp	0x2ef4	; 0x2ef4 <__vector_4>
      14:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__vector_7>
      20:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__vector_8>
      24:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__vector_9>
      28:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__vector_10>
      2c:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 35       	cpi	r26, 0x5A	; 90
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e4       	ldi	r26, 0x46	; 70
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e4       	ldi	r24, 0x46	; 70
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Main function that initializes the LCD, Timer, UART and waits for other MCU to be ready
 *------------------------------------------------------------------------------------------------------*/
int main (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* LCD Initialization on PORTB */
	LCD_init();
     b5a:	0e 94 99 11 	call	0x2332	; 0x2332 <LCD_init>
	 * time per cycle = 8MHz / 1024 = 128uS
	 * Cycles for 15 seconds = 15 / 0.000128 = 117,188 cycles
	 * 117,188 / 2 = 58594 (On two Cycles with compare mode)
	 */
	Timer_ConfigType Timer1;
	Timer1.Compare_value = 58594;
     b5e:	82 ee       	ldi	r24, 0xE2	; 226
     b60:	94 ee       	ldi	r25, 0xE4	; 228
     b62:	9d 83       	std	Y+5, r25	; 0x05
     b64:	8c 83       	std	Y+4, r24	; 0x04
	Timer1.Start_value = 0;
     b66:	1b 82       	std	Y+3, r1	; 0x03
     b68:	1a 82       	std	Y+2, r1	; 0x02
	Timer1.Timer_Source = TIMER1_PRESCALAR_1024;
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	88 87       	std	Y+8, r24	; 0x08
	Timer1.Timer_mode = TIMER_COMPARE_MODE;
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	8f 83       	std	Y+7, r24	; 0x07
	Timer1.Timerx_ID = TIMER1_ID;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	8e 83       	std	Y+6, r24	; 0x06
	 * 2- Data Bits : 8
	 * 3- Parity	: Disable
	 * 4- Stop Bits : 1
	 */
	UART_ConfigType UART_Config;
	UART_Config.BaudRate = Baud_9600;
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	95 e2       	ldi	r25, 0x25	; 37
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	8a 87       	std	Y+10, r24	; 0x0a
     b80:	9b 87       	std	Y+11, r25	; 0x0b
     b82:	ac 87       	std	Y+12, r26	; 0x0c
     b84:	bd 87       	std	Y+13, r27	; 0x0d
	UART_Config.DataBits = Data_8;
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	8e 87       	std	Y+14, r24	; 0x0e
	UART_Config.ParityMode = Parity_Disable;
     b8a:	1f 86       	std	Y+15, r1	; 0x0f
	UART_Config.StopBits = StopBits_1;
     b8c:	18 8a       	std	Y+16, r1	; 0x10
	UART_init(&UART_Config);
     b8e:	ce 01       	movw	r24, r28
     b90:	0a 96       	adiw	r24, 0x0a	; 10
     b92:	0e 94 b4 19 	call	0x3368	; 0x3368 <UART_init>

	/*	Waits Until the other MCU is ready to communicate */
	UART_sendByte(HMI_ECU_READY);
     b96:	81 e1       	ldi	r24, 0x11	; 17
     b98:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
	while(UART_receiveByte() != CONTROL_ECU_READY){}
     b9c:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
     ba0:	80 31       	cpi	r24, 0x10	; 16
     ba2:	e1 f7       	brne	.-8      	; 0xb9c <main+0x56>

	uint8 mainOptionKey = 0;									/* Variable that holds the mode '+' or '-' */
     ba4:	19 82       	std	Y+1, r1	; 0x01

	SREG |= (1<<7);												/* Enables I-bit for timer */
     ba6:	af e5       	ldi	r26, 0x5F	; 95
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ef e5       	ldi	r30, 0x5F	; 95
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	8c 93       	st	X, r24

	/*******************************************SUPER LOOP*******************************************/
	for(;;)
	{
		/* Checks flag if it is the first time to use the system */
		if(g_FirstTime_flag == 0)
     bb4:	80 91 53 01 	lds	r24, 0x0153
     bb8:	88 23       	and	r24, r24
     bba:	89 f4       	brne	.+34     	; 0xbde <main+0x98>
     bbc:	0c c0       	rjmp	.+24     	; 0xbd6 <main+0x90>
		{
			/* Keeps entering new password until it matches first and second time */
			while(pass_matching == PASS_UNMATCH)
			{
				pass_Enter_1();
     bbe:	0e 94 05 06 	call	0xc0a	; 0xc0a <pass_Enter_1>
				pass_Enter_2();
     bc2:	0e 94 26 07 	call	0xe4c	; 0xe4c <pass_Enter_2>
				pass_matching = UART_receiveByte();
     bc6:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
     bca:	80 93 4e 01 	sts	0x014E, r24
				pass_status(pass_matching);
     bce:	80 91 4e 01 	lds	r24, 0x014E
     bd2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <pass_status>
	{
		/* Checks flag if it is the first time to use the system */
		if(g_FirstTime_flag == 0)
		{
			/* Keeps entering new password until it matches first and second time */
			while(pass_matching == PASS_UNMATCH)
     bd6:	80 91 4e 01 	lds	r24, 0x014E
     bda:	83 31       	cpi	r24, 0x13	; 19
     bdc:	81 f3       	breq	.-32     	; 0xbbe <main+0x78>
				pass_status(pass_matching);
			}
		}


		g_FirstTime_flag = 1;									/* Sets first time use flag to 1 to not enter again */
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 53 01 	sts	0x0153, r24

		/* Variable that holds the mode '+' or '-' */
		mainOptionKey = main_options();
     be4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <main_options>
     be8:	89 83       	std	Y+1, r24	; 0x01
		if(mainOptionKey == '-')								/* Open Door mode */
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	8d 32       	cpi	r24, 0x2D	; 45
     bee:	29 f4       	brne	.+10     	; 0xbfa <main+0xb4>
		{
			openDoorMatch(&Timer1);
     bf0:	ce 01       	movw	r24, r28
     bf2:	02 96       	adiw	r24, 0x02	; 2
     bf4:	0e 94 43 0a 	call	0x1486	; 0x1486 <openDoorMatch>
     bf8:	dd cf       	rjmp	.-70     	; 0xbb4 <main+0x6e>
		}
		else if(mainOptionKey == '+')							/* Change Password mode */
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	8b 32       	cpi	r24, 0x2B	; 43
     bfe:	d1 f6       	brne	.-76     	; 0xbb4 <main+0x6e>
		{
			changePassword(&Timer1);
     c00:	ce 01       	movw	r24, r28
     c02:	02 96       	adiw	r24, 0x02	; 2
     c04:	0e 94 14 0c 	call	0x1828	; 0x1828 <changePassword>
     c08:	d5 cf       	rjmp	.-86     	; 0xbb4 <main+0x6e>

00000c0a <pass_Enter_1>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the keys pressed for first entry
 *------------------------------------------------------------------------------------------------------*/
void pass_Enter_1(void)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	6d 97       	sbiw	r28, 0x1d	; 29
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
     c1e:	20 e6       	ldi	r18, 0x60	; 96
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	a9 01       	movw	r20, r18
     c28:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "                ");
     c2c:	22 e7       	ldi	r18, 0x72	; 114
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	a9 01       	movw	r20, r18
     c36:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_moveCursor>
	uint8 key = 0;
     c42:	1d 8e       	std	Y+29, r1	; 0x1d
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a6 e9       	ldi	r26, 0x96	; 150
     c4a:	b3 e4       	ldi	r27, 0x43	; 67
     c4c:	89 8f       	std	Y+25, r24	; 0x19
     c4e:	9a 8f       	std	Y+26, r25	; 0x1a
     c50:	ab 8f       	std	Y+27, r26	; 0x1b
     c52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c54:	69 8d       	ldd	r22, Y+25	; 0x19
     c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	4a ef       	ldi	r20, 0xFA	; 250
     c62:	54 e4       	ldi	r21, 0x44	; 68
     c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	8d 8b       	std	Y+21, r24	; 0x15
     c6e:	9e 8b       	std	Y+22, r25	; 0x16
     c70:	af 8b       	std	Y+23, r26	; 0x17
     c72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c74:	6d 89       	ldd	r22, Y+21	; 0x15
     c76:	7e 89       	ldd	r23, Y+22	; 0x16
     c78:	8f 89       	ldd	r24, Y+23	; 0x17
     c7a:	98 8d       	ldd	r25, Y+24	; 0x18
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e8       	ldi	r20, 0x80	; 128
     c82:	5f e3       	ldi	r21, 0x3F	; 63
     c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c88:	88 23       	and	r24, r24
     c8a:	2c f4       	brge	.+10     	; 0xc96 <pass_Enter_1+0x8c>
		__ticks = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9c 8b       	std	Y+20, r25	; 0x14
     c92:	8b 8b       	std	Y+19, r24	; 0x13
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <pass_Enter_1+0x10a>
	else if (__tmp > 65535)
     c96:	6d 89       	ldd	r22, Y+21	; 0x15
     c98:	7e 89       	ldd	r23, Y+22	; 0x16
     c9a:	8f 89       	ldd	r24, Y+23	; 0x17
     c9c:	98 8d       	ldd	r25, Y+24	; 0x18
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	3f ef       	ldi	r19, 0xFF	; 255
     ca2:	4f e7       	ldi	r20, 0x7F	; 127
     ca4:	57 e4       	ldi	r21, 0x47	; 71
     ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     caa:	18 16       	cp	r1, r24
     cac:	4c f5       	brge	.+82     	; 0xd00 <pass_Enter_1+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cae:	69 8d       	ldd	r22, Y+25	; 0x19
     cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e2       	ldi	r20, 0x20	; 32
     cbc:	51 e4       	ldi	r21, 0x41	; 65
     cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	9c 8b       	std	Y+20, r25	; 0x14
     cd4:	8b 8b       	std	Y+19, r24	; 0x13
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <pass_Enter_1+0xec>
     cd8:	88 ec       	ldi	r24, 0xC8	; 200
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9a 8b       	std	Y+18, r25	; 0x12
     cde:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce0:	89 89       	ldd	r24, Y+17	; 0x11
     ce2:	9a 89       	ldd	r25, Y+18	; 0x12
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <pass_Enter_1+0xda>
     ce8:	9a 8b       	std	Y+18, r25	; 0x12
     cea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	9c 8b       	std	Y+20, r25	; 0x14
     cf4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf6:	8b 89       	ldd	r24, Y+19	; 0x13
     cf8:	9c 89       	ldd	r25, Y+20	; 0x14
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	69 f7       	brne	.-38     	; 0xcd8 <pass_Enter_1+0xce>
     cfe:	99 c0       	rjmp	.+306    	; 0xe32 <pass_Enter_1+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d00:	6d 89       	ldd	r22, Y+21	; 0x15
     d02:	7e 89       	ldd	r23, Y+22	; 0x16
     d04:	8f 89       	ldd	r24, Y+23	; 0x17
     d06:	98 8d       	ldd	r25, Y+24	; 0x18
     d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9c 8b       	std	Y+20, r25	; 0x14
     d12:	8b 8b       	std	Y+19, r24	; 0x13
     d14:	8b 89       	ldd	r24, Y+19	; 0x13
     d16:	9c 89       	ldd	r25, Y+20	; 0x14
     d18:	98 8b       	std	Y+16, r25	; 0x10
     d1a:	8f 87       	std	Y+15, r24	; 0x0f
     d1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1e:	98 89       	ldd	r25, Y+16	; 0x10
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <pass_Enter_1+0x116>
     d24:	98 8b       	std	Y+16, r25	; 0x10
     d26:	8f 87       	std	Y+15, r24	; 0x0f
     d28:	84 c0       	rjmp	.+264    	; 0xe32 <pass_Enter_1+0x228>
	_delay_ms(300);
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     d2a:	0e 94 a1 10 	call	0x2142	; 0x2142 <KEYPAD_getPressedKey>
     d2e:	8d 8f       	std	Y+29, r24	; 0x1d
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d32:	8a 30       	cpi	r24, 0x0A	; 10
     d34:	18 f0       	brcs	.+6      	; 0xd3c <pass_Enter_1+0x132>
     d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d38:	8d 33       	cpi	r24, 0x3D	; 61
     d3a:	19 f4       	brne	.+6      	; 0xd42 <pass_Enter_1+0x138>
			UART_sendByte(key);
     d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
		/* Displays (*) each time a key is pressed */
		if(key != '=')
     d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d44:	8d 33       	cpi	r24, 0x3D	; 61
     d46:	19 f0       	breq	.+6      	; 0xd4e <pass_Enter_1+0x144>
		{
			LCD_displayCharacter('*');
     d48:	8a e2       	ldi	r24, 0x2A	; 42
     d4a:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_displayCharacter>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	aa e7       	ldi	r26, 0x7A	; 122
     d54:	b3 e4       	ldi	r27, 0x43	; 67
     d56:	8b 87       	std	Y+11, r24	; 0x0b
     d58:	9c 87       	std	Y+12, r25	; 0x0c
     d5a:	ad 87       	std	Y+13, r26	; 0x0d
     d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a ef       	ldi	r20, 0xFA	; 250
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8f 83       	std	Y+7, r24	; 0x07
     d78:	98 87       	std	Y+8, r25	; 0x08
     d7a:	a9 87       	std	Y+9, r26	; 0x09
     d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <pass_Enter_1+0x196>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <pass_Enter_1+0x214>
	else if (__tmp > 65535)
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <pass_Enter_1+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dba:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <pass_Enter_1+0x1f6>
     de2:	88 ec       	ldi	r24, 0xC8	; 200
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <pass_Enter_1+0x1e4>
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <pass_Enter_1+0x1d8>
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <pass_Enter_1+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <pass_Enter_1+0x220>
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayStringRowColumn(0,0,"Enter New Pass:  ");
	LCD_displayStringRowColumn(1, 0, "                ");
	LCD_moveCursor(1, 0);
	uint8 key = 0;
	_delay_ms(300);
	while(key != '=')
     e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e34:	8d 33       	cpi	r24, 0x3D	; 61
     e36:	09 f0       	breq	.+2      	; 0xe3a <pass_Enter_1+0x230>
     e38:	78 cf       	rjmp	.-272    	; 0xd2a <pass_Enter_1+0x120>
			LCD_displayCharacter('*');
		}
		/* Small delay between each key press  to avoid repetition*/
		_delay_ms(250);
	}
}
     e3a:	6d 96       	adiw	r28, 0x1d	; 29
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <pass_Enter_2>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the keys pressed for second entry
 *------------------------------------------------------------------------------------------------------*/
void pass_Enter_2(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2f 97       	sbiw	r28, 0x0f	; 15
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0;
     e60:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayStringRowColumn(0, 0, "Re-enter Pass:  ");
     e62:	23 e8       	ldi	r18, 0x83	; 131
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	a9 01       	movw	r20, r18
     e6c:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "                ");
     e70:	22 e7       	ldi	r18, 0x72	; 114
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	a9 01       	movw	r20, r18
     e7a:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_moveCursor>
     e86:	84 c0       	rjmp	.+264    	; 0xf90 <pass_Enter_2+0x144>
	while(key != '=')
	{
		/* Waits until keypad is pressed and save number in key variable*/
		key = KEYPAD_getPressedKey();
     e88:	0e 94 a1 10 	call	0x2142	; 0x2142 <KEYPAD_getPressedKey>
     e8c:	8f 87       	std	Y+15, r24	; 0x0f
		/* Sends numbers and the enter key '=' only */
		if( (key>=0 && key<=9) || key == '=')
     e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e90:	8a 30       	cpi	r24, 0x0A	; 10
     e92:	18 f0       	brcs	.+6      	; 0xe9a <pass_Enter_2+0x4e>
     e94:	8f 85       	ldd	r24, Y+15	; 0x0f
     e96:	8d 33       	cpi	r24, 0x3D	; 61
     e98:	19 f4       	brne	.+6      	; 0xea0 <pass_Enter_2+0x54>
			UART_sendByte(key);
     e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
		/* Displays (*) each time a key is pressed */
		if(key != '=')
     ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea2:	8d 33       	cpi	r24, 0x3D	; 61
     ea4:	19 f0       	breq	.+6      	; 0xeac <pass_Enter_2+0x60>
			LCD_displayCharacter('*');
     ea6:	8a e2       	ldi	r24, 0x2A	; 42
     ea8:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_displayCharacter>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	aa e7       	ldi	r26, 0x7A	; 122
     eb2:	b3 e4       	ldi	r27, 0x43	; 67
     eb4:	8b 87       	std	Y+11, r24	; 0x0b
     eb6:	9c 87       	std	Y+12, r25	; 0x0c
     eb8:	ad 87       	std	Y+13, r26	; 0x0d
     eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a ef       	ldi	r20, 0xFA	; 250
     eca:	54 e4       	ldi	r21, 0x44	; 68
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8f 83       	std	Y+7, r24	; 0x07
     ed6:	98 87       	std	Y+8, r25	; 0x08
     ed8:	a9 87       	std	Y+9, r26	; 0x09
     eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     edc:	6f 81       	ldd	r22, Y+7	; 0x07
     ede:	78 85       	ldd	r23, Y+8	; 0x08
     ee0:	89 85       	ldd	r24, Y+9	; 0x09
     ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	2c f4       	brge	.+10     	; 0xefe <pass_Enter_2+0xb2>
		__ticks = 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <pass_Enter_2+0x130>
	else if (__tmp > 65535)
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	4f e7       	ldi	r20, 0x7F	; 127
     f0c:	57 e4       	ldi	r21, 0x47	; 71
     f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f12:	18 16       	cp	r1, r24
     f14:	4c f5       	brge	.+82     	; 0xf68 <pass_Enter_2+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f16:	6b 85       	ldd	r22, Y+11	; 0x0b
     f18:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	0f c0       	rjmp	.+30     	; 0xf5e <pass_Enter_2+0x112>
     f40:	88 ec       	ldi	r24, 0xC8	; 200
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9c 83       	std	Y+4, r25	; 0x04
     f46:	8b 83       	std	Y+3, r24	; 0x03
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <pass_Enter_2+0x100>
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9e 83       	std	Y+6, r25	; 0x06
     f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	69 f7       	brne	.-38     	; 0xf40 <pass_Enter_2+0xf4>
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <pass_Enter_2+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <pass_Enter_2+0x13c>
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 key = 0;
	LCD_displayStringRowColumn(0, 0, "Re-enter Pass:  ");
	LCD_displayStringRowColumn(1, 0, "                ");
	LCD_moveCursor(1, 0);
	while(key != '=')
     f90:	8f 85       	ldd	r24, Y+15	; 0x0f
     f92:	8d 33       	cpi	r24, 0x3D	; 61
     f94:	09 f0       	breq	.+2      	; 0xf98 <pass_Enter_2+0x14c>
     f96:	78 cf       	rjmp	.-272    	; 0xe88 <pass_Enter_2+0x3c>
		if(key != '=')
			LCD_displayCharacter('*');
		/* Small delay between each key press  to avoid repetition*/
		_delay_ms(250);
	}
}
     f98:	2f 96       	adiw	r28, 0x0f	; 15
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <pass_status>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays if two entries matched or no, if yes displays Saving password
 *------------------------------------------------------------------------------------------------------*/
uint8 pass_status(uint8 status)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	6e 97       	sbiw	r28, 0x1e	; 30
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	8d 8f       	std	Y+29, r24	; 0x1d
	/* If password doesn't match displays Wrong password on LCD for 1 second and return UNMATCH */
	if(status == PASS_UNMATCH)
     fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc2:	83 31       	cpi	r24, 0x13	; 19
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <pass_status+0x1e>
     fc6:	7b c0       	rjmp	.+246    	; 0x10be <pass_status+0x114>
	{
		LCD_clearScreen();
     fc8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
		LCD_displayString("WRONG PASS!");
     fcc:	84 e9       	ldi	r24, 0x94	; 148
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	aa e7       	ldi	r26, 0x7A	; 122
     fda:	b4 e4       	ldi	r27, 0x44	; 68
     fdc:	89 8f       	std	Y+25, r24	; 0x19
     fde:	9a 8f       	std	Y+26, r25	; 0x1a
     fe0:	ab 8f       	std	Y+27, r26	; 0x1b
     fe2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	69 8d       	ldd	r22, Y+25	; 0x19
     fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	8d 8b       	std	Y+21, r24	; 0x15
     ffe:	9e 8b       	std	Y+22, r25	; 0x16
    1000:	af 8b       	std	Y+23, r26	; 0x17
    1002:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1004:	6d 89       	ldd	r22, Y+21	; 0x15
    1006:	7e 89       	ldd	r23, Y+22	; 0x16
    1008:	8f 89       	ldd	r24, Y+23	; 0x17
    100a:	98 8d       	ldd	r25, Y+24	; 0x18
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <pass_status+0x7c>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9c 8b       	std	Y+20, r25	; 0x14
    1022:	8b 8b       	std	Y+19, r24	; 0x13
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <pass_status+0xfa>
	else if (__tmp > 65535)
    1026:	6d 89       	ldd	r22, Y+21	; 0x15
    1028:	7e 89       	ldd	r23, Y+22	; 0x16
    102a:	8f 89       	ldd	r24, Y+23	; 0x17
    102c:	98 8d       	ldd	r25, Y+24	; 0x18
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <pass_status+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	69 8d       	ldd	r22, Y+25	; 0x19
    1040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <pass_status+0xdc>
    1068:	88 ec       	ldi	r24, 0xC8	; 200
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9a 8b       	std	Y+18, r25	; 0x12
    106e:	89 8b       	std	Y+17, r24	; 0x11
    1070:	89 89       	ldd	r24, Y+17	; 0x11
    1072:	9a 89       	ldd	r25, Y+18	; 0x12
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <pass_status+0xca>
    1078:	9a 8b       	std	Y+18, r25	; 0x12
    107a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8b 89       	ldd	r24, Y+19	; 0x13
    107e:	9c 89       	ldd	r25, Y+20	; 0x14
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	9c 8b       	std	Y+20, r25	; 0x14
    1084:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8b 89       	ldd	r24, Y+19	; 0x13
    1088:	9c 89       	ldd	r25, Y+20	; 0x14
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <pass_status+0xbe>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <pass_status+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	6d 89       	ldd	r22, Y+21	; 0x15
    1092:	7e 89       	ldd	r23, Y+22	; 0x16
    1094:	8f 89       	ldd	r24, Y+23	; 0x17
    1096:	98 8d       	ldd	r25, Y+24	; 0x18
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9c 8b       	std	Y+20, r25	; 0x14
    10a2:	8b 8b       	std	Y+19, r24	; 0x13
    10a4:	8b 89       	ldd	r24, Y+19	; 0x13
    10a6:	9c 89       	ldd	r25, Y+20	; 0x14
    10a8:	98 8b       	std	Y+16, r25	; 0x10
    10aa:	8f 87       	std	Y+15, r24	; 0x0f
    10ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ae:	98 89       	ldd	r25, Y+16	; 0x10
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <pass_status+0x106>
    10b4:	98 8b       	std	Y+16, r25	; 0x10
    10b6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		return PASS_UNMATCH;
    10b8:	83 e1       	ldi	r24, 0x13	; 19
    10ba:	8e 8f       	std	Y+30, r24	; 0x1e
    10bc:	8a c0       	rjmp	.+276    	; 0x11d2 <pass_status+0x228>
	}
	/* If password match displays Correct password and Saving Pass on LCD for 1 second and return MATCH */
	else if(status == PASS_MATCH)
    10be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c0:	82 31       	cpi	r24, 0x12	; 18
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <pass_status+0x11c>
    10c4:	84 c0       	rjmp	.+264    	; 0x11ce <pass_status+0x224>
	{
		LCD_clearScreen();
    10c6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
		LCD_displayString("CORRECT PASS");
    10ca:	80 ea       	ldi	r24, 0xA0	; 160
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "Saving Pass");
    10d2:	2d ea       	ldi	r18, 0xAD	; 173
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	a9 01       	movw	r20, r18
    10dc:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	aa e7       	ldi	r26, 0x7A	; 122
    10e6:	b4 e4       	ldi	r27, 0x44	; 68
    10e8:	8b 87       	std	Y+11, r24	; 0x0b
    10ea:	9c 87       	std	Y+12, r25	; 0x0c
    10ec:	ad 87       	std	Y+13, r26	; 0x0d
    10ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	4a ef       	ldi	r20, 0xFA	; 250
    10fe:	54 e4       	ldi	r21, 0x44	; 68
    1100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	8f 83       	std	Y+7, r24	; 0x07
    110a:	98 87       	std	Y+8, r25	; 0x08
    110c:	a9 87       	std	Y+9, r26	; 0x09
    110e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1124:	88 23       	and	r24, r24
    1126:	2c f4       	brge	.+10     	; 0x1132 <pass_status+0x188>
		__ticks = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	8d 83       	std	Y+5, r24	; 0x05
    1130:	3f c0       	rjmp	.+126    	; 0x11b0 <pass_status+0x206>
	else if (__tmp > 65535)
    1132:	6f 81       	ldd	r22, Y+7	; 0x07
    1134:	78 85       	ldd	r23, Y+8	; 0x08
    1136:	89 85       	ldd	r24, Y+9	; 0x09
    1138:	9a 85       	ldd	r25, Y+10	; 0x0a
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	4f e7       	ldi	r20, 0x7F	; 127
    1140:	57 e4       	ldi	r21, 0x47	; 71
    1142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1146:	18 16       	cp	r1, r24
    1148:	4c f5       	brge	.+82     	; 0x119c <pass_status+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114a:	6b 85       	ldd	r22, Y+11	; 0x0b
    114c:	7c 85       	ldd	r23, Y+12	; 0x0c
    114e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1150:	9e 85       	ldd	r25, Y+14	; 0x0e
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <pass_status+0x1e8>
    1174:	88 ec       	ldi	r24, 0xC8	; 200
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <pass_status+0x1d6>
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	69 f7       	brne	.-38     	; 0x1174 <pass_status+0x1ca>
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <pass_status+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9e 83       	std	Y+6, r25	; 0x06
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <pass_status+0x212>
    11c0:	9a 83       	std	Y+2, r25	; 0x02
    11c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    11c4:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
		return PASS_MATCH;
    11c8:	82 e1       	ldi	r24, 0x12	; 18
    11ca:	8e 8f       	std	Y+30, r24	; 0x1e
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <pass_status+0x228>
	}
	return PASS_UNMATCH;
    11ce:	83 e1       	ldi	r24, 0x13	; 19
    11d0:	8e 8f       	std	Y+30, r24	; 0x1e
    11d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    11d4:	6e 96       	adiw	r28, 0x1e	; 30
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <main_options>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays the main options to select from and keeps looping if
 * a non available option is pressed
 *------------------------------------------------------------------------------------------------------*/
uint8 main_options(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <main_options+0x6>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	uint8 key = 0;
    11f0:	19 82       	std	Y+1, r1	; 0x01
	/* Displays the main options on LCD */
	LCD_clearScreen();
    11f2:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	LCD_displayString("+ : Change PASS ");
    11f6:	89 eb       	ldi	r24, 0xB9	; 185
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "- : Open Door   ");
    11fe:	2a ec       	ldi	r18, 0xCA	; 202
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
    120c:	0f c0       	rjmp	.+30     	; 0x122c <main_options+0x46>
	/* Keeps waiting until an available key is pressed */
	while(key != '+' || key!= '-')
	{
		/* Waits until keypad is pressed and save option in key variable*/
		key = KEYPAD_getPressedKey();
    120e:	0e 94 a1 10 	call	0x2142	; 0x2142 <KEYPAD_getPressedKey>
    1212:	89 83       	std	Y+1, r24	; 0x01
		/* Send key to Control ECU if only available option is pressed*/
		if(key == '+' || key == '-')
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	8b 32       	cpi	r24, 0x2B	; 43
    1218:	19 f0       	breq	.+6      	; 0x1220 <main_options+0x3a>
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	8d 32       	cpi	r24, 0x2D	; 45
    121e:	31 f4       	brne	.+12     	; 0x122c <main_options+0x46>
		{
			UART_sendByte(key);
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
			return key;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	08 c0       	rjmp	.+16     	; 0x123c <main_options+0x56>
	/* Displays the main options on LCD */
	LCD_clearScreen();
	LCD_displayString("+ : Change PASS ");
	LCD_displayStringRowColumn(1, 0, "- : Open Door   ");
	/* Keeps waiting until an available key is pressed */
	while(key != '+' || key!= '-')
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	8b 32       	cpi	r24, 0x2B	; 43
    1230:	71 f7       	brne	.-36     	; 0x120e <main_options+0x28>
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	8d 32       	cpi	r24, 0x2D	; 45
    1236:	59 f7       	brne	.-42     	; 0x120e <main_options+0x28>
		{
			UART_sendByte(key);
			return key;
		}
	}
	return key;
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <send_password>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]: Function that displays Enter password for checking password entry
 *------------------------------------------------------------------------------------------------------*/
void send_password(void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	6d 97       	sbiw	r28, 0x1d	; 29
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0;
    125c:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Displays Enter PASS on LCD and and sends password with UART to Control ECU*/
	LCD_clearScreen();
    125e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
	LCD_displayString("Enter PASS");
    1262:	8b ed       	ldi	r24, 0xDB	; 219
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	aa ef       	ldi	r26, 0xFA	; 250
    1270:	b3 e4       	ldi	r27, 0x43	; 67
    1272:	89 8f       	std	Y+25, r24	; 0x19
    1274:	9a 8f       	std	Y+26, r25	; 0x1a
    1276:	ab 8f       	std	Y+27, r26	; 0x1b
    1278:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	69 8d       	ldd	r22, Y+25	; 0x19
    127c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1280:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a ef       	ldi	r20, 0xFA	; 250
    1288:	54 e4       	ldi	r21, 0x44	; 68
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8d 8b       	std	Y+21, r24	; 0x15
    1294:	9e 8b       	std	Y+22, r25	; 0x16
    1296:	af 8b       	std	Y+23, r26	; 0x17
    1298:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    129a:	6d 89       	ldd	r22, Y+21	; 0x15
    129c:	7e 89       	ldd	r23, Y+22	; 0x16
    129e:	8f 89       	ldd	r24, Y+23	; 0x17
    12a0:	98 8d       	ldd	r25, Y+24	; 0x18
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <send_password+0x74>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 8b       	std	Y+20, r25	; 0x14
    12b8:	8b 8b       	std	Y+19, r24	; 0x13
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <send_password+0xf2>
	else if (__tmp > 65535)
    12bc:	6d 89       	ldd	r22, Y+21	; 0x15
    12be:	7e 89       	ldd	r23, Y+22	; 0x16
    12c0:	8f 89       	ldd	r24, Y+23	; 0x17
    12c2:	98 8d       	ldd	r25, Y+24	; 0x18
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <send_password+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	69 8d       	ldd	r22, Y+25	; 0x19
    12d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <send_password+0xd4>
    12fe:	88 ec       	ldi	r24, 0xC8	; 200
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9a 8b       	std	Y+18, r25	; 0x12
    1304:	89 8b       	std	Y+17, r24	; 0x11
    1306:	89 89       	ldd	r24, Y+17	; 0x11
    1308:	9a 89       	ldd	r25, Y+18	; 0x12
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <send_password+0xc2>
    130e:	9a 8b       	std	Y+18, r25	; 0x12
    1310:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	8b 89       	ldd	r24, Y+19	; 0x13
    1314:	9c 89       	ldd	r25, Y+20	; 0x14
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9c 8b       	std	Y+20, r25	; 0x14
    131a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	8b 89       	ldd	r24, Y+19	; 0x13
    131e:	9c 89       	ldd	r25, Y+20	; 0x14
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <send_password+0xb6>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <send_password+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9c 8b       	std	Y+20, r25	; 0x14
    1338:	8b 8b       	std	Y+19, r24	; 0x13
    133a:	8b 89       	ldd	r24, Y+19	; 0x13
    133c:	9c 89       	ldd	r25, Y+20	; 0x14
    133e:	98 8b       	std	Y+16, r25	; 0x10
    1340:	8f 87       	std	Y+15, r24	; 0x0f
    1342:	8f 85       	ldd	r24, Y+15	; 0x0f
    1344:	98 89       	ldd	r25, Y+16	; 0x10
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <send_password+0xfe>
    134a:	98 8b       	std	Y+16, r25	; 0x10
    134c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_moveCursor(1, 0);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_moveCursor>
    1356:	84 c0       	rjmp	.+264    	; 0x1460 <send_password+0x218>
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
	{
		key = KEYPAD_getPressedKey();
    1358:	0e 94 a1 10 	call	0x2142	; 0x2142 <KEYPAD_getPressedKey>
    135c:	8d 8f       	std	Y+29, r24	; 0x1d
		/* Only sends available password keys from 0 to 9 or = to act as password end */
		if( (key>=0 && key<=9) || key == '=')
    135e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1360:	8a 30       	cpi	r24, 0x0A	; 10
    1362:	18 f0       	brcs	.+6      	; 0x136a <send_password+0x122>
    1364:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1366:	8d 33       	cpi	r24, 0x3D	; 61
    1368:	19 f4       	brne	.+6      	; 0x1370 <send_password+0x128>
			UART_sendByte(key);
    136a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
		/* Displays (*) if numbers are pressed as indicator that they are pressed successfully */
		if(key != '=')
    1370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1372:	8d 33       	cpi	r24, 0x3D	; 61
    1374:	19 f0       	breq	.+6      	; 0x137c <send_password+0x134>
		{
			LCD_displayCharacter('*');
    1376:	8a e2       	ldi	r24, 0x2A	; 42
    1378:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_displayCharacter>
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	aa e7       	ldi	r26, 0x7A	; 122
    1382:	b3 e4       	ldi	r27, 0x43	; 67
    1384:	8b 87       	std	Y+11, r24	; 0x0b
    1386:	9c 87       	std	Y+12, r25	; 0x0c
    1388:	ad 87       	std	Y+13, r26	; 0x0d
    138a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138c:	6b 85       	ldd	r22, Y+11	; 0x0b
    138e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1390:	8d 85       	ldd	r24, Y+13	; 0x0d
    1392:	9e 85       	ldd	r25, Y+14	; 0x0e
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	4a ef       	ldi	r20, 0xFA	; 250
    139a:	54 e4       	ldi	r21, 0x44	; 68
    139c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	8f 83       	std	Y+7, r24	; 0x07
    13a6:	98 87       	std	Y+8, r25	; 0x08
    13a8:	a9 87       	std	Y+9, r26	; 0x09
    13aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ac:	6f 81       	ldd	r22, Y+7	; 0x07
    13ae:	78 85       	ldd	r23, Y+8	; 0x08
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e8       	ldi	r20, 0x80	; 128
    13ba:	5f e3       	ldi	r21, 0x3F	; 63
    13bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c0:	88 23       	and	r24, r24
    13c2:	2c f4       	brge	.+10     	; 0x13ce <send_password+0x186>
		__ticks = 1;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9e 83       	std	Y+6, r25	; 0x06
    13ca:	8d 83       	std	Y+5, r24	; 0x05
    13cc:	3f c0       	rjmp	.+126    	; 0x144c <send_password+0x204>
	else if (__tmp > 65535)
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	3f ef       	ldi	r19, 0xFF	; 255
    13da:	4f e7       	ldi	r20, 0x7F	; 127
    13dc:	57 e4       	ldi	r21, 0x47	; 71
    13de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e2:	18 16       	cp	r1, r24
    13e4:	4c f5       	brge	.+82     	; 0x1438 <send_password+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e2       	ldi	r20, 0x20	; 32
    13f4:	51 e4       	ldi	r21, 0x41	; 65
    13f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
    140e:	0f c0       	rjmp	.+30     	; 0x142e <send_password+0x1e6>
    1410:	88 ec       	ldi	r24, 0xC8	; 200
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	9c 83       	std	Y+4, r25	; 0x04
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <send_password+0x1d4>
    1420:	9c 83       	std	Y+4, r25	; 0x04
    1422:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	9e 83       	std	Y+6, r25	; 0x06
    142c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	69 f7       	brne	.-38     	; 0x1410 <send_password+0x1c8>
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <send_password+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1438:	6f 81       	ldd	r22, Y+7	; 0x07
    143a:	78 85       	ldd	r23, Y+8	; 0x08
    143c:	89 85       	ldd	r24, Y+9	; 0x09
    143e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <send_password+0x210>
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_displayString("Enter PASS");
	_delay_ms(500);
	LCD_moveCursor(1, 0);
	/* Keeps sending password until enter is pressed or in this case '=' */
	while(key != '=')
    1460:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1462:	8d 33       	cpi	r24, 0x3D	; 61
    1464:	09 f0       	breq	.+2      	; 0x1468 <send_password+0x220>
    1466:	78 cf       	rjmp	.-272    	; 0x1358 <send_password+0x110>
			LCD_displayCharacter('*');
		}
		/* Delay between each key press to avoid repetition */
		_delay_ms(250);
	}
	if(key == '=')
    1468:	8d 8d       	ldd	r24, Y+29	; 0x1d
    146a:	8d 33       	cpi	r24, 0x3D	; 61
    146c:	19 f4       	brne	.+6      	; 0x1474 <send_password+0x22c>
	{
		UART_sendByte(key);
    146e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1470:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
	}
}
    1474:	6d 96       	adiw	r28, 0x1d	; 29
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <openDoorMatch>:
 * [Description]: Function that displays status of the Door if opening or closing (If password matches),
 * and displays Wrong password (If password doesn't match)
 * then displays ALERT (If Maximum trials exceeded)
 *------------------------------------------------------------------------------------------------------*/
void openDoorMatch(Timer_ConfigType *Timer1)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	6e 97       	sbiw	r28, 0x1e	; 30
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	9e 8f       	std	Y+30, r25	; 0x1e
    149c:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Send to Control ECU that HMI is ready */
	UART_sendByte(HMI_ECU_READY);
    149e:	81 e1       	ldi	r24, 0x11	; 17
    14a0:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
	pass_matching = PASS_UNMATCH;
    14a4:	83 e1       	ldi	r24, 0x13	; 19
    14a6:	80 93 4e 01 	sts	0x014E, r24
    14aa:	4a c1       	rjmp	.+660    	; 0x1740 <openDoorMatch+0x2ba>
	/* Keeps looping until password matches */
	while(pass_matching == PASS_UNMATCH)
	{
		send_password();											/* Send password function send to Control ECU */
    14ac:	0e 94 24 09 	call	0x1248	; 0x1248 <send_password>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a6 e9       	ldi	r26, 0x96	; 150
    14b6:	b3 e4       	ldi	r27, 0x43	; 67
    14b8:	89 8f       	std	Y+25, r24	; 0x19
    14ba:	9a 8f       	std	Y+26, r25	; 0x1a
    14bc:	ab 8f       	std	Y+27, r26	; 0x1b
    14be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	69 8d       	ldd	r22, Y+25	; 0x19
    14c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a ef       	ldi	r20, 0xFA	; 250
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8d 8b       	std	Y+21, r24	; 0x15
    14da:	9e 8b       	std	Y+22, r25	; 0x16
    14dc:	af 8b       	std	Y+23, r26	; 0x17
    14de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7e 89       	ldd	r23, Y+22	; 0x16
    14e4:	8f 89       	ldd	r24, Y+23	; 0x17
    14e6:	98 8d       	ldd	r25, Y+24	; 0x18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <openDoorMatch+0x7c>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9c 8b       	std	Y+20, r25	; 0x14
    14fe:	8b 8b       	std	Y+19, r24	; 0x13
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <openDoorMatch+0xfa>
	else if (__tmp > 65535)
    1502:	6d 89       	ldd	r22, Y+21	; 0x15
    1504:	7e 89       	ldd	r23, Y+22	; 0x16
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <openDoorMatch+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	69 8d       	ldd	r22, Y+25	; 0x19
    151c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9c 8b       	std	Y+20, r25	; 0x14
    1540:	8b 8b       	std	Y+19, r24	; 0x13
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <openDoorMatch+0xdc>
    1544:	88 ec       	ldi	r24, 0xC8	; 200
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9a 8b       	std	Y+18, r25	; 0x12
    154a:	89 8b       	std	Y+17, r24	; 0x11
    154c:	89 89       	ldd	r24, Y+17	; 0x11
    154e:	9a 89       	ldd	r25, Y+18	; 0x12
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <openDoorMatch+0xca>
    1554:	9a 8b       	std	Y+18, r25	; 0x12
    1556:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8b 89       	ldd	r24, Y+19	; 0x13
    155a:	9c 89       	ldd	r25, Y+20	; 0x14
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9c 8b       	std	Y+20, r25	; 0x14
    1560:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8b 89       	ldd	r24, Y+19	; 0x13
    1564:	9c 89       	ldd	r25, Y+20	; 0x14
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <openDoorMatch+0xbe>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <openDoorMatch+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6d 89       	ldd	r22, Y+21	; 0x15
    156e:	7e 89       	ldd	r23, Y+22	; 0x16
    1570:	8f 89       	ldd	r24, Y+23	; 0x17
    1572:	98 8d       	ldd	r25, Y+24	; 0x18
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	98 8b       	std	Y+16, r25	; 0x10
    1586:	8f 87       	std	Y+15, r24	; 0x0f
    1588:	8f 85       	ldd	r24, Y+15	; 0x0f
    158a:	98 89       	ldd	r25, Y+16	; 0x10
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <openDoorMatch+0x106>
    1590:	98 8b       	std	Y+16, r25	; 0x10
    1592:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		pass_matching = UART_receiveByte();
    1594:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    1598:	80 93 4e 01 	sts	0x014E, r24

		if(pass_matching == PASS_UNMATCH)
    159c:	80 91 4e 01 	lds	r24, 0x014E
    15a0:	83 31       	cpi	r24, 0x13	; 19
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <openDoorMatch+0x120>
    15a4:	af c0       	rjmp	.+350    	; 0x1704 <openDoorMatch+0x27e>
		{
			/* If password doesn't match decrement the fail times */
			--g_fail_count;
    15a6:	80 91 4f 01 	lds	r24, 0x014F
    15aa:	81 50       	subi	r24, 0x01	; 1
    15ac:	80 93 4f 01 	sts	0x014F, r24
			LCD_clearScreen();
    15b0:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
			/* Displays wrong password and the remaining fail times */
			LCD_displayString("Wrong Password");
    15b4:	86 ee       	ldi	r24, 0xE6	; 230
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Trials Remain: ");
    15bc:	25 ef       	ldi	r18, 0xF5	; 245
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	a9 01       	movw	r20, r18
    15c6:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
			LCD_intgerToString(g_fail_count);
    15ca:	80 91 4f 01 	lds	r24, 0x014F
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_intgerToString>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	aa ef       	ldi	r26, 0xFA	; 250
    15dc:	b4 e4       	ldi	r27, 0x44	; 68
    15de:	8b 87       	std	Y+11, r24	; 0x0b
    15e0:	9c 87       	std	Y+12, r25	; 0x0c
    15e2:	ad 87       	std	Y+13, r26	; 0x0d
    15e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	4a ef       	ldi	r20, 0xFA	; 250
    15f4:	54 e4       	ldi	r21, 0x44	; 68
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8f 83       	std	Y+7, r24	; 0x07
    1600:	98 87       	std	Y+8, r25	; 0x08
    1602:	a9 87       	std	Y+9, r26	; 0x09
    1604:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e8       	ldi	r20, 0x80	; 128
    1614:	5f e3       	ldi	r21, 0x3F	; 63
    1616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161a:	88 23       	and	r24, r24
    161c:	2c f4       	brge	.+10     	; 0x1628 <openDoorMatch+0x1a2>
		__ticks = 1;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <openDoorMatch+0x220>
	else if (__tmp > 65535)
    1628:	6f 81       	ldd	r22, Y+7	; 0x07
    162a:	78 85       	ldd	r23, Y+8	; 0x08
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	4f e7       	ldi	r20, 0x7F	; 127
    1636:	57 e4       	ldi	r21, 0x47	; 71
    1638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163c:	18 16       	cp	r1, r24
    163e:	4c f5       	brge	.+82     	; 0x1692 <openDoorMatch+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1640:	6b 85       	ldd	r22, Y+11	; 0x0b
    1642:	7c 85       	ldd	r23, Y+12	; 0x0c
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e2       	ldi	r20, 0x20	; 32
    164e:	51 e4       	ldi	r21, 0x41	; 65
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
    1668:	0f c0       	rjmp	.+30     	; 0x1688 <openDoorMatch+0x202>
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <openDoorMatch+0x1f0>
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	69 f7       	brne	.-38     	; 0x166a <openDoorMatch+0x1e4>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <openDoorMatch+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <openDoorMatch+0x22c>
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			UART_sendByte(HMI_ECU_READY);							/* Tells MCU2 that MCU1 is ready */
    16ba:	81 e1       	ldi	r24, 0x11	; 17
    16bc:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
			/* Checks if Max fails reached to display ALERT */
			if(g_fail_count == 0)
    16c0:	80 91 4f 01 	lds	r24, 0x014F
    16c4:	88 23       	and	r24, r24
    16c6:	e1 f5       	brne	.+120    	; 0x1740 <openDoorMatch+0x2ba>
			{
				LCD_clearScreen();
    16c8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
				LCD_displayString("Alert Thief!!");
    16cc:	85 e0       	ldi	r24, 0x05	; 5
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
				Timer1->Compare_value = 58594;						/*	Activate Buzzer 1 minute	*/
    16d4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    16d6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    16d8:	82 ee       	ldi	r24, 0xE2	; 226
    16da:	94 ee       	ldi	r25, 0xE4	; 228
    16dc:	93 83       	std	Z+3, r25	; 0x03
    16de:	82 83       	std	Z+2, r24	; 0x02
				/* Starts Timer1 to count for 60 seconds */
				Timer_init(Timer1);
    16e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16e4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <Timer_init>
				Timer_setCallBack(TIMER1_ID, Buzzer_fn);
    16e8:	21 e0       	ldi	r18, 0x01	; 1
    16ea:	3c e0       	ldi	r19, 0x0C	; 12
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	b9 01       	movw	r22, r18
    16f0:	0e 94 db 18 	call	0x31b6	; 0x31b6 <Timer_setCallBack>
				g_fail_count = MAX_FAIL_TRIALS;						/* Resets Max fail trials counter */
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	80 93 4f 01 	sts	0x014F, r24
				while(UART_receiveByte() != CONTROL_ECU_READY);
    16fa:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    16fe:	80 31       	cpi	r24, 0x10	; 16
    1700:	e1 f7       	brne	.-8      	; 0x16fa <openDoorMatch+0x274>
    1702:	23 c0       	rjmp	.+70     	; 0x174a <openDoorMatch+0x2c4>
				break;
			}
		}
		else
		{
			LCD_clearScreen();
    1704:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
			LCD_displayString("OPENING...");
    1708:	83 e1       	ldi	r24, 0x13	; 19
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
			UART_sendByte(HMI_ECU_READY);								/* Tells MCU2 that MCU1 is ready */
    1710:	81 e1       	ldi	r24, 0x11	; 17
    1712:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
			while(UART_receiveByte() != START_TIME_15_SEC);
    1716:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    171a:	86 31       	cpi	r24, 0x16	; 22
    171c:	e1 f7       	brne	.-8      	; 0x1716 <openDoorMatch+0x290>
			/* Starts Timer1 to count for 15 seconds door opening */
			Timer_setCallBack(TIMER1_ID, openDoorTimer1);
    171e:	2e ea       	ldi	r18, 0xAE	; 174
    1720:	3b e0       	ldi	r19, 0x0B	; 11
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	b9 01       	movw	r22, r18
    1726:	0e 94 db 18 	call	0x31b6	; 0x31b6 <Timer_setCallBack>
			Timer_init(Timer1);
    172a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    172c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    172e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <Timer_init>
			while(g_Timer_Flag == 0);
    1732:	80 91 52 01 	lds	r24, 0x0152
    1736:	88 23       	and	r24, r24
    1738:	e1 f3       	breq	.-8      	; 0x1732 <openDoorMatch+0x2ac>
			g_Timer_Flag = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	80 93 52 01 	sts	0x0152, r24
{
	/* Send to Control ECU that HMI is ready */
	UART_sendByte(HMI_ECU_READY);
	pass_matching = PASS_UNMATCH;
	/* Keeps looping until password matches */
	while(pass_matching == PASS_UNMATCH)
    1740:	80 91 4e 01 	lds	r24, 0x014E
    1744:	83 31       	cpi	r24, 0x13	; 19
    1746:	09 f4       	brne	.+2      	; 0x174a <openDoorMatch+0x2c4>
    1748:	b1 ce       	rjmp	.-670    	; 0x14ac <openDoorMatch+0x26>
			Timer_init(Timer1);
			while(g_Timer_Flag == 0);
			g_Timer_Flag = 1;
		}
	}
}
    174a:	6e 96       	adiw	r28, 0x1e	; 30
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <openDoorTimer1>:

/*-------------------------------------------------------------------------------------------------------
 * [Description]:	Function to count time fort the door opening, keeping still, and closing
 *------------------------------------------------------------------------------------------------------*/
void openDoorTimer1()
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	++g_OpenDoorTick;
    1764:	80 91 50 01 	lds	r24, 0x0150
    1768:	8f 5f       	subi	r24, 0xFF	; 255
    176a:	80 93 50 01 	sts	0x0150, r24
	if(g_OpenDoorTick == 2)											/* 15 Seconds Passed */
    176e:	80 91 50 01 	lds	r24, 0x0150
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	99 f4       	brne	.+38     	; 0x179c <openDoorTimer1+0x40>
	{
		Timer_SetCompareValue(TIMER1_ID, 23438);					/* Wait 3 Seconds Door Opened*/
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	6e e8       	ldi	r22, 0x8E	; 142
    177a:	7b e5       	ldi	r23, 0x5B	; 91
    177c:	0e 94 8c 19 	call	0x3318	; 0x3318 <Timer_SetCompareValue>
		UART_sendByte(TIME_15_SEC);
    1780:	85 e1       	ldi	r24, 0x15	; 21
    1782:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
		while(UART_receiveByte() != CONTROL_ECU_READY);
    1786:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    178a:	80 31       	cpi	r24, 0x10	; 16
    178c:	e1 f7       	brne	.-8      	; 0x1786 <openDoorTimer1+0x2a>
		LCD_clearScreen();
    178e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
		LCD_displayString("Door Opened");
    1792:	8e e1       	ldi	r24, 0x1E	; 30
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
    179a:	30 c0       	rjmp	.+96     	; 0x17fc <openDoorTimer1+0xa0>
	}
	else if(g_OpenDoorTick == 3)
    179c:	80 91 50 01 	lds	r24, 0x0150
    17a0:	83 30       	cpi	r24, 0x03	; 3
    17a2:	99 f4       	brne	.+38     	; 0x17ca <openDoorTimer1+0x6e>
	{
		Timer_SetCompareValue(TIMER1_ID, 58594);					/* Wait 15 Seconds Closing Door */
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	62 ee       	ldi	r22, 0xE2	; 226
    17a8:	74 ee       	ldi	r23, 0xE4	; 228
    17aa:	0e 94 8c 19 	call	0x3318	; 0x3318 <Timer_SetCompareValue>
		UART_sendByte(TIME_3_SEC);
    17ae:	88 e1       	ldi	r24, 0x18	; 24
    17b0:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
		while(UART_receiveByte() != CONTROL_ECU_READY);
    17b4:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    17b8:	80 31       	cpi	r24, 0x10	; 16
    17ba:	e1 f7       	brne	.-8      	; 0x17b4 <openDoorTimer1+0x58>
		LCD_clearScreen();
    17bc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
		LCD_displayString("Closing Door...");
    17c0:	8a e2       	ldi	r24, 0x2A	; 42
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
    17c8:	19 c0       	rjmp	.+50     	; 0x17fc <openDoorTimer1+0xa0>
	}
	else if(g_OpenDoorTick == 5)
    17ca:	80 91 50 01 	lds	r24, 0x0150
    17ce:	85 30       	cpi	r24, 0x05	; 5
    17d0:	a9 f4       	brne	.+42     	; 0x17fc <openDoorTimer1+0xa0>
	{
		/* Send that 15 Seconds are counted to Control ECU */
		UART_sendByte(TIME_15_SEC);
    17d2:	85 e1       	ldi	r24, 0x15	; 21
    17d4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
		while(UART_receiveByte() != CONTROL_ECU_READY);
    17d8:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    17dc:	80 31       	cpi	r24, 0x10	; 16
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <openDoorTimer1+0x7c>
		g_OpenDoorTick = 0;										/* Resets ISR count */
    17e0:	10 92 50 01 	sts	0x0150, r1
		Timer_deinit(TIMER1_ID);								/* Stops timer */
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	0e 94 07 19 	call	0x320e	; 0x320e <Timer_deinit>
		LCD_clearScreen();
    17ea:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
		LCD_displayString("Door Closed");
    17ee:	8a e3       	ldi	r24, 0x3A	; 58
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
		g_Timer_Flag = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 52 01 	sts	0x0152, r24
	}
}
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <Buzzer_fn>:
/*-------------------------------------------------------------------------------------------------------
 * [Description]:
 * Function that count 60 seconds then tells CONTROL ECU that it finished count
 *------------------------------------------------------------------------------------------------------*/
void Buzzer_fn()
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
	++g_BuzzerTick;
    180a:	80 91 51 01 	lds	r24, 0x0151
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	80 93 51 01 	sts	0x0151, r24
	/* Displays the main options on LCD */
	if(g_BuzzerTick == 8)
    1814:	80 91 51 01 	lds	r24, 0x0151
    1818:	88 30       	cpi	r24, 0x08	; 8
    181a:	19 f4       	brne	.+6      	; 0x1822 <Buzzer_fn+0x20>
	{
		UART_sendByte(TIME_60_SEC);
    181c:	89 e1       	ldi	r24, 0x19	; 25
    181e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
	}

}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <changePassword>:
 * [Description]:
 * Function that sends old password to check. If password match sends new password,
 * if password doesn't match you have MAX_TRIALS to try password again then alert will be displayed
 *------------------------------------------------------------------------------------------------------*/
void changePassword(Timer_ConfigType *Timer1)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	6e 97       	sbiw	r28, 0x1e	; 30
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	9e 8f       	std	Y+30, r25	; 0x1e
    183e:	8d 8f       	std	Y+29, r24	; 0x1d
	UART_sendByte(HMI_ECU_READY);
    1840:	81 e1       	ldi	r24, 0x11	; 17
    1842:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
	pass_matching = PASS_UNMATCH;
    1846:	83 e1       	ldi	r24, 0x13	; 19
    1848:	80 93 4e 01 	sts	0x014E, r24
    184c:	2e c1       	rjmp	.+604    	; 0x1aaa <changePassword+0x282>
	while(pass_matching == PASS_UNMATCH)
	{
		send_password();											/* Send password function send to Control ECU */
    184e:	0e 94 24 09 	call	0x1248	; 0x1248 <send_password>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a6 e9       	ldi	r26, 0x96	; 150
    1858:	b3 e4       	ldi	r27, 0x43	; 67
    185a:	89 8f       	std	Y+25, r24	; 0x19
    185c:	9a 8f       	std	Y+26, r25	; 0x1a
    185e:	ab 8f       	std	Y+27, r26	; 0x1b
    1860:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a ef       	ldi	r20, 0xFA	; 250
    1870:	54 e4       	ldi	r21, 0x44	; 68
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8d 8b       	std	Y+21, r24	; 0x15
    187c:	9e 8b       	std	Y+22, r25	; 0x16
    187e:	af 8b       	std	Y+23, r26	; 0x17
    1880:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1882:	6d 89       	ldd	r22, Y+21	; 0x15
    1884:	7e 89       	ldd	r23, Y+22	; 0x16
    1886:	8f 89       	ldd	r24, Y+23	; 0x17
    1888:	98 8d       	ldd	r25, Y+24	; 0x18
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <changePassword+0x7c>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9c 8b       	std	Y+20, r25	; 0x14
    18a0:	8b 8b       	std	Y+19, r24	; 0x13
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <changePassword+0xfa>
	else if (__tmp > 65535)
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <changePassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	69 8d       	ldd	r22, Y+25	; 0x19
    18be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9c 8b       	std	Y+20, r25	; 0x14
    18e2:	8b 8b       	std	Y+19, r24	; 0x13
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <changePassword+0xdc>
    18e6:	88 ec       	ldi	r24, 0xC8	; 200
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9a 8b       	std	Y+18, r25	; 0x12
    18ec:	89 8b       	std	Y+17, r24	; 0x11
    18ee:	89 89       	ldd	r24, Y+17	; 0x11
    18f0:	9a 89       	ldd	r25, Y+18	; 0x12
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <changePassword+0xca>
    18f6:	9a 8b       	std	Y+18, r25	; 0x12
    18f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8b 89       	ldd	r24, Y+19	; 0x13
    18fc:	9c 89       	ldd	r25, Y+20	; 0x14
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	9c 8b       	std	Y+20, r25	; 0x14
    1902:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <changePassword+0xbe>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <changePassword+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6d 89       	ldd	r22, Y+21	; 0x15
    1910:	7e 89       	ldd	r23, Y+22	; 0x16
    1912:	8f 89       	ldd	r24, Y+23	; 0x17
    1914:	98 8d       	ldd	r25, Y+24	; 0x18
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	98 8b       	std	Y+16, r25	; 0x10
    1928:	8f 87       	std	Y+15, r24	; 0x0f
    192a:	8f 85       	ldd	r24, Y+15	; 0x0f
    192c:	98 89       	ldd	r25, Y+16	; 0x10
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <changePassword+0x106>
    1932:	98 8b       	std	Y+16, r25	; 0x10
    1934:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		pass_matching = UART_receiveByte();
    1936:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    193a:	80 93 4e 01 	sts	0x014E, r24

		if(pass_matching == PASS_UNMATCH)
    193e:	80 91 4e 01 	lds	r24, 0x014E
    1942:	83 31       	cpi	r24, 0x13	; 19
    1944:	09 f0       	breq	.+2      	; 0x1948 <changePassword+0x120>
    1946:	af c0       	rjmp	.+350    	; 0x1aa6 <changePassword+0x27e>
		{
			/* If password doesn't match decrement the fail times */
			--g_fail_count;
    1948:	80 91 4f 01 	lds	r24, 0x014F
    194c:	81 50       	subi	r24, 0x01	; 1
    194e:	80 93 4f 01 	sts	0x014F, r24
			/* Displays wrong password and the remaining fail times */
			LCD_clearScreen();
    1952:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1956:	86 ee       	ldi	r24, 0xE6	; 230
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "Trials Remain: ");
    195e:	25 ef       	ldi	r18, 0xF5	; 245
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	a9 01       	movw	r20, r18
    1968:	0e 94 02 16 	call	0x2c04	; 0x2c04 <LCD_displayStringRowColumn>
			LCD_intgerToString(g_fail_count);
    196c:	80 91 4f 01 	lds	r24, 0x014F
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_intgerToString>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	aa ef       	ldi	r26, 0xFA	; 250
    197e:	b4 e4       	ldi	r27, 0x44	; 68
    1980:	8b 87       	std	Y+11, r24	; 0x0b
    1982:	9c 87       	std	Y+12, r25	; 0x0c
    1984:	ad 87       	std	Y+13, r26	; 0x0d
    1986:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6b 85       	ldd	r22, Y+11	; 0x0b
    198a:	7c 85       	ldd	r23, Y+12	; 0x0c
    198c:	8d 85       	ldd	r24, Y+13	; 0x0d
    198e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a ef       	ldi	r20, 0xFA	; 250
    1996:	54 e4       	ldi	r21, 0x44	; 68
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8f 83       	std	Y+7, r24	; 0x07
    19a2:	98 87       	std	Y+8, r25	; 0x08
    19a4:	a9 87       	std	Y+9, r26	; 0x09
    19a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <changePassword+0x1a2>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <changePassword+0x220>
	else if (__tmp > 65535)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <changePassword+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <changePassword+0x202>
    1a0c:	88 ec       	ldi	r24, 0xC8	; 200
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c 83       	std	Y+4, r25	; 0x04
    1a12:	8b 83       	std	Y+3, r24	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <changePassword+0x1f0>
    1a1c:	9c 83       	std	Y+4, r25	; 0x04
    1a1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <changePassword+0x1e4>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <changePassword+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <changePassword+0x22c>
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			UART_sendByte(HMI_ECU_READY);							/* Tells MCU2 that MCU1 is ready */
    1a5c:	81 e1       	ldi	r24, 0x11	; 17
    1a5e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
			/* Checks if Max fails reached to display ALERT */
			if(g_fail_count == 0)
    1a62:	80 91 4f 01 	lds	r24, 0x014F
    1a66:	88 23       	and	r24, r24
    1a68:	01 f5       	brne	.+64     	; 0x1aaa <changePassword+0x282>
			{
				LCD_clearScreen();
    1a6a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <LCD_clearScreen>
				LCD_displayString("Alert Thief!!");
    1a6e:	85 e0       	ldi	r24, 0x05	; 5
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
				Timer1->Compare_value = 58594;						/*	Activate displaying ALERT 1 minute	*/
    1a76:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1a78:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1a7a:	82 ee       	ldi	r24, 0xE2	; 226
    1a7c:	94 ee       	ldi	r25, 0xE4	; 228
    1a7e:	93 83       	std	Z+3, r25	; 0x03
    1a80:	82 83       	std	Z+2, r24	; 0x02
				Timer_init(Timer1);									/* Starts Timer1 to count for 60 seconds ALERT*/
    1a82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a86:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <Timer_init>
				Timer_setCallBack(TIMER1_ID, Buzzer_fn);
    1a8a:	21 e0       	ldi	r18, 0x01	; 1
    1a8c:	3c e0       	ldi	r19, 0x0C	; 12
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	b9 01       	movw	r22, r18
    1a92:	0e 94 db 18 	call	0x31b6	; 0x31b6 <Timer_setCallBack>
				g_fail_count = MAX_FAIL_TRIALS;
    1a96:	83 e0       	ldi	r24, 0x03	; 3
    1a98:	80 93 4f 01 	sts	0x014F, r24
				while(UART_receiveByte() != CONTROL_ECU_READY);
    1a9c:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    1aa0:	80 31       	cpi	r24, 0x10	; 16
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <changePassword+0x274>
    1aa4:	07 c0       	rjmp	.+14     	; 0x1ab4 <changePassword+0x28c>
			}
		}
		/* If password matched it sends the New Password to control ECU */
		else
		{
			pass_Enter_1();
    1aa6:	0e 94 05 06 	call	0xc0a	; 0xc0a <pass_Enter_1>
 *------------------------------------------------------------------------------------------------------*/
void changePassword(Timer_ConfigType *Timer1)
{
	UART_sendByte(HMI_ECU_READY);
	pass_matching = PASS_UNMATCH;
	while(pass_matching == PASS_UNMATCH)
    1aaa:	80 91 4e 01 	lds	r24, 0x014E
    1aae:	83 31       	cpi	r24, 0x13	; 19
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <changePassword+0x28c>
    1ab2:	cd ce       	rjmp	.-614    	; 0x184e <changePassword+0x26>
		else
		{
			pass_Enter_1();
		}
	}
}
    1ab4:	6e 96       	adiw	r28, 0x1e	; 30
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <GPIO_setupPinDirection+0x6>
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <GPIO_setupPinDirection+0x8>
    1ace:	0f 92       	push	r0
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	6a 83       	std	Y+2, r22	; 0x02
    1ad8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	88 30       	cpi	r24, 0x08	; 8
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <GPIO_setupPinDirection+0x1c>
    1ae0:	d5 c0       	rjmp	.+426    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <GPIO_setupPinDirection+0x24>
    1ae8:	d1 c0       	rjmp	.+418    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3d 83       	std	Y+5, r19	; 0x05
    1af2:	2c 83       	std	Y+4, r18	; 0x04
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	91 05       	cpc	r25, r1
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <GPIO_setupPinDirection+0x3a>
    1afe:	43 c0       	rjmp	.+134    	; 0x1b86 <GPIO_setupPinDirection+0xc0>
    1b00:	2c 81       	ldd	r18, Y+4	; 0x04
    1b02:	3d 81       	ldd	r19, Y+5	; 0x05
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <GPIO_setupPinDirection+0x4e>
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	71 f0       	breq	.+28     	; 0x1b2e <GPIO_setupPinDirection+0x68>
    1b12:	bc c0       	rjmp	.+376    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
    1b14:	2c 81       	ldd	r18, Y+4	; 0x04
    1b16:	3d 81       	ldd	r19, Y+5	; 0x05
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <GPIO_setupPinDirection+0x5a>
    1b1e:	5f c0       	rjmp	.+190    	; 0x1bde <GPIO_setupPinDirection+0x118>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	83 30       	cpi	r24, 0x03	; 3
    1b26:	91 05       	cpc	r25, r1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <GPIO_setupPinDirection+0x66>
    1b2a:	85 c0       	rjmp	.+266    	; 0x1c36 <GPIO_setupPinDirection+0x170>
    1b2c:	af c0       	rjmp	.+350    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	a1 f4       	brne	.+40     	; 0x1b5c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b34:	aa e3       	ldi	r26, 0x3A	; 58
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	ea e3       	ldi	r30, 0x3A	; 58
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	48 2f       	mov	r20, r24
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	02 2e       	mov	r0, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <GPIO_setupPinDirection+0x8c>
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <GPIO_setupPinDirection+0x88>
    1b56:	84 2b       	or	r24, r20
    1b58:	8c 93       	st	X, r24
    1b5a:	98 c0       	rjmp	.+304    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b5c:	aa e3       	ldi	r26, 0x3A	; 58
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ea e3       	ldi	r30, 0x3A	; 58
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	48 2f       	mov	r20, r24
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	02 2e       	mov	r0, r18
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <GPIO_setupPinDirection+0xb4>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	0a 94       	dec	r0
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <GPIO_setupPinDirection+0xb0>
    1b7e:	80 95       	com	r24
    1b80:	84 23       	and	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	83 c0       	rjmp	.+262    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	a1 f4       	brne	.+40     	; 0x1bb4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b8c:	a7 e3       	ldi	r26, 0x37	; 55
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e7 e3       	ldi	r30, 0x37	; 55
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <GPIO_setupPinDirection+0xe4>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <GPIO_setupPinDirection+0xe0>
    1bae:	84 2b       	or	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	6c c0       	rjmp	.+216    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1bb4:	a7 e3       	ldi	r26, 0x37	; 55
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e7 e3       	ldi	r30, 0x37	; 55
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <GPIO_setupPinDirection+0x10c>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <GPIO_setupPinDirection+0x108>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	57 c0       	rjmp	.+174    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1be4:	a4 e3       	ldi	r26, 0x34	; 52
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e4 e3       	ldi	r30, 0x34	; 52
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <GPIO_setupPinDirection+0x13c>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <GPIO_setupPinDirection+0x138>
    1c06:	84 2b       	or	r24, r20
    1c08:	8c 93       	st	X, r24
    1c0a:	40 c0       	rjmp	.+128    	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1c0c:	a4 e3       	ldi	r26, 0x34	; 52
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e4 e3       	ldi	r30, 0x34	; 52
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	48 2f       	mov	r20, r24
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 2e       	mov	r0, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <GPIO_setupPinDirection+0x164>
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	0a 94       	dec	r0
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <GPIO_setupPinDirection+0x160>
    1c2e:	80 95       	com	r24
    1c30:	84 23       	and	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	2b c0       	rjmp	.+86     	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	a1 f4       	brne	.+40     	; 0x1c64 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c3c:	a1 e3       	ldi	r26, 0x31	; 49
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e1 e3       	ldi	r30, 0x31	; 49
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <GPIO_setupPinDirection+0x194>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <GPIO_setupPinDirection+0x190>
    1c5e:	84 2b       	or	r24, r20
    1c60:	8c 93       	st	X, r24
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c64:	a1 e3       	ldi	r26, 0x31	; 49
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e1 e3       	ldi	r30, 0x31	; 49
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	48 2f       	mov	r20, r24
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 2e       	mov	r0, r18
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <GPIO_setupPinDirection+0x1bc>
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	0a 94       	dec	r0
    1c84:	e2 f7       	brpl	.-8      	; 0x1c7e <GPIO_setupPinDirection+0x1b8>
    1c86:	80 95       	com	r24
    1c88:	84 23       	and	r24, r20
    1c8a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <GPIO_writePin+0x6>
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <GPIO_writePin+0x8>
    1ca4:	0f 92       	push	r0
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	6a 83       	std	Y+2, r22	; 0x02
    1cae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	88 30       	cpi	r24, 0x08	; 8
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <GPIO_writePin+0x1c>
    1cb6:	d5 c0       	rjmp	.+426    	; 0x1e62 <GPIO_writePin+0x1c6>
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	08 f0       	brcs	.+2      	; 0x1cc0 <GPIO_writePin+0x24>
    1cbe:	d1 c0       	rjmp	.+418    	; 0x1e62 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		 /* Write the pin value as required */
		switch (port_num)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3d 83       	std	Y+5, r19	; 0x05
    1cc8:	2c 83       	std	Y+4, r18	; 0x04
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <GPIO_writePin+0x3a>
    1cd4:	43 c0       	rjmp	.+134    	; 0x1d5c <GPIO_writePin+0xc0>
    1cd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cda:	22 30       	cpi	r18, 0x02	; 2
    1cdc:	31 05       	cpc	r19, r1
    1cde:	2c f4       	brge	.+10     	; 0x1cea <GPIO_writePin+0x4e>
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	71 f0       	breq	.+28     	; 0x1d04 <GPIO_writePin+0x68>
    1ce8:	bc c0       	rjmp	.+376    	; 0x1e62 <GPIO_writePin+0x1c6>
    1cea:	2c 81       	ldd	r18, Y+4	; 0x04
    1cec:	3d 81       	ldd	r19, Y+5	; 0x05
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <GPIO_writePin+0x5a>
    1cf4:	5f c0       	rjmp	.+190    	; 0x1db4 <GPIO_writePin+0x118>
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfa:	83 30       	cpi	r24, 0x03	; 3
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <GPIO_writePin+0x66>
    1d00:	85 c0       	rjmp	.+266    	; 0x1e0c <GPIO_writePin+0x170>
    1d02:	af c0       	rjmp	.+350    	; 0x1e62 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	a1 f4       	brne	.+40     	; 0x1d32 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1d0a:	ab e3       	ldi	r26, 0x3B	; 59
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	eb e3       	ldi	r30, 0x3B	; 59
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	48 2f       	mov	r20, r24
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 2e       	mov	r0, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <GPIO_writePin+0x8c>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <GPIO_writePin+0x88>
    1d2c:	84 2b       	or	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	98 c0       	rjmp	.+304    	; 0x1e62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d32:	ab e3       	ldi	r26, 0x3B	; 59
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	eb e3       	ldi	r30, 0x3B	; 59
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <GPIO_writePin+0xb4>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <GPIO_writePin+0xb0>
    1d54:	80 95       	com	r24
    1d56:	84 23       	and	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	83 c0       	rjmp	.+262    	; 0x1e62 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	a1 f4       	brne	.+40     	; 0x1d8a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d62:	a8 e3       	ldi	r26, 0x38	; 56
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e8 e3       	ldi	r30, 0x38	; 56
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 2e       	mov	r0, r18
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <GPIO_writePin+0xe4>
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	0a 94       	dec	r0
    1d82:	e2 f7       	brpl	.-8      	; 0x1d7c <GPIO_writePin+0xe0>
    1d84:	84 2b       	or	r24, r20
    1d86:	8c 93       	st	X, r24
    1d88:	6c c0       	rjmp	.+216    	; 0x1e62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d8a:	a8 e3       	ldi	r26, 0x38	; 56
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e8 e3       	ldi	r30, 0x38	; 56
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	48 2f       	mov	r20, r24
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	02 2e       	mov	r0, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <GPIO_writePin+0x10c>
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	0a 94       	dec	r0
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <GPIO_writePin+0x108>
    1dac:	80 95       	com	r24
    1dae:	84 23       	and	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	57 c0       	rjmp	.+174    	; 0x1e62 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	a1 f4       	brne	.+40     	; 0x1de2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1dba:	a5 e3       	ldi	r26, 0x35	; 53
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	e5 e3       	ldi	r30, 0x35	; 53
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	48 2f       	mov	r20, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	02 2e       	mov	r0, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <GPIO_writePin+0x13c>
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	0a 94       	dec	r0
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <GPIO_writePin+0x138>
    1ddc:	84 2b       	or	r24, r20
    1dde:	8c 93       	st	X, r24
    1de0:	40 c0       	rjmp	.+128    	; 0x1e62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1de2:	a5 e3       	ldi	r26, 0x35	; 53
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e5 e3       	ldi	r30, 0x35	; 53
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <GPIO_writePin+0x164>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <GPIO_writePin+0x160>
    1e04:	80 95       	com	r24
    1e06:	84 23       	and	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	2b c0       	rjmp	.+86     	; 0x1e62 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	a1 f4       	brne	.+40     	; 0x1e3a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1e12:	a2 e3       	ldi	r26, 0x32	; 50
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e2 e3       	ldi	r30, 0x32	; 50
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 2e       	mov	r0, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <GPIO_writePin+0x194>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	0a 94       	dec	r0
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <GPIO_writePin+0x190>
    1e34:	84 2b       	or	r24, r20
    1e36:	8c 93       	st	X, r24
    1e38:	14 c0       	rjmp	.+40     	; 0x1e62 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e3a:	a2 e3       	ldi	r26, 0x32	; 50
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e2 e3       	ldi	r30, 0x32	; 50
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	48 2f       	mov	r20, r24
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 2e       	mov	r0, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <GPIO_writePin+0x1bc>
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	0a 94       	dec	r0
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <GPIO_writePin+0x1b8>
    1e5c:	80 95       	com	r24
    1e5e:	84 23       	and	r24, r20
    1e60:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <GPIO_readPin>:
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */

uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <GPIO_readPin+0x6>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <GPIO_readPin+0x8>
    1e7a:	0f 92       	push	r0
    1e7c:	cd b7       	in	r28, 0x3d	; 61
    1e7e:	de b7       	in	r29, 0x3e	; 62
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8 pin_value = LOGIC_LOW;
    1e84:	19 82       	std	Y+1, r1	; 0x01

	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 30       	cpi	r24, 0x08	; 8
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <GPIO_readPin+0x1c>
    1e8c:	84 c0       	rjmp	.+264    	; 0x1f96 <GPIO_readPin+0x124>
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	08 f0       	brcs	.+2      	; 0x1e96 <GPIO_readPin+0x24>
    1e94:	80 c0       	rjmp	.+256    	; 0x1f96 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3d 83       	std	Y+5, r19	; 0x05
    1e9e:	2c 83       	std	Y+4, r18	; 0x04
    1ea0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ea2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ea4:	41 30       	cpi	r20, 0x01	; 1
    1ea6:	51 05       	cpc	r21, r1
    1ea8:	79 f1       	breq	.+94     	; 0x1f08 <GPIO_readPin+0x96>
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	9d 81       	ldd	r25, Y+5	; 0x05
    1eae:	82 30       	cpi	r24, 0x02	; 2
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	34 f4       	brge	.+12     	; 0x1ec0 <GPIO_readPin+0x4e>
    1eb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb8:	21 15       	cp	r18, r1
    1eba:	31 05       	cpc	r19, r1
    1ebc:	69 f0       	breq	.+26     	; 0x1ed8 <GPIO_readPin+0x66>
    1ebe:	6b c0       	rjmp	.+214    	; 0x1f96 <GPIO_readPin+0x124>
    1ec0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ec2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ec4:	42 30       	cpi	r20, 0x02	; 2
    1ec6:	51 05       	cpc	r21, r1
    1ec8:	b9 f1       	breq	.+110    	; 0x1f38 <GPIO_readPin+0xc6>
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <GPIO_readPin+0x64>
    1ed4:	49 c0       	rjmp	.+146    	; 0x1f68 <GPIO_readPin+0xf6>
    1ed6:	5f c0       	rjmp	.+190    	; 0x1f96 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA,pin_num))
    1ed8:	e9 e3       	ldi	r30, 0x39	; 57
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	88 2f       	mov	r24, r24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a9 01       	movw	r20, r18
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <GPIO_readPin+0x7e>
    1eec:	55 95       	asr	r21
    1eee:	47 95       	ror	r20
    1ef0:	8a 95       	dec	r24
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <GPIO_readPin+0x7a>
    1ef4:	ca 01       	movw	r24, r20
    1ef6:	81 70       	andi	r24, 0x01	; 1
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	88 23       	and	r24, r24
    1efc:	19 f0       	breq	.+6      	; 0x1f04 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	49 c0       	rjmp	.+146    	; 0x1f96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f04:	19 82       	std	Y+1, r1	; 0x01
    1f06:	47 c0       	rjmp	.+142    	; 0x1f96 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB,pin_num))
    1f08:	e6 e3       	ldi	r30, 0x36	; 54
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a9 01       	movw	r20, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <GPIO_readPin+0xae>
    1f1c:	55 95       	asr	r21
    1f1e:	47 95       	ror	r20
    1f20:	8a 95       	dec	r24
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <GPIO_readPin+0xaa>
    1f24:	ca 01       	movw	r24, r20
    1f26:	81 70       	andi	r24, 0x01	; 1
    1f28:	90 70       	andi	r25, 0x00	; 0
    1f2a:	88 23       	and	r24, r24
    1f2c:	19 f0       	breq	.+6      	; 0x1f34 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	31 c0       	rjmp	.+98     	; 0x1f96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f34:	19 82       	std	Y+1, r1	; 0x01
    1f36:	2f c0       	rjmp	.+94     	; 0x1f96 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC,pin_num))
    1f38:	e3 e3       	ldi	r30, 0x33	; 51
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a9 01       	movw	r20, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <GPIO_readPin+0xde>
    1f4c:	55 95       	asr	r21
    1f4e:	47 95       	ror	r20
    1f50:	8a 95       	dec	r24
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <GPIO_readPin+0xda>
    1f54:	ca 01       	movw	r24, r20
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	88 23       	and	r24, r24
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	19 c0       	rjmp	.+50     	; 0x1f96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f64:	19 82       	std	Y+1, r1	; 0x01
    1f66:	17 c0       	rjmp	.+46     	; 0x1f96 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND,pin_num))
    1f68:	e0 e3       	ldi	r30, 0x30	; 48
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a9 01       	movw	r20, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <GPIO_readPin+0x10e>
    1f7c:	55 95       	asr	r21
    1f7e:	47 95       	ror	r20
    1f80:	8a 95       	dec	r24
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <GPIO_readPin+0x10a>
    1f84:	ca 01       	movw	r24, r20
    1f86:	81 70       	andi	r24, 0x01	; 1
    1f88:	90 70       	andi	r25, 0x00	; 0
    1f8a:	88 23       	and	r24, r24
    1f8c:	19 f0       	breq	.+6      	; 0x1f94 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f94:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <GPIO_setupPortDirection+0x6>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <GPIO_setupPortDirection+0x8>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	84 30       	cpi	r24, 0x04	; 4
    1fbc:	90 f5       	brcc	.+100    	; 0x2022 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	3c 83       	std	Y+4, r19	; 0x04
    1fc6:	2b 83       	std	Y+3, r18	; 0x03
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	d1 f0       	breq	.+52     	; 0x2006 <GPIO_setupPortDirection+0x5e>
    1fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd6:	22 30       	cpi	r18, 0x02	; 2
    1fd8:	31 05       	cpc	r19, r1
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <GPIO_setupPortDirection+0x3e>
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	61 f0       	breq	.+24     	; 0x1ffc <GPIO_setupPortDirection+0x54>
    1fe4:	1e c0       	rjmp	.+60     	; 0x2022 <GPIO_setupPortDirection+0x7a>
    1fe6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe8:	3c 81       	ldd	r19, Y+4	; 0x04
    1fea:	22 30       	cpi	r18, 0x02	; 2
    1fec:	31 05       	cpc	r19, r1
    1fee:	81 f0       	breq	.+32     	; 0x2010 <GPIO_setupPortDirection+0x68>
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	81 f0       	breq	.+32     	; 0x201a <GPIO_setupPortDirection+0x72>
    1ffa:	13 c0       	rjmp	.+38     	; 0x2022 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ffc:	ea e3       	ldi	r30, 0x3A	; 58
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	80 83       	st	Z, r24
    2004:	0e c0       	rjmp	.+28     	; 0x2022 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2006:	e7 e3       	ldi	r30, 0x37	; 55
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	80 83       	st	Z, r24
    200e:	09 c0       	rjmp	.+18     	; 0x2022 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2010:	e4 e3       	ldi	r30, 0x34	; 52
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	80 83       	st	Z, r24
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    201a:	e1 e3       	ldi	r30, 0x31	; 49
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	80 83       	st	Z, r24
			break;
		}
	}
}
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	00 d0       	rcall	.+0      	; 0x2036 <GPIO_writePort+0x6>
    2036:	00 d0       	rcall	.+0      	; 0x2038 <GPIO_writePort+0x8>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	89 83       	std	Y+1, r24	; 0x01
    203e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	84 30       	cpi	r24, 0x04	; 4
    2044:	90 f5       	brcc	.+100    	; 0x20aa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch (port_num)
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	3c 83       	std	Y+4, r19	; 0x04
    204e:	2b 83       	std	Y+3, r18	; 0x03
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	91 05       	cpc	r25, r1
    2058:	d1 f0       	breq	.+52     	; 0x208e <GPIO_writePort+0x5e>
    205a:	2b 81       	ldd	r18, Y+3	; 0x03
    205c:	3c 81       	ldd	r19, Y+4	; 0x04
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	31 05       	cpc	r19, r1
    2062:	2c f4       	brge	.+10     	; 0x206e <GPIO_writePort+0x3e>
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	61 f0       	breq	.+24     	; 0x2084 <GPIO_writePort+0x54>
    206c:	1e c0       	rjmp	.+60     	; 0x20aa <GPIO_writePort+0x7a>
    206e:	2b 81       	ldd	r18, Y+3	; 0x03
    2070:	3c 81       	ldd	r19, Y+4	; 0x04
    2072:	22 30       	cpi	r18, 0x02	; 2
    2074:	31 05       	cpc	r19, r1
    2076:	81 f0       	breq	.+32     	; 0x2098 <GPIO_writePort+0x68>
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	83 30       	cpi	r24, 0x03	; 3
    207e:	91 05       	cpc	r25, r1
    2080:	81 f0       	breq	.+32     	; 0x20a2 <GPIO_writePort+0x72>
    2082:	13 c0       	rjmp	.+38     	; 0x20aa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2084:	eb e3       	ldi	r30, 0x3B	; 59
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	80 83       	st	Z, r24
    208c:	0e c0       	rjmp	.+28     	; 0x20aa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    208e:	e8 e3       	ldi	r30, 0x38	; 56
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	80 83       	st	Z, r24
    2096:	09 c0       	rjmp	.+18     	; 0x20aa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2098:	e5 e3       	ldi	r30, 0x35	; 53
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	80 83       	st	Z, r24
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    20a2:	e2 e3       	ldi	r30, 0x32	; 50
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <GPIO_readPort+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <GPIO_readPort+0x8>
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    20c6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if ((port_num >= NUM_OF_PORTS))
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	84 30       	cpi	r24, 0x04	; 4
    20cc:	90 f5       	brcc	.+100    	; 0x2132 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch (port_num)
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	3c 83       	std	Y+4, r19	; 0x04
    20d6:	2b 83       	std	Y+3, r18	; 0x03
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	91 05       	cpc	r25, r1
    20e0:	d1 f0       	breq	.+52     	; 0x2116 <GPIO_readPort+0x5e>
    20e2:	2b 81       	ldd	r18, Y+3	; 0x03
    20e4:	3c 81       	ldd	r19, Y+4	; 0x04
    20e6:	22 30       	cpi	r18, 0x02	; 2
    20e8:	31 05       	cpc	r19, r1
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <GPIO_readPort+0x3e>
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	61 f0       	breq	.+24     	; 0x210c <GPIO_readPort+0x54>
    20f4:	1e c0       	rjmp	.+60     	; 0x2132 <GPIO_readPort+0x7a>
    20f6:	2b 81       	ldd	r18, Y+3	; 0x03
    20f8:	3c 81       	ldd	r19, Y+4	; 0x04
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	31 05       	cpc	r19, r1
    20fe:	81 f0       	breq	.+32     	; 0x2120 <GPIO_readPort+0x68>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	83 30       	cpi	r24, 0x03	; 3
    2106:	91 05       	cpc	r25, r1
    2108:	81 f0       	breq	.+32     	; 0x212a <GPIO_readPort+0x72>
    210a:	13 c0       	rjmp	.+38     	; 0x2132 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    210c:	e9 e3       	ldi	r30, 0x39	; 57
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	0e c0       	rjmp	.+28     	; 0x2132 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2116:	e6 e3       	ldi	r30, 0x36	; 54
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	09 c0       	rjmp	.+18     	; 0x2132 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2120:	e3 e3       	ldi	r30, 0x33	; 51
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    212a:	e0 e3       	ldi	r30, 0x30	; 48
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
}
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <KEYPAD_getPressedKey>:
/***************************************************************************************************
 *                                		Function Definitions                                  	   *
 ***************************************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <KEYPAD_getPressedKey+0x6>
    2148:	0f 92       	push	r0
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    214e:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		for(col=0; col<KEYPAD_NUM_COLS; ++col) /* loop for columns */
    2150:	1b 82       	std	Y+3, r1	; 0x03
    2152:	43 c0       	rjmp	.+134    	; 0x21da <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin.
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	60 e0       	ldi	r22, 0x00	; 0
    2158:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID + col, PIN_OUTPUT);
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	98 2f       	mov	r25, r24
    2160:	9c 5f       	subi	r25, 0xFC	; 252
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	69 2f       	mov	r22, r25
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <GPIO_setupPinDirection>

#if (KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9c 01       	movw	r18, r24
    2174:	2c 5f       	subi	r18, 0xFC	; 252
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <KEYPAD_getPressedKey+0x40>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	2a 95       	dec	r18
    2184:	e2 f7       	brpl	.-8      	; 0x217e <KEYPAD_getPressedKey+0x3c>
    2186:	80 95       	com	r24
    2188:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	69 81       	ldd	r22, Y+1	; 0x01
    218e:	0e 94 18 10 	call	0x2030	; 0x2030 <GPIO_writePort>

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
    2192:	1a 82       	std	Y+2, r1	; 0x02
    2194:	1c c0       	rjmp	.+56     	; 0x21ce <KEYPAD_getPressedKey+0x8c>
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	6a 81       	ldd	r22, Y+2	; 0x02
    219a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <GPIO_readPin>
    219e:	88 23       	and	r24, r24
    21a0:	99 f4       	brne	.+38     	; 0x21c8 <KEYPAD_getPressedKey+0x86>
				{
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	98 2f       	mov	r25, r24
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	89 0f       	add	r24, r25
    21b6:	8f 5f       	subi	r24, 0xFF	; 255
    21b8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID + col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID, keypad_port_value);

			for(row=0; row<KEYPAD_NUM_ROWS; ++row) /* loop for rows */
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	8f 5f       	subi	r24, 0xFF	; 255
    21cc:	8a 83       	std	Y+2, r24	; 0x02
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	84 30       	cpi	r24, 0x04	; 4
    21d2:	08 f3       	brcs	.-62     	; 0x2196 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while (1)
	{
		for(col=0; col<KEYPAD_NUM_COLS; ++col) /* loop for columns */
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	8f 5f       	subi	r24, 0xFF	; 255
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	08 f4       	brcc	.+2      	; 0x21e2 <KEYPAD_getPressedKey+0xa0>
    21e0:	b9 cf       	rjmp	.-142    	; 0x2154 <KEYPAD_getPressedKey+0x12>
    21e2:	b6 cf       	rjmp	.-148    	; 0x2150 <KEYPAD_getPressedKey+0xe>

000021e4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x6>
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <KEYPAD_4x4_adjustKeyNumber+0x8>
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    21f2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3c 83       	std	Y+4, r19	; 0x04
    21fc:	2b 83       	std	Y+3, r18	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	88 30       	cpi	r24, 0x08	; 8
    2204:	91 05       	cpc	r25, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2208:	70 c0       	rjmp	.+224    	; 0x22ea <KEYPAD_4x4_adjustKeyNumber+0x106>
    220a:	2b 81       	ldd	r18, Y+3	; 0x03
    220c:	3c 81       	ldd	r19, Y+4	; 0x04
    220e:	29 30       	cpi	r18, 0x09	; 9
    2210:	31 05       	cpc	r19, r1
    2212:	5c f5       	brge	.+86     	; 0x226a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	84 30       	cpi	r24, 0x04	; 4
    221a:	91 05       	cpc	r25, r1
    221c:	09 f4       	brne	.+2      	; 0x2220 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    221e:	59 c0       	rjmp	.+178    	; 0x22d2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	25 30       	cpi	r18, 0x05	; 5
    2226:	31 05       	cpc	r19, r1
    2228:	9c f4       	brge	.+38     	; 0x2250 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2234:	48 c0       	rjmp	.+144    	; 0x22c6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	23 30       	cpi	r18, 0x03	; 3
    223c:	31 05       	cpc	r19, r1
    223e:	0c f0       	brlt	.+2      	; 0x2242 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2240:	45 c0       	rjmp	.+138    	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	91 05       	cpc	r25, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    224c:	39 c0       	rjmp	.+114    	; 0x22c0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    224e:	67 c0       	rjmp	.+206    	; 0x231e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2250:	2b 81       	ldd	r18, Y+3	; 0x03
    2252:	3c 81       	ldd	r19, Y+4	; 0x04
    2254:	26 30       	cpi	r18, 0x06	; 6
    2256:	31 05       	cpc	r19, r1
    2258:	09 f4       	brne	.+2      	; 0x225c <KEYPAD_4x4_adjustKeyNumber+0x78>
    225a:	41 c0       	rjmp	.+130    	; 0x22de <KEYPAD_4x4_adjustKeyNumber+0xfa>
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	87 30       	cpi	r24, 0x07	; 7
    2262:	91 05       	cpc	r25, r1
    2264:	0c f0       	brlt	.+2      	; 0x2268 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2266:	3e c0       	rjmp	.+124    	; 0x22e4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2268:	37 c0       	rjmp	.+110    	; 0x22d8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    226a:	2b 81       	ldd	r18, Y+3	; 0x03
    226c:	3c 81       	ldd	r19, Y+4	; 0x04
    226e:	2c 30       	cpi	r18, 0x0C	; 12
    2270:	31 05       	cpc	r19, r1
    2272:	09 f4       	brne	.+2      	; 0x2276 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2274:	46 c0       	rjmp	.+140    	; 0x2302 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	8d 30       	cpi	r24, 0x0D	; 13
    227c:	91 05       	cpc	r25, r1
    227e:	5c f4       	brge	.+22     	; 0x2296 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2280:	2b 81       	ldd	r18, Y+3	; 0x03
    2282:	3c 81       	ldd	r19, Y+4	; 0x04
    2284:	2a 30       	cpi	r18, 0x0A	; 10
    2286:	31 05       	cpc	r19, r1
    2288:	b1 f1       	breq	.+108    	; 0x22f6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	8b 30       	cpi	r24, 0x0B	; 11
    2290:	91 05       	cpc	r25, r1
    2292:	a4 f5       	brge	.+104    	; 0x22fc <KEYPAD_4x4_adjustKeyNumber+0x118>
    2294:	2d c0       	rjmp	.+90     	; 0x22f0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	2e 30       	cpi	r18, 0x0E	; 14
    229c:	31 05       	cpc	r19, r1
    229e:	b9 f1       	breq	.+110    	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	8e 30       	cpi	r24, 0x0E	; 14
    22a6:	91 05       	cpc	r25, r1
    22a8:	7c f1       	brlt	.+94     	; 0x2308 <KEYPAD_4x4_adjustKeyNumber+0x124>
    22aa:	2b 81       	ldd	r18, Y+3	; 0x03
    22ac:	3c 81       	ldd	r19, Y+4	; 0x04
    22ae:	2f 30       	cpi	r18, 0x0F	; 15
    22b0:	31 05       	cpc	r19, r1
    22b2:	79 f1       	breq	.+94     	; 0x2312 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	80 31       	cpi	r24, 0x10	; 16
    22ba:	91 05       	cpc	r25, r1
    22bc:	69 f1       	breq	.+90     	; 0x2318 <KEYPAD_4x4_adjustKeyNumber+0x134>
    22be:	2f c0       	rjmp	.+94     	; 0x231e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7; 		break;
    22c0:	87 e0       	ldi	r24, 0x07	; 7
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	2e c0       	rjmp	.+92     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 2: keypad_button = 8; 		break;
    22c6:	88 e0       	ldi	r24, 0x08	; 8
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	2b c0       	rjmp	.+86     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 3: keypad_button = 9; 		break;
    22cc:	89 e0       	ldi	r24, 0x09	; 9
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	28 c0       	rjmp	.+80     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 4: keypad_button = '%'; 	break; // ASCII Code of %
    22d2:	85 e2       	ldi	r24, 0x25	; 37
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	25 c0       	rjmp	.+74     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 5: keypad_button = 4; 		break;
    22d8:	84 e0       	ldi	r24, 0x04	; 4
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	22 c0       	rjmp	.+68     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 6: keypad_button = 5; 		break;
    22de:	85 e0       	ldi	r24, 0x05	; 5
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	1f c0       	rjmp	.+62     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 7: keypad_button = 6; 		break;
    22e4:	86 e0       	ldi	r24, 0x06	; 6
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	1c c0       	rjmp	.+56     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 8: keypad_button = '*'; 	break; /* ASCII Code of '*' */
    22ea:	8a e2       	ldi	r24, 0x2A	; 42
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	19 c0       	rjmp	.+50     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 9: keypad_button = 1; 		break;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	16 c0       	rjmp	.+44     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 10: keypad_button = 2; 	break;
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	13 c0       	rjmp	.+38     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 11: keypad_button = 3; 	break;
    22fc:	83 e0       	ldi	r24, 0x03	; 3
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	10 c0       	rjmp	.+32     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 12: keypad_button = '-'; 	break; /* ASCII Code of '-' */
    2302:	8d e2       	ldi	r24, 0x2D	; 45
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	0d c0       	rjmp	.+26     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 13: keypad_button = 13; 	break;  /* ASCII of Enter */
    2308:	8d e0       	ldi	r24, 0x0D	; 13
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	0a c0       	rjmp	.+20     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 14: keypad_button = 0; 	break;
    230e:	19 82       	std	Y+1, r1	; 0x01
    2310:	08 c0       	rjmp	.+16     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 15: keypad_button = '='; 	break; /* ASCII Code of '=' */
    2312:	8d e3       	ldi	r24, 0x3D	; 61
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	05 c0       	rjmp	.+10     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		case 16: keypad_button = '+'; 	break; /* ASCII Code of '+' */
    2318:	8b e2       	ldi	r24, 0x2B	; 43
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	02 c0       	rjmp	.+4      	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		default: keypad_button = button_number;  	break;
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
	}
	return keypad_button;
    2322:	89 81       	ldd	r24, Y+1	; 0x01
}
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	65 e0       	ldi	r22, 0x05	; 5
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	66 e0       	ldi	r22, 0x06	; 6
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	67 e0       	ldi	r22, 0x07	; 7
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	6f ef       	ldi	r22, 0xFF	; 255
    235c:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);		/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2360:	88 e3       	ldi	r24, 0x38	; 56
    2362:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF);					/* cursor off */
    2366:	8c e0       	ldi	r24, 0x0C	; 12
    2368:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND);					/* clear LCD at the beginning */
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_sendCommand>
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	e9 97       	sbiw	r28, 0x39	; 57
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);	/* Instruction Mode RS=0 */
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	65 e0       	ldi	r22, 0x05	; 5
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	66 e0       	ldi	r22, 0x06	; 6
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e8       	ldi	r26, 0x80	; 128
    23a8:	bf e3       	ldi	r27, 0x3F	; 63
    23aa:	8d ab       	std	Y+53, r24	; 0x35
    23ac:	9e ab       	std	Y+54, r25	; 0x36
    23ae:	af ab       	std	Y+55, r26	; 0x37
    23b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	6d a9       	ldd	r22, Y+53	; 0x35
    23b4:	7e a9       	ldd	r23, Y+54	; 0x36
    23b6:	8f a9       	ldd	r24, Y+55	; 0x37
    23b8:	98 ad       	ldd	r25, Y+56	; 0x38
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a ef       	ldi	r20, 0xFA	; 250
    23c0:	54 e4       	ldi	r21, 0x44	; 68
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	89 ab       	std	Y+49, r24	; 0x31
    23cc:	9a ab       	std	Y+50, r25	; 0x32
    23ce:	ab ab       	std	Y+51, r26	; 0x33
    23d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d2:	69 a9       	ldd	r22, Y+49	; 0x31
    23d4:	7a a9       	ldd	r23, Y+50	; 0x32
    23d6:	8b a9       	ldd	r24, Y+51	; 0x33
    23d8:	9c a9       	ldd	r25, Y+52	; 0x34
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <LCD_sendCommand+0x7c>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	98 ab       	std	Y+48, r25	; 0x30
    23f0:	8f a7       	std	Y+47, r24	; 0x2f
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    23f4:	69 a9       	ldd	r22, Y+49	; 0x31
    23f6:	7a a9       	ldd	r23, Y+50	; 0x32
    23f8:	8b a9       	ldd	r24, Y+51	; 0x33
    23fa:	9c a9       	ldd	r25, Y+52	; 0x34
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	6d a9       	ldd	r22, Y+53	; 0x35
    240e:	7e a9       	ldd	r23, Y+54	; 0x36
    2410:	8f a9       	ldd	r24, Y+55	; 0x37
    2412:	98 ad       	ldd	r25, Y+56	; 0x38
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	98 ab       	std	Y+48, r25	; 0x30
    2432:	8f a7       	std	Y+47, r24	; 0x2f
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <LCD_sendCommand+0xdc>
    2436:	88 ec       	ldi	r24, 0xC8	; 200
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9e a7       	std	Y+46, r25	; 0x2e
    243c:	8d a7       	std	Y+45, r24	; 0x2d
    243e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2440:	9e a5       	ldd	r25, Y+46	; 0x2e
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <LCD_sendCommand+0xca>
    2446:	9e a7       	std	Y+46, r25	; 0x2e
    2448:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	8f a5       	ldd	r24, Y+47	; 0x2f
    244c:	98 a9       	ldd	r25, Y+48	; 0x30
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	98 ab       	std	Y+48, r25	; 0x30
    2452:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8f a5       	ldd	r24, Y+47	; 0x2f
    2456:	98 a9       	ldd	r25, Y+48	; 0x30
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <LCD_sendCommand+0xbe>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	69 a9       	ldd	r22, Y+49	; 0x31
    2460:	7a a9       	ldd	r23, Y+50	; 0x32
    2462:	8b a9       	ldd	r24, Y+51	; 0x33
    2464:	9c a9       	ldd	r25, Y+52	; 0x34
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	98 ab       	std	Y+48, r25	; 0x30
    2470:	8f a7       	std	Y+47, r24	; 0x2f
    2472:	8f a5       	ldd	r24, Y+47	; 0x2f
    2474:	98 a9       	ldd	r25, Y+48	; 0x30
    2476:	9c a7       	std	Y+44, r25	; 0x2c
    2478:	8b a7       	std	Y+43, r24	; 0x2b
    247a:	8b a5       	ldd	r24, Y+43	; 0x2b
    247c:	9c a5       	ldd	r25, Y+44	; 0x2c
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_sendCommand+0x106>
    2482:	9c a7       	std	Y+44, r25	; 0x2c
    2484:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	67 e0       	ldi	r22, 0x07	; 7
    248a:	41 e0       	ldi	r20, 0x01	; 1
    248c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e8       	ldi	r26, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	8f a3       	std	Y+39, r24	; 0x27
    249a:	98 a7       	std	Y+40, r25	; 0x28
    249c:	a9 a7       	std	Y+41, r26	; 0x29
    249e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6f a1       	ldd	r22, Y+39	; 0x27
    24a2:	78 a5       	ldd	r23, Y+40	; 0x28
    24a4:	89 a5       	ldd	r24, Y+41	; 0x29
    24a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8b a3       	std	Y+35, r24	; 0x23
    24ba:	9c a3       	std	Y+36, r25	; 0x24
    24bc:	ad a3       	std	Y+37, r26	; 0x25
    24be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c0:	6b a1       	ldd	r22, Y+35	; 0x23
    24c2:	7c a1       	ldd	r23, Y+36	; 0x24
    24c4:	8d a1       	ldd	r24, Y+37	; 0x25
    24c6:	9e a1       	ldd	r25, Y+38	; 0x26
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <LCD_sendCommand+0x16a>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9a a3       	std	Y+34, r25	; 0x22
    24de:	89 a3       	std	Y+33, r24	; 0x21
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    24e2:	6b a1       	ldd	r22, Y+35	; 0x23
    24e4:	7c a1       	ldd	r23, Y+36	; 0x24
    24e6:	8d a1       	ldd	r24, Y+37	; 0x25
    24e8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6f a1       	ldd	r22, Y+39	; 0x27
    24fc:	78 a5       	ldd	r23, Y+40	; 0x28
    24fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2500:	9a a5       	ldd	r25, Y+42	; 0x2a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <LCD_sendCommand+0x1ca>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	98 a3       	std	Y+32, r25	; 0x20
    252a:	8f 8f       	std	Y+31, r24	; 0x1f
    252c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    252e:	98 a1       	ldd	r25, Y+32	; 0x20
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_sendCommand+0x1b8>
    2534:	98 a3       	std	Y+32, r25	; 0x20
    2536:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	89 a1       	ldd	r24, Y+33	; 0x21
    253a:	9a a1       	ldd	r25, Y+34	; 0x22
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9a a3       	std	Y+34, r25	; 0x22
    2540:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	89 a1       	ldd	r24, Y+33	; 0x21
    2544:	9a a1       	ldd	r25, Y+34	; 0x22
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <LCD_sendCommand+0x1ac>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9a a3       	std	Y+34, r25	; 0x22
    255e:	89 a3       	std	Y+33, r24	; 0x21
    2560:	89 a1       	ldd	r24, Y+33	; 0x21
    2562:	9a a1       	ldd	r25, Y+34	; 0x22
    2564:	9e 8f       	std	Y+30, r25	; 0x1e
    2566:	8d 8f       	std	Y+29, r24	; 0x1d
    2568:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_sendCommand+0x1f4>
    2570:	9e 8f       	std	Y+30, r25	; 0x1e
    2572:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command);					/* out the required command to the data bus D0 --> D7 */
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	69 ad       	ldd	r22, Y+57	; 0x39
    2578:	0e 94 18 10 	call	0x2030	; 0x2030 <GPIO_writePort>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	a0 e8       	ldi	r26, 0x80	; 128
    2582:	bf e3       	ldi	r27, 0x3F	; 63
    2584:	89 8f       	std	Y+25, r24	; 0x19
    2586:	9a 8f       	std	Y+26, r25	; 0x1a
    2588:	ab 8f       	std	Y+27, r26	; 0x1b
    258a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258c:	69 8d       	ldd	r22, Y+25	; 0x19
    258e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2590:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2592:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	4a ef       	ldi	r20, 0xFA	; 250
    259a:	54 e4       	ldi	r21, 0x44	; 68
    259c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	8d 8b       	std	Y+21, r24	; 0x15
    25a6:	9e 8b       	std	Y+22, r25	; 0x16
    25a8:	af 8b       	std	Y+23, r26	; 0x17
    25aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ac:	6d 89       	ldd	r22, Y+21	; 0x15
    25ae:	7e 89       	ldd	r23, Y+22	; 0x16
    25b0:	8f 89       	ldd	r24, Y+23	; 0x17
    25b2:	98 8d       	ldd	r25, Y+24	; 0x18
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e8       	ldi	r20, 0x80	; 128
    25ba:	5f e3       	ldi	r21, 0x3F	; 63
    25bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c0:	88 23       	and	r24, r24
    25c2:	2c f4       	brge	.+10     	; 0x25ce <LCD_sendCommand+0x256>
		__ticks = 1;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9c 8b       	std	Y+20, r25	; 0x14
    25ca:	8b 8b       	std	Y+19, r24	; 0x13
    25cc:	3f c0       	rjmp	.+126    	; 0x264c <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    25ce:	6d 89       	ldd	r22, Y+21	; 0x15
    25d0:	7e 89       	ldd	r23, Y+22	; 0x16
    25d2:	8f 89       	ldd	r24, Y+23	; 0x17
    25d4:	98 8d       	ldd	r25, Y+24	; 0x18
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	3f ef       	ldi	r19, 0xFF	; 255
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	57 e4       	ldi	r21, 0x47	; 71
    25de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e2:	18 16       	cp	r1, r24
    25e4:	4c f5       	brge	.+82     	; 0x2638 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e6:	69 8d       	ldd	r22, Y+25	; 0x19
    25e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e2       	ldi	r20, 0x20	; 32
    25f4:	51 e4       	ldi	r21, 0x41	; 65
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	bc 01       	movw	r22, r24
    2600:	cd 01       	movw	r24, r26
    2602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
    260e:	0f c0       	rjmp	.+30     	; 0x262e <LCD_sendCommand+0x2b6>
    2610:	88 ec       	ldi	r24, 0xC8	; 200
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9a 8b       	std	Y+18, r25	; 0x12
    2616:	89 8b       	std	Y+17, r24	; 0x11
    2618:	89 89       	ldd	r24, Y+17	; 0x11
    261a:	9a 89       	ldd	r25, Y+18	; 0x12
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <LCD_sendCommand+0x2a4>
    2620:	9a 8b       	std	Y+18, r25	; 0x12
    2622:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	9c 8b       	std	Y+20, r25	; 0x14
    262c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262e:	8b 89       	ldd	r24, Y+19	; 0x13
    2630:	9c 89       	ldd	r25, Y+20	; 0x14
    2632:	00 97       	sbiw	r24, 0x00	; 0
    2634:	69 f7       	brne	.-38     	; 0x2610 <LCD_sendCommand+0x298>
    2636:	14 c0       	rjmp	.+40     	; 0x2660 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2638:	6d 89       	ldd	r22, Y+21	; 0x15
    263a:	7e 89       	ldd	r23, Y+22	; 0x16
    263c:	8f 89       	ldd	r24, Y+23	; 0x17
    263e:	98 8d       	ldd	r25, Y+24	; 0x18
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9c 8b       	std	Y+20, r25	; 0x14
    264a:	8b 8b       	std	Y+19, r24	; 0x13
    264c:	8b 89       	ldd	r24, Y+19	; 0x13
    264e:	9c 89       	ldd	r25, Y+20	; 0x14
    2650:	98 8b       	std	Y+16, r25	; 0x10
    2652:	8f 87       	std	Y+15, r24	; 0x0f
    2654:	8f 85       	ldd	r24, Y+15	; 0x0f
    2656:	98 89       	ldd	r25, Y+16	; 0x10
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <LCD_sendCommand+0x2e0>
    265c:	98 8b       	std	Y+16, r25	; 0x10
    265e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	67 e0       	ldi	r22, 0x07	; 7
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e8       	ldi	r26, 0x80	; 128
    2670:	bf e3       	ldi	r27, 0x3F	; 63
    2672:	8b 87       	std	Y+11, r24	; 0x0b
    2674:	9c 87       	std	Y+12, r25	; 0x0c
    2676:	ad 87       	std	Y+13, r26	; 0x0d
    2678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	98 87       	std	Y+8, r25	; 0x08
    2696:	a9 87       	std	Y+9, r26	; 0x09
    2698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_sendCommand+0x344>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_sendCommand+0x3a4>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_sendCommand+0x392>
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_sendCommand+0x386>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_sendCommand+0x3ce>
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
    274e:	e9 96       	adiw	r28, 0x39	; 57
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2760:	df 93       	push	r29
    2762:	cf 93       	push	r28
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	e9 97       	sbiw	r28, 0x39	; 57
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);	/* Instruction Mode RS=1 */
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	65 e0       	ldi	r22, 0x05	; 5
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);	/* write data to LCD so RW=0 */
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	66 e0       	ldi	r22, 0x06	; 6
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a0 e8       	ldi	r26, 0x80	; 128
    2790:	bf e3       	ldi	r27, 0x3F	; 63
    2792:	8d ab       	std	Y+53, r24	; 0x35
    2794:	9e ab       	std	Y+54, r25	; 0x36
    2796:	af ab       	std	Y+55, r26	; 0x37
    2798:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	6d a9       	ldd	r22, Y+53	; 0x35
    279c:	7e a9       	ldd	r23, Y+54	; 0x36
    279e:	8f a9       	ldd	r24, Y+55	; 0x37
    27a0:	98 ad       	ldd	r25, Y+56	; 0x38
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a ef       	ldi	r20, 0xFA	; 250
    27a8:	54 e4       	ldi	r21, 0x44	; 68
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	89 ab       	std	Y+49, r24	; 0x31
    27b4:	9a ab       	std	Y+50, r25	; 0x32
    27b6:	ab ab       	std	Y+51, r26	; 0x33
    27b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27ba:	69 a9       	ldd	r22, Y+49	; 0x31
    27bc:	7a a9       	ldd	r23, Y+50	; 0x32
    27be:	8b a9       	ldd	r24, Y+51	; 0x33
    27c0:	9c a9       	ldd	r25, Y+52	; 0x34
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <LCD_displayCharacter+0x7c>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	98 ab       	std	Y+48, r25	; 0x30
    27d8:	8f a7       	std	Y+47, r24	; 0x2f
    27da:	3f c0       	rjmp	.+126    	; 0x285a <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    27dc:	69 a9       	ldd	r22, Y+49	; 0x31
    27de:	7a a9       	ldd	r23, Y+50	; 0x32
    27e0:	8b a9       	ldd	r24, Y+51	; 0x33
    27e2:	9c a9       	ldd	r25, Y+52	; 0x34
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	6d a9       	ldd	r22, Y+53	; 0x35
    27f6:	7e a9       	ldd	r23, Y+54	; 0x36
    27f8:	8f a9       	ldd	r24, Y+55	; 0x37
    27fa:	98 ad       	ldd	r25, Y+56	; 0x38
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	98 ab       	std	Y+48, r25	; 0x30
    281a:	8f a7       	std	Y+47, r24	; 0x2f
    281c:	0f c0       	rjmp	.+30     	; 0x283c <LCD_displayCharacter+0xdc>
    281e:	88 ec       	ldi	r24, 0xC8	; 200
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	9e a7       	std	Y+46, r25	; 0x2e
    2824:	8d a7       	std	Y+45, r24	; 0x2d
    2826:	8d a5       	ldd	r24, Y+45	; 0x2d
    2828:	9e a5       	ldd	r25, Y+46	; 0x2e
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_displayCharacter+0xca>
    282e:	9e a7       	std	Y+46, r25	; 0x2e
    2830:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8f a5       	ldd	r24, Y+47	; 0x2f
    2834:	98 a9       	ldd	r25, Y+48	; 0x30
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	98 ab       	std	Y+48, r25	; 0x30
    283a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8f a5       	ldd	r24, Y+47	; 0x2f
    283e:	98 a9       	ldd	r25, Y+48	; 0x30
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <LCD_displayCharacter+0xbe>
    2844:	14 c0       	rjmp	.+40     	; 0x286e <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	69 a9       	ldd	r22, Y+49	; 0x31
    2848:	7a a9       	ldd	r23, Y+50	; 0x32
    284a:	8b a9       	ldd	r24, Y+51	; 0x33
    284c:	9c a9       	ldd	r25, Y+52	; 0x34
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	98 ab       	std	Y+48, r25	; 0x30
    2858:	8f a7       	std	Y+47, r24	; 0x2f
    285a:	8f a5       	ldd	r24, Y+47	; 0x2f
    285c:	98 a9       	ldd	r25, Y+48	; 0x30
    285e:	9c a7       	std	Y+44, r25	; 0x2c
    2860:	8b a7       	std	Y+43, r24	; 0x2b
    2862:	8b a5       	ldd	r24, Y+43	; 0x2b
    2864:	9c a5       	ldd	r25, Y+44	; 0x2c
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_displayCharacter+0x106>
    286a:	9c a7       	std	Y+44, r25	; 0x2c
    286c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);												/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);		/* Enable LCD E=1 */
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	67 e0       	ldi	r22, 0x07	; 7
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e8       	ldi	r26, 0x80	; 128
    287e:	bf e3       	ldi	r27, 0x3F	; 63
    2880:	8f a3       	std	Y+39, r24	; 0x27
    2882:	98 a7       	std	Y+40, r25	; 0x28
    2884:	a9 a7       	std	Y+41, r26	; 0x29
    2886:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6f a1       	ldd	r22, Y+39	; 0x27
    288a:	78 a5       	ldd	r23, Y+40	; 0x28
    288c:	89 a5       	ldd	r24, Y+41	; 0x29
    288e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8b a3       	std	Y+35, r24	; 0x23
    28a2:	9c a3       	std	Y+36, r25	; 0x24
    28a4:	ad a3       	std	Y+37, r26	; 0x25
    28a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_displayCharacter+0x16a>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9a a3       	std	Y+34, r25	; 0x22
    28c6:	89 a3       	std	Y+33, r24	; 0x21
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    28ca:	6b a1       	ldd	r22, Y+35	; 0x23
    28cc:	7c a1       	ldd	r23, Y+36	; 0x24
    28ce:	8d a1       	ldd	r24, Y+37	; 0x25
    28d0:	9e a1       	ldd	r25, Y+38	; 0x26
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6f a1       	ldd	r22, Y+39	; 0x27
    28e4:	78 a5       	ldd	r23, Y+40	; 0x28
    28e6:	89 a5       	ldd	r24, Y+41	; 0x29
    28e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9a a3       	std	Y+34, r25	; 0x22
    2908:	89 a3       	std	Y+33, r24	; 0x21
    290a:	0f c0       	rjmp	.+30     	; 0x292a <LCD_displayCharacter+0x1ca>
    290c:	88 ec       	ldi	r24, 0xC8	; 200
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	98 a3       	std	Y+32, r25	; 0x20
    2912:	8f 8f       	std	Y+31, r24	; 0x1f
    2914:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2916:	98 a1       	ldd	r25, Y+32	; 0x20
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_displayCharacter+0x1b8>
    291c:	98 a3       	std	Y+32, r25	; 0x20
    291e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	89 a1       	ldd	r24, Y+33	; 0x21
    2922:	9a a1       	ldd	r25, Y+34	; 0x22
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9a a3       	std	Y+34, r25	; 0x22
    2928:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	89 a1       	ldd	r24, Y+33	; 0x21
    292c:	9a a1       	ldd	r25, Y+34	; 0x22
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <LCD_displayCharacter+0x1ac>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6b a1       	ldd	r22, Y+35	; 0x23
    2936:	7c a1       	ldd	r23, Y+36	; 0x24
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9a a3       	std	Y+34, r25	; 0x22
    2946:	89 a3       	std	Y+33, r24	; 0x21
    2948:	89 a1       	ldd	r24, Y+33	; 0x21
    294a:	9a a1       	ldd	r25, Y+34	; 0x22
    294c:	9e 8f       	std	Y+30, r25	; 0x1e
    294e:	8d 8f       	std	Y+29, r24	; 0x1d
    2950:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2952:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_displayCharacter+0x1f4>
    2958:	9e 8f       	std	Y+30, r25	; 0x1e
    295a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);												/* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data);						/* out the required data to the data bus D0 --> D7 */
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	69 ad       	ldd	r22, Y+57	; 0x39
    2960:	0e 94 18 10 	call	0x2030	; 0x2030 <GPIO_writePort>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e8       	ldi	r26, 0x80	; 128
    296a:	bf e3       	ldi	r27, 0x3F	; 63
    296c:	89 8f       	std	Y+25, r24	; 0x19
    296e:	9a 8f       	std	Y+26, r25	; 0x1a
    2970:	ab 8f       	std	Y+27, r26	; 0x1b
    2972:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	69 8d       	ldd	r22, Y+25	; 0x19
    2976:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8d 8b       	std	Y+21, r24	; 0x15
    298e:	9e 8b       	std	Y+22, r25	; 0x16
    2990:	af 8b       	std	Y+23, r26	; 0x17
    2992:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2994:	6d 89       	ldd	r22, Y+21	; 0x15
    2996:	7e 89       	ldd	r23, Y+22	; 0x16
    2998:	8f 89       	ldd	r24, Y+23	; 0x17
    299a:	98 8d       	ldd	r25, Y+24	; 0x18
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <LCD_displayCharacter+0x256>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9c 8b       	std	Y+20, r25	; 0x14
    29b2:	8b 8b       	std	Y+19, r24	; 0x13
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    29b6:	6d 89       	ldd	r22, Y+21	; 0x15
    29b8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ba:	8f 89       	ldd	r24, Y+23	; 0x17
    29bc:	98 8d       	ldd	r25, Y+24	; 0x18
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	69 8d       	ldd	r22, Y+25	; 0x19
    29d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9c 8b       	std	Y+20, r25	; 0x14
    29f4:	8b 8b       	std	Y+19, r24	; 0x13
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <LCD_displayCharacter+0x2b6>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9a 8b       	std	Y+18, r25	; 0x12
    29fe:	89 8b       	std	Y+17, r24	; 0x11
    2a00:	89 89       	ldd	r24, Y+17	; 0x11
    2a02:	9a 89       	ldd	r25, Y+18	; 0x12
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_displayCharacter+0x2a4>
    2a08:	9a 8b       	std	Y+18, r25	; 0x12
    2a0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9c 8b       	std	Y+20, r25	; 0x14
    2a14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8b 89       	ldd	r24, Y+19	; 0x13
    2a18:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <LCD_displayCharacter+0x298>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6d 89       	ldd	r22, Y+21	; 0x15
    2a22:	7e 89       	ldd	r23, Y+22	; 0x16
    2a24:	8f 89       	ldd	r24, Y+23	; 0x17
    2a26:	98 8d       	ldd	r25, Y+24	; 0x18
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9c 8b       	std	Y+20, r25	; 0x14
    2a32:	8b 8b       	std	Y+19, r24	; 0x13
    2a34:	8b 89       	ldd	r24, Y+19	; 0x13
    2a36:	9c 89       	ldd	r25, Y+20	; 0x14
    2a38:	98 8b       	std	Y+16, r25	; 0x10
    2a3a:	8f 87       	std	Y+15, r24	; 0x0f
    2a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3e:	98 89       	ldd	r25, Y+16	; 0x10
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <LCD_displayCharacter+0x2e0>
    2a44:	98 8b       	std	Y+16, r25	; 0x10
    2a46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);												/* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);		/* Disable LCD E=0 */
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	67 e0       	ldi	r22, 0x07	; 7
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <GPIO_writePin>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	a0 e8       	ldi	r26, 0x80	; 128
    2a58:	bf e3       	ldi	r27, 0x3F	; 63
    2a5a:	8b 87       	std	Y+11, r24	; 0x0b
    2a5c:	9c 87       	std	Y+12, r25	; 0x0c
    2a5e:	ad 87       	std	Y+13, r26	; 0x0d
    2a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	4a ef       	ldi	r20, 0xFA	; 250
    2a70:	54 e4       	ldi	r21, 0x44	; 68
    2a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8f 83       	std	Y+7, r24	; 0x07
    2a7c:	98 87       	std	Y+8, r25	; 0x08
    2a7e:	a9 87       	std	Y+9, r26	; 0x09
    2a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	3f c0       	rjmp	.+126    	; 0x2b22 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	4c f5       	brge	.+82     	; 0x2b0e <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <LCD_displayCharacter+0x3a4>
    2ae6:	88 ec       	ldi	r24, 0xC8	; 200
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9c 83       	std	Y+4, r25	; 0x04
    2aec:	8b 83       	std	Y+3, r24	; 0x03
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <LCD_displayCharacter+0x392>
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	69 f7       	brne	.-38     	; 0x2ae6 <LCD_displayCharacter+0x386>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <LCD_displayCharacter+0x3ce>
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);												/* delay for processing Th = 13ns */
}
    2b36:	e9 96       	adiw	r28, 0x39	; 57
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	08 95       	ret

00002b48 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b48:	df 93       	push	r29
    2b4a:	cf 93       	push	r28
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <LCD_displayString+0x6>
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	0a c0       	rjmp	.+20     	; 0x2b6c <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    2b58:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5c:	80 81       	ld	r24, Z
    2b5e:	0e 94 b0 13 	call	0x2760	; 0x2760 <LCD_displayCharacter>
		Str++;
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	9a 81       	ldd	r25, Y+2	; 0x02
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	9a 83       	std	Y+2, r25	; 0x02
    2b6a:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	80 81       	ld	r24, Z
    2b72:	88 23       	and	r24, r24
    2b74:	89 f7       	brne	.-30     	; 0x2b58 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(Str[i]);
		++i;
	}
	 *********************************************************/
}
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <LCD_moveCursor+0x6>
    2b86:	00 d0       	rcall	.+0      	; 0x2b88 <LCD_moveCursor+0x8>
    2b88:	0f 92       	push	r0
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	8a 83       	std	Y+2, r24	; 0x02
    2b90:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	3d 83       	std	Y+5, r19	; 0x05
    2b9a:	2c 83       	std	Y+4, r18	; 0x04
    2b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	91 05       	cpc	r25, r1
    2ba4:	c1 f0       	breq	.+48     	; 0x2bd6 <LCD_moveCursor+0x56>
    2ba6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba8:	3d 81       	ldd	r19, Y+5	; 0x05
    2baa:	22 30       	cpi	r18, 0x02	; 2
    2bac:	31 05       	cpc	r19, r1
    2bae:	2c f4       	brge	.+10     	; 0x2bba <LCD_moveCursor+0x3a>
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb4:	00 97       	sbiw	r24, 0x00	; 0
    2bb6:	61 f0       	breq	.+24     	; 0x2bd0 <LCD_moveCursor+0x50>
    2bb8:	19 c0       	rjmp	.+50     	; 0x2bec <LCD_moveCursor+0x6c>
    2bba:	2c 81       	ldd	r18, Y+4	; 0x04
    2bbc:	3d 81       	ldd	r19, Y+5	; 0x05
    2bbe:	22 30       	cpi	r18, 0x02	; 2
    2bc0:	31 05       	cpc	r19, r1
    2bc2:	69 f0       	breq	.+26     	; 0x2bde <LCD_moveCursor+0x5e>
    2bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc8:	83 30       	cpi	r24, 0x03	; 3
    2bca:	91 05       	cpc	r25, r1
    2bcc:	61 f0       	breq	.+24     	; 0x2be6 <LCD_moveCursor+0x66>
    2bce:	0e c0       	rjmp	.+28     	; 0x2bec <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;			break;
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	0b c0       	rjmp	.+22     	; 0x2bec <LCD_moveCursor+0x6c>
	case 1:
		lcd_memory_address=col+0x40;	break;
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	80 5c       	subi	r24, 0xC0	; 192
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	07 c0       	rjmp	.+14     	; 0x2bec <LCD_moveCursor+0x6c>
	case 2:
		lcd_memory_address=col+0x10;	break;
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	80 5f       	subi	r24, 0xF0	; 240
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	03 c0       	rjmp	.+6      	; 0x2bec <LCD_moveCursor+0x6c>
	case 3:
		lcd_memory_address=col+0x50;	break;
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	80 5b       	subi	r24, 0xB0	; 176
    2bea:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	80 68       	ori	r24, 0x80	; 128
    2bf0:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_sendCommand>
}
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <LCD_displayStringRowColumn+0x6>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <LCD_displayStringRowColumn+0x8>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	6a 83       	std	Y+2, r22	; 0x02
    2c14:	5c 83       	std	Y+4, r21	; 0x04
    2c16:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); 		/* go to to the required LCD position */
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	6a 81       	ldd	r22, Y+2	; 0x02
    2c1c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <LCD_moveCursor>
	LCD_displayString(Str); 		/* display the string */
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
    2c24:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
}
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int num)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	62 97       	sbiw	r28, 0x12	; 18
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	9a 8b       	std	Y+18, r25	; 0x12
    2c4c:	89 8b       	std	Y+17, r24	; 0x11
	   char buff[16]; /* String to hold the ascii result */
	   itoa(num,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c4e:	89 89       	ldd	r24, Y+17	; 0x11
    2c50:	9a 89       	ldd	r25, Y+18	; 0x12
    2c52:	9e 01       	movw	r18, r28
    2c54:	2f 5f       	subi	r18, 0xFF	; 255
    2c56:	3f 4f       	sbci	r19, 0xFF	; 255
    2c58:	b9 01       	movw	r22, r18
    2c5a:	4a e0       	ldi	r20, 0x0A	; 10
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	0e 94 35 1b 	call	0x366a	; 0x366a <itoa>
	   LCD_displayString(buff); /* Display the string */
    2c62:	ce 01       	movw	r24, r28
    2c64:	01 96       	adiw	r24, 0x01	; 1
    2c66:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <LCD_displayString>
}
    2c6a:	62 96       	adiw	r28, 0x12	; 18
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_sendCommand>
}
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <__vector_11>:
 *                                	Interrupt Service Routine                                      *
 ***************************************************************************************************/

/*	Timer0 callback function for overflow mode*/
ISR(TIMER0_OVF_vect)
{
    2c90:	1f 92       	push	r1
    2c92:	0f 92       	push	r0
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	0f 92       	push	r0
    2c98:	11 24       	eor	r1, r1
    2c9a:	2f 93       	push	r18
    2c9c:	3f 93       	push	r19
    2c9e:	4f 93       	push	r20
    2ca0:	5f 93       	push	r21
    2ca2:	6f 93       	push	r22
    2ca4:	7f 93       	push	r23
    2ca6:	8f 93       	push	r24
    2ca8:	9f 93       	push	r25
    2caa:	af 93       	push	r26
    2cac:	bf 93       	push	r27
    2cae:	ef 93       	push	r30
    2cb0:	ff 93       	push	r31
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_callBackPtr != NULL_PTR)
    2cba:	80 91 54 01 	lds	r24, 0x0154
    2cbe:	90 91 55 01 	lds	r25, 0x0155
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	29 f0       	breq	.+10     	; 0x2cd0 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* call the function using pointer to function g_Timer0_callBackPtr(); */
    2cc6:	e0 91 54 01 	lds	r30, 0x0154
    2cca:	f0 91 55 01 	lds	r31, 0x0155
    2cce:	09 95       	icall
	}
}
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	ff 91       	pop	r31
    2cd6:	ef 91       	pop	r30
    2cd8:	bf 91       	pop	r27
    2cda:	af 91       	pop	r26
    2cdc:	9f 91       	pop	r25
    2cde:	8f 91       	pop	r24
    2ce0:	7f 91       	pop	r23
    2ce2:	6f 91       	pop	r22
    2ce4:	5f 91       	pop	r21
    2ce6:	4f 91       	pop	r20
    2ce8:	3f 91       	pop	r19
    2cea:	2f 91       	pop	r18
    2cec:	0f 90       	pop	r0
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	0f 90       	pop	r0
    2cf2:	1f 90       	pop	r1
    2cf4:	18 95       	reti

00002cf6 <__vector_10>:

/*	Timer0 callback function for compare mode*/
ISR(TIMER0_COMP_vect)
{
    2cf6:	1f 92       	push	r1
    2cf8:	0f 92       	push	r0
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	0f 92       	push	r0
    2cfe:	11 24       	eor	r1, r1
    2d00:	2f 93       	push	r18
    2d02:	3f 93       	push	r19
    2d04:	4f 93       	push	r20
    2d06:	5f 93       	push	r21
    2d08:	6f 93       	push	r22
    2d0a:	7f 93       	push	r23
    2d0c:	8f 93       	push	r24
    2d0e:	9f 93       	push	r25
    2d10:	af 93       	push	r26
    2d12:	bf 93       	push	r27
    2d14:	ef 93       	push	r30
    2d16:	ff 93       	push	r31
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer0_callBackPtr != NULL_PTR)
    2d20:	80 91 54 01 	lds	r24, 0x0154
    2d24:	90 91 55 01 	lds	r25, 0x0155
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	29 f0       	breq	.+10     	; 0x2d36 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* call the function using pointer to function g_Timer0_callBackPtr(); */
    2d2c:	e0 91 54 01 	lds	r30, 0x0154
    2d30:	f0 91 55 01 	lds	r31, 0x0155
    2d34:	09 95       	icall
	}
}
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	ff 91       	pop	r31
    2d3c:	ef 91       	pop	r30
    2d3e:	bf 91       	pop	r27
    2d40:	af 91       	pop	r26
    2d42:	9f 91       	pop	r25
    2d44:	8f 91       	pop	r24
    2d46:	7f 91       	pop	r23
    2d48:	6f 91       	pop	r22
    2d4a:	5f 91       	pop	r21
    2d4c:	4f 91       	pop	r20
    2d4e:	3f 91       	pop	r19
    2d50:	2f 91       	pop	r18
    2d52:	0f 90       	pop	r0
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	0f 90       	pop	r0
    2d58:	1f 90       	pop	r1
    2d5a:	18 95       	reti

00002d5c <__vector_9>:

/*	Timer1 callback function for overflow mode*/
ISR(TIMER1_OVF_vect)
{
    2d5c:	1f 92       	push	r1
    2d5e:	0f 92       	push	r0
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	0f 92       	push	r0
    2d64:	11 24       	eor	r1, r1
    2d66:	2f 93       	push	r18
    2d68:	3f 93       	push	r19
    2d6a:	4f 93       	push	r20
    2d6c:	5f 93       	push	r21
    2d6e:	6f 93       	push	r22
    2d70:	7f 93       	push	r23
    2d72:	8f 93       	push	r24
    2d74:	9f 93       	push	r25
    2d76:	af 93       	push	r26
    2d78:	bf 93       	push	r27
    2d7a:	ef 93       	push	r30
    2d7c:	ff 93       	push	r31
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_callBackPtr != NULL_PTR)
    2d86:	80 91 56 01 	lds	r24, 0x0156
    2d8a:	90 91 57 01 	lds	r25, 0x0157
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	29 f0       	breq	.+10     	; 0x2d9c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    2d92:	e0 91 56 01 	lds	r30, 0x0156
    2d96:	f0 91 57 01 	lds	r31, 0x0157
    2d9a:	09 95       	icall
	}
}
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	ff 91       	pop	r31
    2da2:	ef 91       	pop	r30
    2da4:	bf 91       	pop	r27
    2da6:	af 91       	pop	r26
    2da8:	9f 91       	pop	r25
    2daa:	8f 91       	pop	r24
    2dac:	7f 91       	pop	r23
    2dae:	6f 91       	pop	r22
    2db0:	5f 91       	pop	r21
    2db2:	4f 91       	pop	r20
    2db4:	3f 91       	pop	r19
    2db6:	2f 91       	pop	r18
    2db8:	0f 90       	pop	r0
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	0f 90       	pop	r0
    2dbe:	1f 90       	pop	r1
    2dc0:	18 95       	reti

00002dc2 <__vector_7>:

/*	Timer1 callback function for compare (A) mode*/
ISR(TIMER1_COMPA_vect)
{
    2dc2:	1f 92       	push	r1
    2dc4:	0f 92       	push	r0
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	0f 92       	push	r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	2f 93       	push	r18
    2dce:	3f 93       	push	r19
    2dd0:	4f 93       	push	r20
    2dd2:	5f 93       	push	r21
    2dd4:	6f 93       	push	r22
    2dd6:	7f 93       	push	r23
    2dd8:	8f 93       	push	r24
    2dda:	9f 93       	push	r25
    2ddc:	af 93       	push	r26
    2dde:	bf 93       	push	r27
    2de0:	ef 93       	push	r30
    2de2:	ff 93       	push	r31
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_callBackPtr != NULL_PTR)
    2dec:	80 91 56 01 	lds	r24, 0x0156
    2df0:	90 91 57 01 	lds	r25, 0x0157
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	29 f0       	breq	.+10     	; 0x2e02 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    2df8:	e0 91 56 01 	lds	r30, 0x0156
    2dfc:	f0 91 57 01 	lds	r31, 0x0157
    2e00:	09 95       	icall
	}
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	ff 91       	pop	r31
    2e08:	ef 91       	pop	r30
    2e0a:	bf 91       	pop	r27
    2e0c:	af 91       	pop	r26
    2e0e:	9f 91       	pop	r25
    2e10:	8f 91       	pop	r24
    2e12:	7f 91       	pop	r23
    2e14:	6f 91       	pop	r22
    2e16:	5f 91       	pop	r21
    2e18:	4f 91       	pop	r20
    2e1a:	3f 91       	pop	r19
    2e1c:	2f 91       	pop	r18
    2e1e:	0f 90       	pop	r0
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	0f 90       	pop	r0
    2e24:	1f 90       	pop	r1
    2e26:	18 95       	reti

00002e28 <__vector_8>:

/*	Timer1 callback function for compare (B) mode*/
ISR(TIMER1_COMPB_vect)
{
    2e28:	1f 92       	push	r1
    2e2a:	0f 92       	push	r0
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	0f 92       	push	r0
    2e30:	11 24       	eor	r1, r1
    2e32:	2f 93       	push	r18
    2e34:	3f 93       	push	r19
    2e36:	4f 93       	push	r20
    2e38:	5f 93       	push	r21
    2e3a:	6f 93       	push	r22
    2e3c:	7f 93       	push	r23
    2e3e:	8f 93       	push	r24
    2e40:	9f 93       	push	r25
    2e42:	af 93       	push	r26
    2e44:	bf 93       	push	r27
    2e46:	ef 93       	push	r30
    2e48:	ff 93       	push	r31
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer1_callBackPtr != NULL_PTR)
    2e52:	80 91 56 01 	lds	r24, 0x0156
    2e56:	90 91 57 01 	lds	r25, 0x0157
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	29 f0       	breq	.+10     	; 0x2e68 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* call the function using pointer to function g_Timer1_callBackPtr(); */
    2e5e:	e0 91 56 01 	lds	r30, 0x0156
    2e62:	f0 91 57 01 	lds	r31, 0x0157
    2e66:	09 95       	icall
	}
}
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	ff 91       	pop	r31
    2e6e:	ef 91       	pop	r30
    2e70:	bf 91       	pop	r27
    2e72:	af 91       	pop	r26
    2e74:	9f 91       	pop	r25
    2e76:	8f 91       	pop	r24
    2e78:	7f 91       	pop	r23
    2e7a:	6f 91       	pop	r22
    2e7c:	5f 91       	pop	r21
    2e7e:	4f 91       	pop	r20
    2e80:	3f 91       	pop	r19
    2e82:	2f 91       	pop	r18
    2e84:	0f 90       	pop	r0
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	0f 90       	pop	r0
    2e8a:	1f 90       	pop	r1
    2e8c:	18 95       	reti

00002e8e <__vector_5>:

/*	Timer2 callback function for overflow mode*/
ISR(TIMER2_OVF_vect)
{
    2e8e:	1f 92       	push	r1
    2e90:	0f 92       	push	r0
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	0f 92       	push	r0
    2e96:	11 24       	eor	r1, r1
    2e98:	2f 93       	push	r18
    2e9a:	3f 93       	push	r19
    2e9c:	4f 93       	push	r20
    2e9e:	5f 93       	push	r21
    2ea0:	6f 93       	push	r22
    2ea2:	7f 93       	push	r23
    2ea4:	8f 93       	push	r24
    2ea6:	9f 93       	push	r25
    2ea8:	af 93       	push	r26
    2eaa:	bf 93       	push	r27
    2eac:	ef 93       	push	r30
    2eae:	ff 93       	push	r31
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_callBackPtr != NULL_PTR)
    2eb8:	80 91 58 01 	lds	r24, 0x0158
    2ebc:	90 91 59 01 	lds	r25, 0x0159
    2ec0:	00 97       	sbiw	r24, 0x00	; 0
    2ec2:	29 f0       	breq	.+10     	; 0x2ece <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* call the function using pointer to function g_Timer2_callBackPtr(); */
    2ec4:	e0 91 58 01 	lds	r30, 0x0158
    2ec8:	f0 91 59 01 	lds	r31, 0x0159
    2ecc:	09 95       	icall
	}
}
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	ff 91       	pop	r31
    2ed4:	ef 91       	pop	r30
    2ed6:	bf 91       	pop	r27
    2ed8:	af 91       	pop	r26
    2eda:	9f 91       	pop	r25
    2edc:	8f 91       	pop	r24
    2ede:	7f 91       	pop	r23
    2ee0:	6f 91       	pop	r22
    2ee2:	5f 91       	pop	r21
    2ee4:	4f 91       	pop	r20
    2ee6:	3f 91       	pop	r19
    2ee8:	2f 91       	pop	r18
    2eea:	0f 90       	pop	r0
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

00002ef4 <__vector_4>:

/*	Timer2 callback function for compare mode*/
ISR(TIMER2_COMP_vect)
{
    2ef4:	1f 92       	push	r1
    2ef6:	0f 92       	push	r0
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	0f 92       	push	r0
    2efc:	11 24       	eor	r1, r1
    2efe:	2f 93       	push	r18
    2f00:	3f 93       	push	r19
    2f02:	4f 93       	push	r20
    2f04:	5f 93       	push	r21
    2f06:	6f 93       	push	r22
    2f08:	7f 93       	push	r23
    2f0a:	8f 93       	push	r24
    2f0c:	9f 93       	push	r25
    2f0e:	af 93       	push	r26
    2f10:	bf 93       	push	r27
    2f12:	ef 93       	push	r30
    2f14:	ff 93       	push	r31
    2f16:	df 93       	push	r29
    2f18:	cf 93       	push	r28
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
	if (g_Timer2_callBackPtr != NULL_PTR)
    2f1e:	80 91 58 01 	lds	r24, 0x0158
    2f22:	90 91 59 01 	lds	r25, 0x0159
    2f26:	00 97       	sbiw	r24, 0x00	; 0
    2f28:	29 f0       	breq	.+10     	; 0x2f34 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* call the function using pointer to function g_Timer2_callBackPtr(); */
    2f2a:	e0 91 58 01 	lds	r30, 0x0158
    2f2e:	f0 91 59 01 	lds	r31, 0x0159
    2f32:	09 95       	icall
	}
}
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	ff 91       	pop	r31
    2f3a:	ef 91       	pop	r30
    2f3c:	bf 91       	pop	r27
    2f3e:	af 91       	pop	r26
    2f40:	9f 91       	pop	r25
    2f42:	8f 91       	pop	r24
    2f44:	7f 91       	pop	r23
    2f46:	6f 91       	pop	r22
    2f48:	5f 91       	pop	r21
    2f4a:	4f 91       	pop	r20
    2f4c:	3f 91       	pop	r19
    2f4e:	2f 91       	pop	r18
    2f50:	0f 90       	pop	r0
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	0f 90       	pop	r0
    2f56:	1f 90       	pop	r1
    2f58:	18 95       	reti

00002f5a <Timer_init>:
 * 4- Compare Value: 		0 -> 255 (Timer0/Timer2) and 0 -> 65535 (Timer1)
 * 5- Timerx Source:		Choose from (No Clock/ Pre-scalar / External Clock)
 * 6- Timer Compare Match:	Choose from (No OCx, Toggle OCx, Clear OCx, Set OCx)	[Only for compare mode]
 */
void Timer_init(const Timer_ConfigType* Config_Ptr)
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <Timer_init+0x6>
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <Timer_init+0x8>
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr->Timerx_ID)
    2f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6e:	84 81       	ldd	r24, Z+4	; 0x04
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	3c 83       	std	Y+4, r19	; 0x04
    2f76:	2b 83       	std	Y+3, r18	; 0x03
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	91 05       	cpc	r25, r1
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <Timer_init+0x2a>
    2f82:	60 c0       	rjmp	.+192    	; 0x3044 <Timer_init+0xea>
    2f84:	2b 81       	ldd	r18, Y+3	; 0x03
    2f86:	3c 81       	ldd	r19, Y+4	; 0x04
    2f88:	22 30       	cpi	r18, 0x02	; 2
    2f8a:	31 05       	cpc	r19, r1
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <Timer_init+0x36>
    2f8e:	b9 c0       	rjmp	.+370    	; 0x3102 <Timer_init+0x1a8>
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	00 97       	sbiw	r24, 0x00	; 0
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <Timer_init+0x40>
    2f98:	07 c1       	rjmp	.+526    	; 0x31a8 <Timer_init+0x24e>
	/**************************************************************************)*
	 *                                	Timer0                   	   			*
	 ****************************************************************************/
	case (TIMER0_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR0 = (1<<FOC0);
    2f9a:	e3 e5       	ldi	r30, 0x53	; 83
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 e8       	ldi	r24, 0x80	; 128
    2fa0:	80 83       	st	Z, r24

	/* Set the start value */
	TCNT0 = Config_Ptr->Start_value;
    2fa2:	a2 e5       	ldi	r26, 0x52	; 82
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	8c 93       	st	X, r24

	/* Set the pre-scalar or timer source */
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->Timer_Source << CS00);
    2fb0:	a3 e5       	ldi	r26, 0x53	; 83
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	e3 e5       	ldi	r30, 0x53	; 83
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	98 2f       	mov	r25, r24
    2fbc:	98 7f       	andi	r25, 0xF8	; 248
    2fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc2:	86 81       	ldd	r24, Z+6	; 0x06
    2fc4:	89 2b       	or	r24, r25
    2fc6:	8c 93       	st	X, r24

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    2fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fca:	fa 81       	ldd	r31, Y+2	; 0x02
    2fcc:	85 81       	ldd	r24, Z+5	; 0x05
    2fce:	82 30       	cpi	r24, 0x02	; 2
    2fd0:	59 f5       	brne	.+86     	; 0x3028 <Timer_init+0xce>
	{
		TCCR0 = (TCCR0 & 0xB7) | (1<<WGM01);			/* Clears WGM00 and Set WGM01*/
    2fd2:	a3 e5       	ldi	r26, 0x53	; 83
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e3 e5       	ldi	r30, 0x53	; 83
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	87 7b       	andi	r24, 0xB7	; 183
    2fde:	88 60       	ori	r24, 0x08	; 8
    2fe0:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM00);
    2fe2:	a3 e5       	ldi	r26, 0x53	; 83
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e3 e5       	ldi	r30, 0x53	; 83
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	28 2f       	mov	r18, r24
    2fee:	2f 7c       	andi	r18, 0xCF	; 207
    2ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff4:	87 81       	ldd	r24, Z+7	; 0x07
    2ff6:	88 2f       	mov	r24, r24
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	82 95       	swap	r24
    2ffc:	92 95       	swap	r25
    2ffe:	90 7f       	andi	r25, 0xF0	; 240
    3000:	98 27       	eor	r25, r24
    3002:	80 7f       	andi	r24, 0xF0	; 240
    3004:	98 27       	eor	r25, r24
    3006:	82 2b       	or	r24, r18
    3008:	8c 93       	st	X, r24
		OCR0  = Config_Ptr->Compare_value;
    300a:	ac e5       	ldi	r26, 0x5C	; 92
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e9 81       	ldd	r30, Y+1	; 0x01
    3010:	fa 81       	ldd	r31, Y+2	; 0x02
    3012:	82 81       	ldd	r24, Z+2	; 0x02
    3014:	93 81       	ldd	r25, Z+3	; 0x03
    3016:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0);								/* Enable Timer0 compare interrupt */
    3018:	a9 e5       	ldi	r26, 0x59	; 89
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	e9 e5       	ldi	r30, 0x59	; 89
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	82 60       	ori	r24, 0x02	; 2
    3024:	8c 93       	st	X, r24
    3026:	c0 c0       	rjmp	.+384    	; 0x31a8 <Timer_init+0x24e>
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    3028:	e9 81       	ldd	r30, Y+1	; 0x01
    302a:	fa 81       	ldd	r31, Y+2	; 0x02
    302c:	85 81       	ldd	r24, Z+5	; 0x05
    302e:	88 23       	and	r24, r24
    3030:	09 f0       	breq	.+2      	; 0x3034 <Timer_init+0xda>
    3032:	ba c0       	rjmp	.+372    	; 0x31a8 <Timer_init+0x24e>
	{
		TIMSK |= (1<<TOIE0);								/* Enable Timer0 overflow interrupt */
    3034:	a9 e5       	ldi	r26, 0x59	; 89
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e9 e5       	ldi	r30, 0x59	; 89
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	81 60       	ori	r24, 0x01	; 1
    3040:	8c 93       	st	X, r24
    3042:	b2 c0       	rjmp	.+356    	; 0x31a8 <Timer_init+0x24e>
	/**************************************************************************)*
	 *                                	Timer1                   	   			*
	 ****************************************************************************/
	case (TIMER1_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    3044:	af e4       	ldi	r26, 0x4F	; 79
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	ef e4       	ldi	r30, 0x4F	; 79
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	8c 60       	ori	r24, 0x0C	; 12
    3050:	8c 93       	st	X, r24

	/* Set the start value */
	TCNT1 = Config_Ptr->Start_value;
    3052:	ac e4       	ldi	r26, 0x4C	; 76
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e9 81       	ldd	r30, Y+1	; 0x01
    3058:	fa 81       	ldd	r31, Y+2	; 0x02
    305a:	80 81       	ld	r24, Z
    305c:	91 81       	ldd	r25, Z+1	; 0x01
    305e:	11 96       	adiw	r26, 0x01	; 1
    3060:	9c 93       	st	X, r25
    3062:	8e 93       	st	-X, r24

	/* Set the pre-scalar or timer source */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->Timer_Source << CS10);
    3064:	ae e4       	ldi	r26, 0x4E	; 78
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	ee e4       	ldi	r30, 0x4E	; 78
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	98 2f       	mov	r25, r24
    3070:	98 7f       	andi	r25, 0xF8	; 248
    3072:	e9 81       	ldd	r30, Y+1	; 0x01
    3074:	fa 81       	ldd	r31, Y+2	; 0x02
    3076:	86 81       	ldd	r24, Z+6	; 0x06
    3078:	89 2b       	or	r24, r25
    307a:	8c 93       	st	X, r24

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    307c:	e9 81       	ldd	r30, Y+1	; 0x01
    307e:	fa 81       	ldd	r31, Y+2	; 0x02
    3080:	85 81       	ldd	r24, Z+5	; 0x05
    3082:	82 30       	cpi	r24, 0x02	; 2
    3084:	81 f5       	brne	.+96     	; 0x30e6 <Timer_init+0x18c>
	{
		TCCR1B = (TCCR1B & 0xE7) | (1<<WGM12);				/* Clears WGM13 and Set WGM12 (Mode 4 CTC)*/
    3086:	ae e4       	ldi	r26, 0x4E	; 78
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	ee e4       	ldi	r30, 0x4E	; 78
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	87 7e       	andi	r24, 0xE7	; 231
    3092:	88 60       	ori	r24, 0x08	; 8
    3094:	8c 93       	st	X, r24
		TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->Timer_Compare_Match << COM1A0);
    3096:	af e4       	ldi	r26, 0x4F	; 79
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	ef e4       	ldi	r30, 0x4F	; 79
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	28 2f       	mov	r18, r24
    30a2:	2f 73       	andi	r18, 0x3F	; 63
    30a4:	e9 81       	ldd	r30, Y+1	; 0x01
    30a6:	fa 81       	ldd	r31, Y+2	; 0x02
    30a8:	87 81       	ldd	r24, Z+7	; 0x07
    30aa:	88 2f       	mov	r24, r24
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	00 24       	eor	r0, r0
    30b0:	96 95       	lsr	r25
    30b2:	87 95       	ror	r24
    30b4:	07 94       	ror	r0
    30b6:	96 95       	lsr	r25
    30b8:	87 95       	ror	r24
    30ba:	07 94       	ror	r0
    30bc:	98 2f       	mov	r25, r24
    30be:	80 2d       	mov	r24, r0
    30c0:	82 2b       	or	r24, r18
    30c2:	8c 93       	st	X, r24
		OCR1A  = Config_Ptr->Compare_value;
    30c4:	aa e4       	ldi	r26, 0x4A	; 74
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ca:	fa 81       	ldd	r31, Y+2	; 0x02
    30cc:	82 81       	ldd	r24, Z+2	; 0x02
    30ce:	93 81       	ldd	r25, Z+3	; 0x03
    30d0:	11 96       	adiw	r26, 0x01	; 1
    30d2:	9c 93       	st	X, r25
    30d4:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);								/* Enable Timer1 compare interrupt */
    30d6:	a9 e5       	ldi	r26, 0x59	; 89
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e9 e5       	ldi	r30, 0x59	; 89
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	80 61       	ori	r24, 0x10	; 16
    30e2:	8c 93       	st	X, r24
    30e4:	61 c0       	rjmp	.+194    	; 0x31a8 <Timer_init+0x24e>
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    30e6:	e9 81       	ldd	r30, Y+1	; 0x01
    30e8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ea:	85 81       	ldd	r24, Z+5	; 0x05
    30ec:	88 23       	and	r24, r24
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <Timer_init+0x198>
    30f0:	5b c0       	rjmp	.+182    	; 0x31a8 <Timer_init+0x24e>
	{
		TIMSK |= (1<<TOIE1);								/* Enable Timer1 overflow interrupt */
    30f2:	a9 e5       	ldi	r26, 0x59	; 89
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e9 e5       	ldi	r30, 0x59	; 89
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	84 60       	ori	r24, 0x04	; 4
    30fe:	8c 93       	st	X, r24
    3100:	53 c0       	rjmp	.+166    	; 0x31a8 <Timer_init+0x24e>
	/**************************************************************************)*
	 *                                	Timer2                   	   			*
	 ****************************************************************************/
	case (TIMER2_ID):
																		/* FOCx is always set when Timer is not in PWM mode. Clears all register */
																		TCCR2 = (1<<FOC2);
    3102:	e5 e4       	ldi	r30, 0x45	; 69
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 e8       	ldi	r24, 0x80	; 128
    3108:	80 83       	st	Z, r24

	/* Set the start value */
	TCNT2 = Config_Ptr->Start_value;
    310a:	a4 e4       	ldi	r26, 0x44	; 68
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e9 81       	ldd	r30, Y+1	; 0x01
    3110:	fa 81       	ldd	r31, Y+2	; 0x02
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	8c 93       	st	X, r24

	/* Set the pre-scalar or timer source */
	TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->Timer_Source << CS20);
    3118:	a5 e4       	ldi	r26, 0x45	; 69
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e5 e4       	ldi	r30, 0x45	; 69
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	80 81       	ld	r24, Z
    3122:	98 2f       	mov	r25, r24
    3124:	98 7f       	andi	r25, 0xF8	; 248
    3126:	e9 81       	ldd	r30, Y+1	; 0x01
    3128:	fa 81       	ldd	r31, Y+2	; 0x02
    312a:	86 81       	ldd	r24, Z+6	; 0x06
    312c:	89 2b       	or	r24, r25
    312e:	8c 93       	st	X, r24

	/* If timer compare mode is selected set the WGM01 = 1
	 * set the COM0x from compare match mode
	 * set OCRx value*/
	if(Config_Ptr->Timer_mode == TIMER_COMPARE_MODE)
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	85 81       	ldd	r24, Z+5	; 0x05
    3136:	82 30       	cpi	r24, 0x02	; 2
    3138:	59 f5       	brne	.+86     	; 0x3190 <Timer_init+0x236>
	{
		TCCR2 = (TCCR2 & 0xB7) | (1<<WGM21);			/* Clears WGM20 and Set WGM21*/
    313a:	a5 e4       	ldi	r26, 0x45	; 69
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e5 e4       	ldi	r30, 0x45	; 69
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	87 7b       	andi	r24, 0xB7	; 183
    3146:	88 60       	ori	r24, 0x08	; 8
    3148:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xCF) | (Config_Ptr->Timer_Compare_Match << COM20);
    314a:	a5 e4       	ldi	r26, 0x45	; 69
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	e5 e4       	ldi	r30, 0x45	; 69
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	80 81       	ld	r24, Z
    3154:	28 2f       	mov	r18, r24
    3156:	2f 7c       	andi	r18, 0xCF	; 207
    3158:	e9 81       	ldd	r30, Y+1	; 0x01
    315a:	fa 81       	ldd	r31, Y+2	; 0x02
    315c:	87 81       	ldd	r24, Z+7	; 0x07
    315e:	88 2f       	mov	r24, r24
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	82 95       	swap	r24
    3164:	92 95       	swap	r25
    3166:	90 7f       	andi	r25, 0xF0	; 240
    3168:	98 27       	eor	r25, r24
    316a:	80 7f       	andi	r24, 0xF0	; 240
    316c:	98 27       	eor	r25, r24
    316e:	82 2b       	or	r24, r18
    3170:	8c 93       	st	X, r24
		OCR2  = Config_Ptr->Compare_value;
    3172:	a3 e4       	ldi	r26, 0x43	; 67
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	e9 81       	ldd	r30, Y+1	; 0x01
    3178:	fa 81       	ldd	r31, Y+2	; 0x02
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	93 81       	ldd	r25, Z+3	; 0x03
    317e:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE2);								/* Enable Timer2 compare interrupt */
    3180:	a9 e5       	ldi	r26, 0x59	; 89
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e9 e5       	ldi	r30, 0x59	; 89
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	80 68       	ori	r24, 0x80	; 128
    318c:	8c 93       	st	X, r24
    318e:	0c c0       	rjmp	.+24     	; 0x31a8 <Timer_init+0x24e>
	}
	else if(Config_Ptr->Timer_mode == TIMER_NORMAL_MODE)
    3190:	e9 81       	ldd	r30, Y+1	; 0x01
    3192:	fa 81       	ldd	r31, Y+2	; 0x02
    3194:	85 81       	ldd	r24, Z+5	; 0x05
    3196:	88 23       	and	r24, r24
    3198:	39 f4       	brne	.+14     	; 0x31a8 <Timer_init+0x24e>
	{
		TIMSK |= (1<<TOIE2);								/* Enable Timer2 overflow interrupt */
    319a:	a9 e5       	ldi	r26, 0x59	; 89
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e9 e5       	ldi	r30, 0x59	; 89
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	80 64       	ori	r24, 0x40	; 64
    31a6:	8c 93       	st	X, r24
	}
	break;
	}
}
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <Timer_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer_setCallBack(Timer_ID timer_ID, void(*a_ptr)(void))
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <Timer_setCallBack+0x6>
    31bc:	0f 92       	push	r0
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	7b 83       	std	Y+3, r23	; 0x03
    31c6:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_ID == TIMER0_ID)
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	88 23       	and	r24, r24
    31cc:	39 f4       	brne	.+14     	; 0x31dc <Timer_setCallBack+0x26>
	{
		/* Save the address of the Call back function in a global variable of Timer0 */
		g_Timer0_callBackPtr = a_ptr;
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	9b 81       	ldd	r25, Y+3	; 0x03
    31d2:	90 93 55 01 	sts	0x0155, r25
    31d6:	80 93 54 01 	sts	0x0154, r24
    31da:	13 c0       	rjmp	.+38     	; 0x3202 <Timer_setCallBack+0x4c>
	}
	else if(timer_ID == TIMER1_ID)
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	39 f4       	brne	.+14     	; 0x31f0 <Timer_setCallBack+0x3a>
	{
		/* Save the address of the Call back function in a global variable of Timer1 */
		g_Timer1_callBackPtr = a_ptr;
    31e2:	8a 81       	ldd	r24, Y+2	; 0x02
    31e4:	9b 81       	ldd	r25, Y+3	; 0x03
    31e6:	90 93 57 01 	sts	0x0157, r25
    31ea:	80 93 56 01 	sts	0x0156, r24
    31ee:	09 c0       	rjmp	.+18     	; 0x3202 <Timer_setCallBack+0x4c>
	}
	else if(timer_ID == TIMER2_ID)
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	82 30       	cpi	r24, 0x02	; 2
    31f4:	31 f4       	brne	.+12     	; 0x3202 <Timer_setCallBack+0x4c>
	{
		/* Save the address of the Call back function in a global variable of Timer2 */
		g_Timer2_callBackPtr = a_ptr;
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	9b 81       	ldd	r25, Y+3	; 0x03
    31fa:	90 93 59 01 	sts	0x0159, r25
    31fe:	80 93 58 01 	sts	0x0158, r24
	}
}
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <Timer_deinit>:
/*
 * Description :
 * De-Initialize the Timerx for the chosen timer (TIMER0_ID / TIMER1_ID / TIMER2_ID)
 */
void Timer_deinit(Timer_ID timer_ID)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	0f 92       	push	r0
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	89 83       	std	Y+1, r24	; 0x01
	if(timer_ID == TIMER0_ID)				/* De-initialize Timer0 */
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	88 23       	and	r24, r24
    321e:	b1 f4       	brne	.+44     	; 0x324c <Timer_deinit+0x3e>
	{
		TCCR0 = 0;
    3220:	e3 e5       	ldi	r30, 0x53	; 83
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	10 82       	st	Z, r1
		TCNT1 = 0;
    3226:	ec e4       	ldi	r30, 0x4C	; 76
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	11 82       	std	Z+1, r1	; 0x01
    322c:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0);
    322e:	a9 e5       	ldi	r26, 0x59	; 89
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e9 e5       	ldi	r30, 0x59	; 89
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	8e 7f       	andi	r24, 0xFE	; 254
    323a:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    323c:	a9 e5       	ldi	r26, 0x59	; 89
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e9 e5       	ldi	r30, 0x59	; 89
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	8d 7f       	andi	r24, 0xFD	; 253
    3248:	8c 93       	st	X, r24
    324a:	3a c0       	rjmp	.+116    	; 0x32c0 <Timer_deinit+0xb2>
	}

	else if(timer_ID == TIMER1_ID)			/* De-initialize Timer1 */
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	01 f5       	brne	.+64     	; 0x3292 <Timer_deinit+0x84>
	{
		TCCR1A = 0;
    3252:	ef e4       	ldi	r30, 0x4F	; 79
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	10 82       	st	Z, r1
		TCCR1B = 0;
    3258:	ee e4       	ldi	r30, 0x4E	; 78
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	10 82       	st	Z, r1
		TCNT1 = 0;
    325e:	ec e4       	ldi	r30, 0x4C	; 76
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	11 82       	std	Z+1, r1	; 0x01
    3264:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1);
    3266:	a9 e5       	ldi	r26, 0x59	; 89
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e9 e5       	ldi	r30, 0x59	; 89
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	8b 7f       	andi	r24, 0xFB	; 251
    3272:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1A);
    3274:	a9 e5       	ldi	r26, 0x59	; 89
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	e9 e5       	ldi	r30, 0x59	; 89
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	8f 7e       	andi	r24, 0xEF	; 239
    3280:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE1B);
    3282:	a9 e5       	ldi	r26, 0x59	; 89
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e9 e5       	ldi	r30, 0x59	; 89
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	87 7f       	andi	r24, 0xF7	; 247
    328e:	8c 93       	st	X, r24
    3290:	17 c0       	rjmp	.+46     	; 0x32c0 <Timer_deinit+0xb2>
	}

	else if(timer_ID == TIMER2_ID)			/* De-initialize Timer2 */
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	82 30       	cpi	r24, 0x02	; 2
    3296:	a1 f4       	brne	.+40     	; 0x32c0 <Timer_deinit+0xb2>
	{
		TCCR2 = 0;
    3298:	e5 e4       	ldi	r30, 0x45	; 69
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	10 82       	st	Z, r1
		TCNT2 = 0;
    329e:	e4 e4       	ldi	r30, 0x44	; 68
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2);
    32a4:	a9 e5       	ldi	r26, 0x59	; 89
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e9 e5       	ldi	r30, 0x59	; 89
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	8f 7b       	andi	r24, 0xBF	; 191
    32b0:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE2);
    32b2:	a9 e5       	ldi	r26, 0x59	; 89
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e9 e5       	ldi	r30, 0x59	; 89
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	8f 77       	andi	r24, 0x7F	; 127
    32be:	8c 93       	st	X, r24
	}
}
    32c0:	0f 90       	pop	r0
    32c2:	cf 91       	pop	r28
    32c4:	df 91       	pop	r29
    32c6:	08 95       	ret

000032c8 <Timer_SetStartValue>:

/*
 * Description: Function to set the Initial value of selected timer.
 */
void Timer_SetStartValue(Timer_ID timer_ID, uint16 start_value)
{
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <Timer_SetStartValue+0x6>
    32ce:	0f 92       	push	r0
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	7b 83       	std	Y+3, r23	; 0x03
    32d8:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_ID == TIMER0_ID)			/* Set initial value for Timer0 */
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	88 23       	and	r24, r24
    32de:	29 f4       	brne	.+10     	; 0x32ea <Timer_SetStartValue+0x22>
	{
		TCNT0 = start_value;
    32e0:	e2 e5       	ldi	r30, 0x52	; 82
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	8a 81       	ldd	r24, Y+2	; 0x02
    32e6:	80 83       	st	Z, r24
    32e8:	11 c0       	rjmp	.+34     	; 0x330c <Timer_SetStartValue+0x44>
	}

	else if(timer_ID == TIMER1_ID)			/* Set initial value for Timer1 */
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	81 30       	cpi	r24, 0x01	; 1
    32ee:	39 f4       	brne	.+14     	; 0x32fe <Timer_SetStartValue+0x36>
	{
		TCNT1 = start_value;
    32f0:	ec e4       	ldi	r30, 0x4C	; 76
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	8a 81       	ldd	r24, Y+2	; 0x02
    32f6:	9b 81       	ldd	r25, Y+3	; 0x03
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
    32fc:	07 c0       	rjmp	.+14     	; 0x330c <Timer_SetStartValue+0x44>
	}

	else if(timer_ID == TIMER2_ID)			/* Set initial value for Timer2 */
    32fe:	89 81       	ldd	r24, Y+1	; 0x01
    3300:	82 30       	cpi	r24, 0x02	; 2
    3302:	21 f4       	brne	.+8      	; 0x330c <Timer_SetStartValue+0x44>
	{
		TCNT2 = start_value;
    3304:	e4 e4       	ldi	r30, 0x44	; 68
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	80 83       	st	Z, r24
	}
}
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <Timer_SetCompareValue>:

/*
 * Description: Function to set the Compare Value of the selected timer.
 */
void Timer_SetCompareValue(Timer_ID timer_ID, uint16 compare_value)
{
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	00 d0       	rcall	.+0      	; 0x331e <Timer_SetCompareValue+0x6>
    331e:	0f 92       	push	r0
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	89 83       	std	Y+1, r24	; 0x01
    3326:	7b 83       	std	Y+3, r23	; 0x03
    3328:	6a 83       	std	Y+2, r22	; 0x02
	if(timer_ID == TIMER0_ID)			/* Set compare value for Timer0 */
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	88 23       	and	r24, r24
    332e:	29 f4       	brne	.+10     	; 0x333a <Timer_SetCompareValue+0x22>
	{
		OCR0 = compare_value;
    3330:	ec e5       	ldi	r30, 0x5C	; 92
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	80 83       	st	Z, r24
    3338:	11 c0       	rjmp	.+34     	; 0x335c <Timer_SetCompareValue+0x44>
	}

	else if(timer_ID == TIMER1_ID)			/* Set compare value for Timer1 */
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	81 30       	cpi	r24, 0x01	; 1
    333e:	39 f4       	brne	.+14     	; 0x334e <Timer_SetCompareValue+0x36>
	{
		OCR1A = compare_value;
    3340:	ea e4       	ldi	r30, 0x4A	; 74
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	9b 81       	ldd	r25, Y+3	; 0x03
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	80 83       	st	Z, r24
    334c:	07 c0       	rjmp	.+14     	; 0x335c <Timer_SetCompareValue+0x44>
	}

	else if(timer_ID == TIMER2_ID)			/* Set compare value for Timer2 */
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	82 30       	cpi	r24, 0x02	; 2
    3352:	21 f4       	brne	.+8      	; 0x335c <Timer_SetCompareValue+0x44>
	{
		OCR2 = compare_value;
    3354:	e3 e4       	ldi	r30, 0x43	; 67
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	80 83       	st	Z, r24
	}
}
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType* Config_Ptr)
{
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	00 d0       	rcall	.+0      	; 0x336e <UART_init+0x6>
    336e:	00 d0       	rcall	.+0      	; 0x3370 <UART_init+0x8>
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	9c 83       	std	Y+4, r25	; 0x04
    3376:	8b 83       	std	Y+3, r24	; 0x03
	/* U2X = 1 for double transmission speed */
	SET_BIT(UCSRA,U2X);
    3378:	ab e2       	ldi	r26, 0x2B	; 43
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	eb e2       	ldi	r30, 0x2B	; 43
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	82 60       	ori	r24, 0x02	; 2
    3384:	8c 93       	st	X, r24

	/* RXEN = 1 for Receiver Enable */
	SET_BIT(UCSRB,RXEN);
    3386:	aa e2       	ldi	r26, 0x2A	; 42
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	ea e2       	ldi	r30, 0x2A	; 42
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	80 61       	ori	r24, 0x10	; 16
    3392:	8c 93       	st	X, r24
	/* TXEN = 1 for Transmitter Enable */
	SET_BIT(UCSRB,TXEN);
    3394:	aa e2       	ldi	r26, 0x2A	; 42
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	ea e2       	ldi	r30, 0x2A	; 42
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	88 60       	ori	r24, 0x08	; 8
    33a0:	8c 93       	st	X, r24

	/* URSEL = 1 to write on UCSRC shared register*/
	SET_BIT(UCSRC,URSEL);
    33a2:	a0 e4       	ldi	r26, 0x40	; 64
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	e0 e4       	ldi	r30, 0x40	; 64
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	80 68       	ori	r24, 0x80	; 128
    33ae:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityMode)<<UPM0);
    33b0:	a0 e4       	ldi	r26, 0x40	; 64
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	e0 e4       	ldi	r30, 0x40	; 64
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	28 2f       	mov	r18, r24
    33bc:	2f 7c       	andi	r18, 0xCF	; 207
    33be:	eb 81       	ldd	r30, Y+3	; 0x03
    33c0:	fc 81       	ldd	r31, Y+4	; 0x04
    33c2:	85 81       	ldd	r24, Z+5	; 0x05
    33c4:	88 2f       	mov	r24, r24
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	82 95       	swap	r24
    33ca:	92 95       	swap	r25
    33cc:	90 7f       	andi	r25, 0xF0	; 240
    33ce:	98 27       	eor	r25, r24
    33d0:	80 7f       	andi	r24, 0xF0	; 240
    33d2:	98 27       	eor	r25, r24
    33d4:	82 2b       	or	r24, r18
    33d6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->StopBits)<<USBS);
    33d8:	a0 e4       	ldi	r26, 0x40	; 64
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e0 e4       	ldi	r30, 0x40	; 64
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	28 2f       	mov	r18, r24
    33e4:	27 7f       	andi	r18, 0xF7	; 247
    33e6:	eb 81       	ldd	r30, Y+3	; 0x03
    33e8:	fc 81       	ldd	r31, Y+4	; 0x04
    33ea:	86 81       	ldd	r24, Z+6	; 0x06
    33ec:	88 2f       	mov	r24, r24
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	88 0f       	add	r24, r24
    33fa:	99 1f       	adc	r25, r25
    33fc:	82 2b       	or	r24, r18
    33fe:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->DataBits)<<UCSZ0);
    3400:	a0 e4       	ldi	r26, 0x40	; 64
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	e0 e4       	ldi	r30, 0x40	; 64
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	28 2f       	mov	r18, r24
    340c:	29 7f       	andi	r18, 0xF9	; 249
    340e:	eb 81       	ldd	r30, Y+3	; 0x03
    3410:	fc 81       	ldd	r31, Y+4	; 0x04
    3412:	84 81       	ldd	r24, Z+4	; 0x04
    3414:	88 2f       	mov	r24, r24
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	82 2b       	or	r24, r18
    341e:	8c 93       	st	X, r24

	/* URSEL = 0 to write on UBRRH shared register*/
	CLEAR_BIT(UBRRH,URSEL);
    3420:	a0 e4       	ldi	r26, 0x40	; 64
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	e0 e4       	ldi	r30, 0x40	; 64
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	8f 77       	andi	r24, 0x7F	; 127
    342c:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	uint16 Baudrate_value = (uint16)(((F_CPU/((Config_Ptr->BaudRate) * 8UL)))-1);
    342e:	eb 81       	ldd	r30, Y+3	; 0x03
    3430:	fc 81       	ldd	r31, Y+4	; 0x04
    3432:	80 81       	ld	r24, Z
    3434:	91 81       	ldd	r25, Z+1	; 0x01
    3436:	a2 81       	ldd	r26, Z+2	; 0x02
    3438:	b3 81       	ldd	r27, Z+3	; 0x03
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	aa 1f       	adc	r26, r26
    3440:	bb 1f       	adc	r27, r27
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	aa 1f       	adc	r26, r26
    3448:	bb 1f       	adc	r27, r27
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	aa 1f       	adc	r26, r26
    3450:	bb 1f       	adc	r27, r27
    3452:	9c 01       	movw	r18, r24
    3454:	ad 01       	movw	r20, r26
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	92 e1       	ldi	r25, 0x12	; 18
    345a:	aa e7       	ldi	r26, 0x7A	; 122
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	bc 01       	movw	r22, r24
    3460:	cd 01       	movw	r24, r26
    3462:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <__udivmodsi4>
    3466:	da 01       	movw	r26, r20
    3468:	c9 01       	movw	r24, r18
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	9a 83       	std	Y+2, r25	; 0x02
    346e:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (Baudrate_value>>8);
    3470:	e0 e4       	ldi	r30, 0x40	; 64
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	9a 81       	ldd	r25, Y+2	; 0x02
    3478:	89 2f       	mov	r24, r25
    347a:	99 27       	eor	r25, r25
    347c:	80 83       	st	Z, r24
	UBRRL = Baudrate_value;
    347e:	e9 e2       	ldi	r30, 0x29	; 41
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	80 83       	st	Z, r24

}
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	0f 92       	push	r0
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
    349e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE)){}
    34a0:	eb e2       	ldi	r30, 0x2B	; 43
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	80 72       	andi	r24, 0x20	; 32
    34ac:	90 70       	andi	r25, 0x00	; 0
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	b9 f3       	breq	.-18     	; 0x34a0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    34b2:	ec e2       	ldi	r30, 0x2C	; 44
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA,RXC)){}
    34ca:	eb e2       	ldi	r30, 0x2B	; 43
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	88 23       	and	r24, r24
    34d2:	dc f7       	brge	.-10     	; 0x34ca <UART_receiveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    34d4:	ec e2       	ldi	r30, 0x2C	; 44
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
}
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <UART_sendString+0x6>
    34e6:	0f 92       	push	r0
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	9b 83       	std	Y+3, r25	; 0x03
    34ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34f0:	19 82       	std	Y+1, r1	; 0x01
    34f2:	0e c0       	rjmp	.+28     	; 0x3510 <UART_sendString+0x30>
	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	28 2f       	mov	r18, r24
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	9b 81       	ldd	r25, Y+3	; 0x03
    34fe:	fc 01       	movw	r30, r24
    3500:	e2 0f       	add	r30, r18
    3502:	f3 1f       	adc	r31, r19
    3504:	80 81       	ld	r24, Z
    3506:	0e 94 4a 1a 	call	0x3494	; 0x3494 <UART_sendByte>
		i++;
    350a:	89 81       	ldd	r24, Y+1	; 0x01
    350c:	8f 5f       	subi	r24, 0xFF	; 255
    350e:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	/* Send the whole string */
	while(Str[i] != '\0')
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	9b 81       	ldd	r25, Y+3	; 0x03
    351a:	fc 01       	movw	r30, r24
    351c:	e2 0f       	add	r30, r18
    351e:	f3 1f       	adc	r31, r19
    3520:	80 81       	ld	r24, Z
    3522:	88 23       	and	r24, r24
    3524:	39 f7       	brne	.-50     	; 0x34f4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3526:	0f 90       	pop	r0
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	df 93       	push	r29
    3538:	cf 93       	push	r28
    353a:	00 d0       	rcall	.+0      	; 0x353c <UART_receiveString+0xa>
    353c:	0f 92       	push	r0
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	9b 83       	std	Y+3, r25	; 0x03
    3544:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3546:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	8c 01       	movw	r16, r24
    3554:	02 0f       	add	r16, r18
    3556:	13 1f       	adc	r17, r19
    3558:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    355c:	f8 01       	movw	r30, r16
    355e:	80 83       	st	Z, r24
    3560:	0f c0       	rjmp	.+30     	; 0x3580 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	28 2f       	mov	r18, r24
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	9b 81       	ldd	r25, Y+3	; 0x03
    3572:	8c 01       	movw	r16, r24
    3574:	02 0f       	add	r16, r18
    3576:	13 1f       	adc	r17, r19
    3578:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <UART_receiveByte>
    357c:	f8 01       	movw	r30, r16
    357e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	28 2f       	mov	r18, r24
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	8a 81       	ldd	r24, Y+2	; 0x02
    3588:	9b 81       	ldd	r25, Y+3	; 0x03
    358a:	fc 01       	movw	r30, r24
    358c:	e2 0f       	add	r30, r18
    358e:	f3 1f       	adc	r31, r19
    3590:	80 81       	ld	r24, Z
    3592:	83 32       	cpi	r24, 0x23	; 35
    3594:	31 f7       	brne	.-52     	; 0x3562 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	28 2f       	mov	r18, r24
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	9b 81       	ldd	r25, Y+3	; 0x03
    35a0:	fc 01       	movw	r30, r24
    35a2:	e2 0f       	add	r30, r18
    35a4:	f3 1f       	adc	r31, r19
    35a6:	10 82       	st	Z, r1
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	08 95       	ret

000035b8 <__udivmodsi4>:
    35b8:	a1 e2       	ldi	r26, 0x21	; 33
    35ba:	1a 2e       	mov	r1, r26
    35bc:	aa 1b       	sub	r26, r26
    35be:	bb 1b       	sub	r27, r27
    35c0:	fd 01       	movw	r30, r26
    35c2:	0d c0       	rjmp	.+26     	; 0x35de <__udivmodsi4_ep>

000035c4 <__udivmodsi4_loop>:
    35c4:	aa 1f       	adc	r26, r26
    35c6:	bb 1f       	adc	r27, r27
    35c8:	ee 1f       	adc	r30, r30
    35ca:	ff 1f       	adc	r31, r31
    35cc:	a2 17       	cp	r26, r18
    35ce:	b3 07       	cpc	r27, r19
    35d0:	e4 07       	cpc	r30, r20
    35d2:	f5 07       	cpc	r31, r21
    35d4:	20 f0       	brcs	.+8      	; 0x35de <__udivmodsi4_ep>
    35d6:	a2 1b       	sub	r26, r18
    35d8:	b3 0b       	sbc	r27, r19
    35da:	e4 0b       	sbc	r30, r20
    35dc:	f5 0b       	sbc	r31, r21

000035de <__udivmodsi4_ep>:
    35de:	66 1f       	adc	r22, r22
    35e0:	77 1f       	adc	r23, r23
    35e2:	88 1f       	adc	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	1a 94       	dec	r1
    35e8:	69 f7       	brne	.-38     	; 0x35c4 <__udivmodsi4_loop>
    35ea:	60 95       	com	r22
    35ec:	70 95       	com	r23
    35ee:	80 95       	com	r24
    35f0:	90 95       	com	r25
    35f2:	9b 01       	movw	r18, r22
    35f4:	ac 01       	movw	r20, r24
    35f6:	bd 01       	movw	r22, r26
    35f8:	cf 01       	movw	r24, r30
    35fa:	08 95       	ret

000035fc <__prologue_saves__>:
    35fc:	2f 92       	push	r2
    35fe:	3f 92       	push	r3
    3600:	4f 92       	push	r4
    3602:	5f 92       	push	r5
    3604:	6f 92       	push	r6
    3606:	7f 92       	push	r7
    3608:	8f 92       	push	r8
    360a:	9f 92       	push	r9
    360c:	af 92       	push	r10
    360e:	bf 92       	push	r11
    3610:	cf 92       	push	r12
    3612:	df 92       	push	r13
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	ca 1b       	sub	r28, r26
    3626:	db 0b       	sbc	r29, r27
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	09 94       	ijmp

00003634 <__epilogue_restores__>:
    3634:	2a 88       	ldd	r2, Y+18	; 0x12
    3636:	39 88       	ldd	r3, Y+17	; 0x11
    3638:	48 88       	ldd	r4, Y+16	; 0x10
    363a:	5f 84       	ldd	r5, Y+15	; 0x0f
    363c:	6e 84       	ldd	r6, Y+14	; 0x0e
    363e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3640:	8c 84       	ldd	r8, Y+12	; 0x0c
    3642:	9b 84       	ldd	r9, Y+11	; 0x0b
    3644:	aa 84       	ldd	r10, Y+10	; 0x0a
    3646:	b9 84       	ldd	r11, Y+9	; 0x09
    3648:	c8 84       	ldd	r12, Y+8	; 0x08
    364a:	df 80       	ldd	r13, Y+7	; 0x07
    364c:	ee 80       	ldd	r14, Y+6	; 0x06
    364e:	fd 80       	ldd	r15, Y+5	; 0x05
    3650:	0c 81       	ldd	r16, Y+4	; 0x04
    3652:	1b 81       	ldd	r17, Y+3	; 0x03
    3654:	aa 81       	ldd	r26, Y+2	; 0x02
    3656:	b9 81       	ldd	r27, Y+1	; 0x01
    3658:	ce 0f       	add	r28, r30
    365a:	d1 1d       	adc	r29, r1
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	ed 01       	movw	r28, r26
    3668:	08 95       	ret

0000366a <itoa>:
    366a:	fb 01       	movw	r30, r22
    366c:	9f 01       	movw	r18, r30
    366e:	e8 94       	clt
    3670:	42 30       	cpi	r20, 0x02	; 2
    3672:	c4 f0       	brlt	.+48     	; 0x36a4 <itoa+0x3a>
    3674:	45 32       	cpi	r20, 0x25	; 37
    3676:	b4 f4       	brge	.+44     	; 0x36a4 <itoa+0x3a>
    3678:	4a 30       	cpi	r20, 0x0A	; 10
    367a:	29 f4       	brne	.+10     	; 0x3686 <itoa+0x1c>
    367c:	97 fb       	bst	r25, 7
    367e:	1e f4       	brtc	.+6      	; 0x3686 <itoa+0x1c>
    3680:	90 95       	com	r25
    3682:	81 95       	neg	r24
    3684:	9f 4f       	sbci	r25, 0xFF	; 255
    3686:	64 2f       	mov	r22, r20
    3688:	77 27       	eor	r23, r23
    368a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__udivmodhi4>
    368e:	80 5d       	subi	r24, 0xD0	; 208
    3690:	8a 33       	cpi	r24, 0x3A	; 58
    3692:	0c f0       	brlt	.+2      	; 0x3696 <itoa+0x2c>
    3694:	89 5d       	subi	r24, 0xD9	; 217
    3696:	81 93       	st	Z+, r24
    3698:	cb 01       	movw	r24, r22
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	a1 f7       	brne	.-24     	; 0x3686 <itoa+0x1c>
    369e:	16 f4       	brtc	.+4      	; 0x36a4 <itoa+0x3a>
    36a0:	5d e2       	ldi	r21, 0x2D	; 45
    36a2:	51 93       	st	Z+, r21
    36a4:	10 82       	st	Z, r1
    36a6:	c9 01       	movw	r24, r18
    36a8:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <strrev>

000036ac <strrev>:
    36ac:	dc 01       	movw	r26, r24
    36ae:	fc 01       	movw	r30, r24
    36b0:	67 2f       	mov	r22, r23
    36b2:	71 91       	ld	r23, Z+
    36b4:	77 23       	and	r23, r23
    36b6:	e1 f7       	brne	.-8      	; 0x36b0 <strrev+0x4>
    36b8:	32 97       	sbiw	r30, 0x02	; 2
    36ba:	04 c0       	rjmp	.+8      	; 0x36c4 <strrev+0x18>
    36bc:	7c 91       	ld	r23, X
    36be:	6d 93       	st	X+, r22
    36c0:	70 83       	st	Z, r23
    36c2:	62 91       	ld	r22, -Z
    36c4:	ae 17       	cp	r26, r30
    36c6:	bf 07       	cpc	r27, r31
    36c8:	c8 f3       	brcs	.-14     	; 0x36bc <strrev+0x10>
    36ca:	08 95       	ret

000036cc <__udivmodhi4>:
    36cc:	aa 1b       	sub	r26, r26
    36ce:	bb 1b       	sub	r27, r27
    36d0:	51 e1       	ldi	r21, 0x11	; 17
    36d2:	07 c0       	rjmp	.+14     	; 0x36e2 <__udivmodhi4_ep>

000036d4 <__udivmodhi4_loop>:
    36d4:	aa 1f       	adc	r26, r26
    36d6:	bb 1f       	adc	r27, r27
    36d8:	a6 17       	cp	r26, r22
    36da:	b7 07       	cpc	r27, r23
    36dc:	10 f0       	brcs	.+4      	; 0x36e2 <__udivmodhi4_ep>
    36de:	a6 1b       	sub	r26, r22
    36e0:	b7 0b       	sbc	r27, r23

000036e2 <__udivmodhi4_ep>:
    36e2:	88 1f       	adc	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	5a 95       	dec	r21
    36e8:	a9 f7       	brne	.-22     	; 0x36d4 <__udivmodhi4_loop>
    36ea:	80 95       	com	r24
    36ec:	90 95       	com	r25
    36ee:	bc 01       	movw	r22, r24
    36f0:	cd 01       	movw	r24, r26
    36f2:	08 95       	ret

000036f4 <_exit>:
    36f4:	f8 94       	cli

000036f6 <__stop_program>:
    36f6:	ff cf       	rjmp	.-2      	; 0x36f6 <__stop_program>
